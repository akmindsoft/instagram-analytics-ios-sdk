// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name InstalibSDKFramework
import CoreGraphics
import Darwin
import Dispatch
import Foundation
@_exported import InstalibSDKFramework
import SQLite3
import Security
import Swift
import UIKit
import WebKit
import _Concurrency
public struct MediaModel {
  public init()
  public var uid: Swift.Int
  public var mediaId: Swift.String?
  public var userId: Swift.Int64?
  public var ownerUserId: Swift.Int64?
  public var isTaggedYou: Swift.Bool
  public var isSaved: Swift.Bool
  public var type: Swift.String?
  public var thumbnailUrl: Swift.String?
  public var shortcode: Swift.String?
  public var likeCount: Swift.Int?
  public var commentCount: Swift.Int?
  public var viewCount: Swift.Int?
  public var lastUpdateDate: Swift.Int64
  public var takenAt: Swift.Int64?
  public var isDeleted: Swift.Bool
}
public protocol Cryptor {
  mutating func seek(to: Swift.Int) throws
}
public protocol DeviceCollection {
  static var all: [InstalibSDKFramework.DeviceCollection & InstalibSDKFramework.DeviceGenerating] { get }
}
extension InstalibSDKFramework.DeviceCollection {
  public static func random() -> InstalibSDKFramework.Device!
}
public struct AnyDevice : InstalibSDKFramework.DeviceCollection {
  public static var all: [InstalibSDKFramework.DeviceCollection & InstalibSDKFramework.DeviceGenerating] {
    get
  }
}
@_hasMissingDesignatedInitializers open class UserStatsDao {
  @objc deinit
}
public struct Blob {
  public let bytes: [Swift.UInt8]
  public init(bytes: [Swift.UInt8])
  public init(bytes: Swift.UnsafeRawPointer, length: Swift.Int)
  public func toHex() -> Swift.String
}
extension InstalibSDKFramework.Blob : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension InstalibSDKFramework.Blob : Swift.Equatable {
}
public func == (lhs: InstalibSDKFramework.Blob, rhs: InstalibSDKFramework.Blob) -> Swift.Bool
public enum ExploreElement : InstalibSDKFramework.ParsedResponse {
  case story(InstalibSDKFramework.Tray)
  case media(InstalibSDKFramework.Media)
  case none
  public var rawResponse: InstalibSDKFramework.DynamicResponse {
    get
  }
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol PaddingProtocol {
  func add(to: Swift.Array<Swift.UInt8>, blockSize: Swift.Int) -> Swift.Array<Swift.UInt8>
  func remove(from: Swift.Array<Swift.UInt8>, blockSize: Swift.Int?) -> Swift.Array<Swift.UInt8>
}
public enum Padding : InstalibSDKFramework.PaddingProtocol {
  case noPadding, zeroPadding, pkcs7, pkcs5, iso78164
  public func add(to: Swift.Array<Swift.UInt8>, blockSize: Swift.Int) -> Swift.Array<Swift.UInt8>
  public func remove(from: Swift.Array<Swift.UInt8>, blockSize: Swift.Int?) -> Swift.Array<Swift.UInt8>
  public static func == (a: InstalibSDKFramework.Padding, b: InstalibSDKFramework.Padding) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct StoryViewerModel {
  public init()
  public var storyId: Swift.String
  public var userId: Swift.Int64
  public var ownerUserId: Swift.Int64
  public var logDate: Swift.Int64
}
public struct StoryViewerWithMetadataModel {
  public init()
  public var userMetadataModel: InstalibSDKFramework.InstaUserMetadataModel?
  public var engagedUserModel: InstalibSDKFramework.EngagedUserModel?
  public var storyViewer: InstalibSDKFramework.StoryViewerModel?
}
extension InstalibSDKFramework.Recipient {
  public enum Reference {
    case users(_: [Swift.Int])
    case thread(Swift.String)
  }
}
@available(*, renamed: "Digest")
public typealias Hash = InstalibSDKFramework.Digest
public struct Digest {
  public static func md5(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha1(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha224(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha256(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha384(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha512(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha2(_ bytes: Swift.Array<Swift.UInt8>, variant: InstalibSDKFramework.SHA2.Variant) -> Swift.Array<Swift.UInt8>
  public static func sha3(_ bytes: Swift.Array<Swift.UInt8>, variant: InstalibSDKFramework.SHA3.Variant) -> Swift.Array<Swift.UInt8>
}
final public class HMAC : InstalibSDKFramework.Authenticator {
  public enum Error : Swift.Error {
    case authenticateError
    case invalidInput
    public static func == (a: InstalibSDKFramework.HMAC.Error, b: InstalibSDKFramework.HMAC.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Variant {
    case sha1, sha256, sha384, sha512, md5
    public static func == (a: InstalibSDKFramework.HMAC.Variant, b: InstalibSDKFramework.HMAC.Variant) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(key: Swift.Array<Swift.UInt8>, variant: InstalibSDKFramework.HMAC.Variant = .md5)
  final public func authenticate(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  @objc deinit
}
public struct UserTagModel {
  public init()
  public var mediaId: Swift.String?
  public var userId: Swift.Int64?
  public var ownerUserId: Swift.Int64?
  public var type: Swift.String?
  public var thumbnailUrl: Swift.String?
  public var shortcode: Swift.String?
  public var likeCount: Swift.Int?
  public var commentCount: Swift.Int?
  public var viewCount: Swift.Int?
  public var lastUpdateDate: Swift.Int64
  public var takenAt: Swift.Int64?
  public var isDeleted: Swift.Bool
}
public struct UserTagWithMetadataModel {
  public init()
  public var userMetadataModel: InstalibSDKFramework.InstaUserMetadataModel?
  public var engagedUserModel: InstalibSDKFramework.EngagedUserModel?
  public var userTagModel: InstalibSDKFramework.UserTagModel?
}
public enum MediaType : Swift.String {
  case image
  case video
  case carousel
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class MediaHandler : InstalibSDKFramework.Handler {
  final public func by(user: InstalibSDKFramework.User.Reference, with paginationParameters: InstalibSDKFramework.PaginationParameters, updateHandler: InstalibSDKFramework.PaginationUpdateHandler<InstalibSDKFramework.Media, InstalibSDKFramework.AnyPaginatedResponse>?, completionHandler: @escaping InstalibSDKFramework.PaginationCompletionHandler<InstalibSDKFramework.Media>)
  final public func info(for mediaId: Swift.String, completionHandler: @escaping (Swift.Result<InstalibSDKFramework.Media?, Swift.Error>) -> Swift.Void)
  final public func like(media mediaId: Swift.String, completionHandler: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  final public func unlike(media mediaId: Swift.String, completionHandler: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  final public func upload(photo: InstalibSDKFramework.Upload.Picture, completionHandler: @escaping (Swift.Result<InstalibSDKFramework.Upload.Response.Picture, Swift.Error>) -> Swift.Void)
  final public func upload(album: InstalibSDKFramework.Upload.Album, completionHandler: @escaping (Swift.Result<InstalibSDKFramework.Upload.Response.Album, Swift.Error>) -> Swift.Void)
  final public func upload(video: InstalibSDKFramework.Upload.Video, completionHandler: @escaping (Swift.Result<InstalibSDKFramework.Upload.Response.Video, Swift.Error>) -> Swift.Void)
  final public func delete(media mediaId: Swift.String, with type: InstalibSDKFramework.MediaType, completionHandler: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  final public func edit(media mediaId: Swift.String, caption: Swift.String, tags: InstalibSDKFramework.User.Tags, completionHandler: @escaping (Swift.Result<InstalibSDKFramework.Media, Swift.Error>) -> Swift.Void)
  final public func likers(ofMedia mediaId: Swift.String, with paginationParameters: InstalibSDKFramework.PaginationParameters, updateHandler: InstalibSDKFramework.PaginationUpdateHandler<InstalibSDKFramework.User, InstalibSDKFramework.AnyPaginatedResponse>?, completionHandler: @escaping InstalibSDKFramework.PaginationCompletionHandler<InstalibSDKFramework.User>)
  final public func permalink(ofMedia mediaId: Swift.String, completionHandler: @escaping (Swift.Result<Swift.String, Swift.Error>) -> Swift.Void)
  @objc deinit
}
extension InstalibSDKFramework.Blowfish {
  convenience public init(key: Swift.String, iv: Swift.String, padding: InstalibSDKFramework.Padding = .pkcs7) throws
}
public struct Endpoint {
}
extension InstalibSDKFramework.QueryType {
  public func insert(_ encodable: Swift.Encodable, userInfo: [Swift.CodingUserInfoKey : Any] = [:], otherSetters: [InstalibSDKFramework.Setter] = []) throws -> InstalibSDKFramework.Insert
  public func update(_ encodable: Swift.Encodable, userInfo: [Swift.CodingUserInfoKey : Any] = [:], otherSetters: [InstalibSDKFramework.Setter] = []) throws -> InstalibSDKFramework.Update
}
extension InstalibSDKFramework.Row {
  public func decode<V>(userInfo: [Swift.CodingUserInfoKey : Any] = [:]) throws -> V where V : Swift.Decodable
  public func decoder(userInfo: [Swift.CodingUserInfoKey : Any] = [:]) -> Swift.Decoder
}
public protocol SwiftyKey : AnyObject {
  var reference: Security.SecKey { get }
  var originalData: Foundation.Data? { get }
  init(data: Foundation.Data) throws
  init(reference: Security.SecKey) throws
  init(base64Encoded base64String: Swift.String) throws
  init(pemEncoded pemString: Swift.String) throws
  init(pemNamed pemName: Swift.String, in bundle: Foundation.Bundle) throws
  init(derNamed derName: Swift.String, in bundle: Foundation.Bundle) throws
  func pemString() throws -> Swift.String
  func data() throws -> Foundation.Data
  func base64String() throws -> Swift.String
}
extension InstalibSDKFramework.SwiftyKey {
  public func base64String() throws -> Swift.String
  public func data() throws -> Foundation.Data
  public init(base64Encoded base64String: Swift.String) throws
  public init(pemEncoded pemString: Swift.String) throws
  public init(pemNamed pemName: Swift.String, in bundle: Foundation.Bundle = Bundle.main) throws
  public init(derNamed derName: Swift.String, in bundle: Foundation.Bundle = Bundle.main) throws
}
public enum QueryError : Swift.Error, Swift.CustomStringConvertible {
  case noSuchTable(name: Swift.String)
  case noSuchColumn(name: Swift.String, columns: [Swift.String])
  case ambiguousColumn(name: Swift.String, similar: [Swift.String])
  case unexpectedNullValue(name: Swift.String)
  public var description: Swift.String {
    get
  }
}
public struct Comment : InstalibSDKFramework.IdentifiableParsedResponse, InstalibSDKFramework.UserIdentifiableParsedResponse {
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public let rawResponse: InstalibSDKFramework.DynamicResponse
  public var text: Swift.String {
    get
  }
  public var likes: Swift.Int {
    get
  }
  public var user: InstalibSDKFramework.User? {
    get
  }
  public var createdAt: Swift.Int64 {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct MediaComments {
  public var rawResponse: InstalibSDKFramework.DynamicResponse
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public var caption: InstalibSDKFramework.Comment? {
    get
  }
  public var comments: Swift.Int {
    get
  }
  public var previews: [InstalibSDKFramework.Comment] {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum HTC : InstalibSDKFramework.DeviceCollection, InstalibSDKFramework.DeviceGenerating, Swift.CaseIterable {
  case ten
  public static var all: [InstalibSDKFramework.DeviceCollection & InstalibSDKFramework.DeviceGenerating] {
    get
  }
  public func generate() -> InstalibSDKFramework.Device
  public static func == (a: InstalibSDKFramework.HTC, b: InstalibSDKFramework.HTC) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [InstalibSDKFramework.HTC]
  public static var allCases: [InstalibSDKFramework.HTC] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public enum LG : Swift.CaseIterable, InstalibSDKFramework.DeviceCollection, InstalibSDKFramework.DeviceGenerating {
  case optimusF6
  case optimusG
  public static var all: [InstalibSDKFramework.DeviceCollection & InstalibSDKFramework.DeviceGenerating] {
    get
  }
  public func generate() -> InstalibSDKFramework.Device
  public static func == (a: InstalibSDKFramework.LG, b: InstalibSDKFramework.LG) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [InstalibSDKFramework.LG]
  public static var allCases: [InstalibSDKFramework.LG] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public enum Samsung : Swift.CaseIterable, InstalibSDKFramework.DeviceCollection, InstalibSDKFramework.DeviceGenerating {
  case galaxyNote3
  case galaxyS5
  case galaxyS6
  case galaxyTab
  public static var all: [InstalibSDKFramework.DeviceCollection & InstalibSDKFramework.DeviceGenerating] {
    get
  }
  public func generate() -> InstalibSDKFramework.Device
  public static func == (a: InstalibSDKFramework.Samsung, b: InstalibSDKFramework.Samsung) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [InstalibSDKFramework.Samsung]
  public static var allCases: [InstalibSDKFramework.Samsung] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public enum Sony : Swift.CaseIterable, InstalibSDKFramework.DeviceCollection, InstalibSDKFramework.DeviceGenerating {
  case xperiaZ5
  case z3Compact
  public static var all: [InstalibSDKFramework.DeviceCollection & InstalibSDKFramework.DeviceGenerating] {
    get
  }
  public func generate() -> InstalibSDKFramework.Device
  public static func == (a: InstalibSDKFramework.Sony, b: InstalibSDKFramework.Sony) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [InstalibSDKFramework.Sony]
  public static var allCases: [InstalibSDKFramework.Sony] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.Error {
  public var requiresInstagramCode: Swift.Bool {
    get
  }
}
public enum AuthenticationError : Foundation.LocalizedError {
  case invalidPassword
  case invalidUsername
  case invalidCode
  case codeSent
  case invalidCache
  case checkpoint(suggestions: [Swift.String]?)
  case checkpointLoop
  case twoFactor
  public var errorDescription: Swift.String? {
    get
  }
}
public enum GenericError : Foundation.LocalizedError {
  case invalidEndpoint(Swift.String)
  case invalidUrl
  case weakObjectReleased
  case custom(_: Swift.String)
  case unknown
  public var errorDescription: Swift.String? {
    get
  }
}
final public class Scrypt {
  public init(password: Swift.Array<Swift.UInt8>, salt: Swift.Array<Swift.UInt8>, dkLen: Swift.Int, N: Swift.Int, r: Swift.Int, p: Swift.Int) throws
  final public func calculate() throws -> [Swift.UInt8]
  @objc deinit
}
public struct EngagedUserBookmarkedModel {
  public init()
  public var uid: Swift.Int
  public var userId: Swift.Int64?
  public var ownerUserId: Swift.Int64?
}
public struct EngagedUserBookmarkedWithMetadataModel {
  public init()
  public var userMetadataModel: InstalibSDKFramework.InstaUserMetadataModel?
  public var engagedUserModel: InstalibSDKFramework.EngagedUserModel?
  public var engagedUserBookmarkedModel: InstalibSDKFramework.EngagedUserBookmarkedModel?
}
public enum Bit : Swift.Int {
  case zero
  case one
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension InstalibSDKFramework.Bit {
  @inlinable internal func inverted() -> InstalibSDKFramework.Bit {
    self == .zero ? .one : .zero
  }
}
public enum SwiftyRSAError : Swift.Error {
  case pemDoesNotContainKey
  case keyRepresentationFailed(error: CoreFoundation.CFError?)
  case keyGenerationFailed(error: CoreFoundation.CFError?)
  case keyCreateFailed(error: CoreFoundation.CFError?)
  case keyAddFailed(status: Darwin.OSStatus)
  case keyCopyFailed(status: Darwin.OSStatus)
  case tagEncodingFailed
  case asn1ParsingFailed
  case invalidAsn1RootNode
  case invalidAsn1Structure
  case invalidBase64String
  case chunkDecryptFailed(index: Swift.Int)
  case chunkEncryptFailed(index: Swift.Int)
  case stringToDataConversionFailed
  case dataToStringConversionFailed
  case invalidDigestSize(digestSize: Swift.Int, maxChunkSize: Swift.Int)
  case signatureCreateFailed(status: Darwin.OSStatus)
  case signatureVerifyFailed(status: Darwin.OSStatus)
  case pemFileNotFound(name: Swift.String)
  case derFileNotFound(name: Swift.String)
  case notAPublicKey
  case notAPrivateKey
}
public struct User : InstalibSDKFramework.IdentifiableParsedResponse {
  public enum Reference : Swift.Hashable {
    case primaryKey(Swift.Int)
    case username(Swift.String)
    case me
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: InstalibSDKFramework.User.Reference, b: InstalibSDKFramework.User.Reference) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public let rawResponse: InstalibSDKFramework.DynamicResponse
  public var username: Swift.String {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var biography: Swift.String? {
    get
  }
  public var thumbnail: Foundation.URL? {
    get
  }
  public var avatar: Foundation.URL? {
    get
  }
  public var isPrivate: Swift.Bool {
    get
  }
  public var isVerified: Swift.Bool {
    get
  }
  public var friendship: InstalibSDKFramework.Friendship? {
    get
  }
  public var phoneNumber: Swift.String? {
    get
  }
  public var email: Swift.String? {
    get
  }
  public var website: Foundation.URL? {
    get
  }
  public var byline: Swift.String? {
    get
  }
  public var isBusiness: Swift.Bool? {
    get
  }
  public var followerCount: Swift.Int? {
    get
  }
  public var followingCount: Swift.Int? {
    get
  }
  public var mediaCount: Swift.Int? {
    get
  }
  public var profileContext: Swift.String? {
    get
  }
  public var socialContext: Swift.String? {
    get
  }
  public var reference: InstalibSDKFramework.User.Reference {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Friendship : InstalibSDKFramework.ParsedResponse {
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public let rawResponse: InstalibSDKFramework.DynamicResponse
  public var isFollowedByYou: Swift.Bool {
    get
  }
  public var isFollowingYou: Swift.Bool? {
    get
  }
  public var isBlockedByYou: Swift.Bool? {
    get
  }
  public var isInYourCloseFriendsList: Swift.Bool {
    get
  }
  public var isPrivate: Swift.Bool {
    get
  }
  public var isRestricted: Swift.Bool {
    get
  }
  public var requestedToFollowYou: Swift.Bool {
    get
  }
  public var followRequestSent: Swift.Bool {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SuggestedUser : InstalibSDKFramework.IdentifiableParsedResponse {
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public let rawResponse: InstalibSDKFramework.DynamicResponse
  public var user: InstalibSDKFramework.User? {
    get
  }
  public var algorithm: Swift.String? {
    get
  }
  public var isNewSuggestion: Swift.Bool {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct BlockedUser : InstalibSDKFramework.ParsedResponse {
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public let rawResponse: InstalibSDKFramework.DynamicResponse
  public var user: InstalibSDKFramework.User? {
    get
  }
  public var userId: Swift.Int64 {
    get
  }
  public var blockAt: Foundation.Date {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct AnonymousUserInfoModel : InstalibSDKFramework.IdentifiableParsedResponse {
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public let rawResponse: InstalibSDKFramework.DynamicResponse
  public var username: Swift.String {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var biography: Swift.String? {
    get
  }
  public var thumbnail: Foundation.URL? {
    get
  }
  public var avatar: Foundation.URL? {
    get
  }
  public var isPrivate: Swift.Bool {
    get
  }
  public var isVerified: Swift.Bool {
    get
  }
  public var isBusiness: Swift.Bool? {
    get
  }
  public var followerCount: Swift.Int? {
    get
  }
  public var followingCount: Swift.Int? {
    get
  }
  public var mediaCount: Swift.Int? {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct WebSuggestedUsers : InstalibSDKFramework.ParsedResponse {
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public var user: InstalibSDKFramework.User? {
    get
  }
  public let rawResponse: InstalibSDKFramework.DynamicResponse
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SuggestedUsersResponseModel : InstalibSDKFramework.ParsedResponse {
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public let rawResponse: InstalibSDKFramework.DynamicResponse
  public var users: [InstalibSDKFramework.WebSuggestedUsers] {
    get
  }
  public var hasNextPage: Swift.Bool {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct FollowRequestItemModel : InstalibSDKFramework.ParsedResponse {
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public let rawResponse: InstalibSDKFramework.DynamicResponse
  public var text: Swift.String? {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct FollowRequestsResponseModel : InstalibSDKFramework.ParsedResponse {
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public let rawResponse: InstalibSDKFramework.DynamicResponse
  public var pageName: Swift.String? {
    get
  }
  public var isBlocked: Swift.Bool {
    get
  }
  public var link: Swift.String? {
    get
  }
  public var cursor: Swift.String? {
    get
  }
  public var requests: [InstalibSDKFramework.FollowRequestItemModel] {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension InstalibSDKFramework.PKCS5 {
  public struct PBKDF2 {
    public enum Error : Swift.Error {
      case invalidInput
      case derivedKeyTooLong
      public static func == (a: InstalibSDKFramework.PKCS5.PBKDF2.Error, b: InstalibSDKFramework.PKCS5.PBKDF2.Error) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public init(password: Swift.Array<Swift.UInt8>, salt: Swift.Array<Swift.UInt8>, iterations: Swift.Int = 4096, keyLength: Swift.Int? = nil, variant: InstalibSDKFramework.HMAC.Variant = .sha256) throws
    public func calculate() throws -> Swift.Array<Swift.UInt8>
  }
}
public protocol _UInt8Type {
}
extension Swift.UInt8 : InstalibSDKFramework._UInt8Type {
}
extension Swift.UInt8 {
  public func bits() -> [InstalibSDKFramework.Bit]
  public func bits() -> Swift.String
}
public struct AppUserModel {
  public init()
  public var uid: Swift.Int
  public var userId: Swift.Int64?
  public var userName: Swift.String?
  public var email: Swift.String?
  public var fullName: Swift.String?
  public var profilePictureUrl: Swift.String?
  public var isDefault: Swift.Bool
  public var cookie: Swift.String?
  public var isDataInit: Swift.Bool
  public var isMediaDataInit: Swift.Bool
  public var createdAt: Swift.Int64?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CommentHandler : InstalibSDKFramework.Handler {
  final public func all(forMedia mediaId: Swift.String, with paginationParameters: InstalibSDKFramework.PaginationParameters, updateHandler: InstalibSDKFramework.PaginationUpdateHandler<InstalibSDKFramework.Comment, InstalibSDKFramework.MediaComments>?, completionHandler: @escaping InstalibSDKFramework.PaginationCompletionHandler<InstalibSDKFramework.Comment>)
  final public func add(_ comment: Swift.String, to mediaId: Swift.String, completionHandler: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  final public func delete(comment commentId: Swift.String, in mediaId: Swift.String, completionHandler: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  final public func report(comment commentId: Swift.String, in mediaId: Swift.String, completionHandler: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  @objc deinit
}
final public class SHA1 {
  @usableFromInline
  internal static let digestLength: Swift.Int
  @usableFromInline
  internal static let blockSize: Swift.Int
  @usableFromInline
  internal static let hashInitialValue: Swift.ContiguousArray<Swift.UInt32>
  @usableFromInline
  final internal var accumulated: [Swift.UInt8]
  @usableFromInline
  final internal var processedBytesTotalCount: Swift.Int
  @usableFromInline
  final internal var accumulatedHash: Swift.ContiguousArray<Swift.UInt32>
  public init()
  @inlinable final public func calculate(for bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8> {
    do {
      return try update(withBytes: bytes.slice, isLast: true)
    } catch {
      return []
    }
  }
  @usableFromInline
  final internal func process(block chunk: Swift.ArraySlice<Swift.UInt8>, currentHash hh: inout Swift.ContiguousArray<Swift.UInt32>)
  @objc deinit
}
extension InstalibSDKFramework.SHA1 : InstalibSDKFramework.Updatable {
  @discardableResult
  @inlinable final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8> {
    self.accumulated += bytes

    if isLast {
      let lengthInBits = (processedBytesTotalCount + self.accumulated.count) * 8
      let lengthBytes = lengthInBits.bytes(totalBytes: 64 / 8) // A 64-bit representation of b

      // Step 1. Append padding
      bitPadding(to: &self.accumulated, blockSize: SHA1.blockSize, allowance: 64 / 8)

      // Step 2. Append Length a 64-bit representation of lengthInBits
      self.accumulated += lengthBytes
    }

    var processedBytes = 0
    for chunk in self.accumulated.batched(by: SHA1.blockSize) {
      if isLast || (self.accumulated.count - processedBytes) >= SHA1.blockSize {
        self.process(block: chunk, currentHash: &self.accumulatedHash)
        processedBytes += chunk.count
      }
    }
    self.accumulated.removeFirst(processedBytes)
    self.processedBytesTotalCount += processedBytes

    // output current hash
    var result = Array<UInt8>(repeating: 0, count: SHA1.digestLength)
    var pos = 0
    for idx in 0..<self.accumulatedHash.count {
      let h = self.accumulatedHash[idx]
      result[pos + 0] = UInt8((h >> 24) & 0xff)
      result[pos + 1] = UInt8((h >> 16) & 0xff)
      result[pos + 2] = UInt8((h >> 8) & 0xff)
      result[pos + 3] = UInt8(h & 0xff)
      pos += 4
    }

    // reset hash value for instance
    if isLast {
      self.accumulatedHash = SHA1.hashInitialValue
    }

    return result
  }
}
final public class OCB : InstalibSDKFramework.BlockMode {
  public enum Mode {
    case combined
    case detached
    public static func == (a: InstalibSDKFramework.OCB.Mode, b: InstalibSDKFramework.OCB.Mode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let options: InstalibSDKFramework.BlockModeOption
  public enum Error : Swift.Error {
    case invalidNonce
    case fail
    public static func == (a: InstalibSDKFramework.OCB.Error, b: InstalibSDKFramework.OCB.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let customBlockSize: Swift.Int?
  final public var authenticationTag: Swift.Array<Swift.UInt8>?
  public init(nonce N: Swift.Array<Swift.UInt8>, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil, tagLength: Swift.Int = 16, mode: InstalibSDKFramework.OCB.Mode = .detached)
  @inlinable convenience public init(nonce N: Swift.Array<Swift.UInt8>, authenticationTag: Swift.Array<Swift.UInt8>, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil, mode: InstalibSDKFramework.OCB.Mode = .detached) {
    self.init(nonce: N, additionalAuthenticatedData: additionalAuthenticatedData, tagLength: authenticationTag.count, mode: mode)
    self.authenticationTag = authenticationTag
  }
  final public func worker(blockSize: Swift.Int, cipherOperation: @escaping InstalibSDKFramework.CipherOperationOnBlock, encryptionOperation: @escaping InstalibSDKFramework.CipherOperationOnBlock) throws -> InstalibSDKFramework.CipherModeWorker
  @objc deinit
}
@_specialize(exported: false, kind: full, where T == Swift.Int)
@_specialize(exported: false, kind: full, where T == Swift.UInt)
@_specialize(exported: false, kind: full, where T == Swift.UInt8)
@_specialize(exported: false, kind: full, where T == Swift.UInt16)
@_specialize(exported: false, kind: full, where T == Swift.UInt32)
@_specialize(exported: false, kind: full, where T == Swift.UInt64)
@inlinable internal func arrayOfBytes<T>(value: T, length totalBytes: Swift.Int = MemoryLayout<T>.size) -> Swift.Array<Swift.UInt8> where T : Swift.FixedWidthInteger {
  let valuePointer = UnsafeMutablePointer<T>.allocate(capacity: 1)
  valuePointer.pointee = value

  let bytesPointer = UnsafeMutablePointer<UInt8>(OpaquePointer(valuePointer))
  var bytes = Array<UInt8>(repeating: 0, count: totalBytes)
  for j in 0..<min(MemoryLayout<T>.size, totalBytes) {
    bytes[totalBytes - 1 - j] = (bytesPointer + j).pointee
  }

  valuePointer.deinitialize(count: 1)
  valuePointer.deallocate()

  return bytes
}
extension Swift.UInt64 {
  @_specialize(exported: false, kind: full, where T == Swift.ArraySlice<Swift.UInt8>)
  @inlinable internal init<T>(bytes: T, fromIndex index: T.Index) where T : Swift.Collection, T.Element == Swift.UInt8, T.Index == Swift.Int {
    if bytes.isEmpty {
      self = 0
      return
    }

    let count = bytes.count

    let val0 = count > 0 ? UInt64(bytes[index.advanced(by: 0)]) << 56 : 0
    let val1 = count > 1 ? UInt64(bytes[index.advanced(by: 1)]) << 48 : 0
    let val2 = count > 2 ? UInt64(bytes[index.advanced(by: 2)]) << 40 : 0
    let val3 = count > 3 ? UInt64(bytes[index.advanced(by: 3)]) << 32 : 0
    let val4 = count > 4 ? UInt64(bytes[index.advanced(by: 4)]) << 24 : 0
    let val5 = count > 5 ? UInt64(bytes[index.advanced(by: 5)]) << 16 : 0
    let val6 = count > 6 ? UInt64(bytes[index.advanced(by: 6)]) << 8 : 0
    let val7 = count > 7 ? UInt64(bytes[index.advanced(by: 7)]) : 0

    self = val0 | val1 | val2 | val3 | val4 | val5 | val6 | val7
  }
}
@objc(PublicKey) public class _objc_PublicKey : ObjectiveC.NSObject, InstalibSDKFramework.SwiftyKey {
  @objc public var reference: Security.SecKey {
    @objc get
  }
  @objc public var originalData: Foundation.Data? {
    @objc get
  }
  @objc public func pemString() throws -> Swift.String
  @objc public func data() throws -> Foundation.Data
  @objc public func base64String() throws -> Swift.String
  required public init(swiftValue: InstalibSDKFramework.PublicKey)
  @objc required public init(data: Foundation.Data) throws
  @objc required public init(reference: Security.SecKey) throws
  @objc required public init(base64Encoded base64String: Swift.String) throws
  @objc required public init(pemEncoded pemString: Swift.String) throws
  @objc required public init(pemNamed pemName: Swift.String, in bundle: Foundation.Bundle) throws
  @objc required public init(derNamed derName: Swift.String, in bundle: Foundation.Bundle) throws
  @objc public static func publicKeys(pemEncoded pemString: Swift.String) -> [InstalibSDKFramework._objc_PublicKey]
  @objc deinit
}
@objc(PrivateKey) public class _objc_PrivateKey : ObjectiveC.NSObject, InstalibSDKFramework.SwiftyKey {
  @objc public var reference: Security.SecKey {
    @objc get
  }
  @objc public var originalData: Foundation.Data? {
    @objc get
  }
  @objc public func pemString() throws -> Swift.String
  @objc public func data() throws -> Foundation.Data
  @objc public func base64String() throws -> Swift.String
  required public init(swiftValue: InstalibSDKFramework.PrivateKey)
  @objc required public init(data: Foundation.Data) throws
  @objc required public init(reference: Security.SecKey) throws
  @objc required public init(base64Encoded base64String: Swift.String) throws
  @objc required public init(pemEncoded pemString: Swift.String) throws
  @objc required public init(pemNamed pemName: Swift.String, in bundle: Foundation.Bundle) throws
  @objc required public init(derNamed derName: Swift.String, in bundle: Foundation.Bundle) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(VerificationResult) public class _objc_VerificationResult : ObjectiveC.NSObject {
  @objc final public let isSuccessful: Swift.Bool
  @objc deinit
}
@objc(ClearMessage) public class _objc_ClearMessage : ObjectiveC.NSObject, InstalibSDKFramework.SwiftyRSAMessage {
  @objc public var base64String: Swift.String {
    @objc get
  }
  @objc public var data: Foundation.Data {
    @objc get
  }
  required public init(swiftValue: InstalibSDKFramework.ClearMessage)
  @objc required public init(data: Foundation.Data)
  @objc required public init(string: Swift.String, using rawEncoding: Swift.UInt) throws
  @objc required public init(base64Encoded base64String: Swift.String) throws
  @objc public func string(encoding rawEncoding: Swift.UInt) throws -> Swift.String
  @objc public func encrypted(with key: InstalibSDKFramework._objc_PublicKey, padding: InstalibSDKFramework.SwiftyRSAPadding) throws -> InstalibSDKFramework._objc_EncryptedMessage
  @objc public func signed(with key: InstalibSDKFramework._objc_PrivateKey, digestType: InstalibSDKFramework._objc_Signature.DigestType) throws -> InstalibSDKFramework._objc_Signature
  @objc public func verify(with key: InstalibSDKFramework._objc_PublicKey, signature: InstalibSDKFramework._objc_Signature, digestType: InstalibSDKFramework._objc_Signature.DigestType) throws -> InstalibSDKFramework._objc_VerificationResult
  @objc deinit
}
@objc(EncryptedMessage) public class _objc_EncryptedMessage : ObjectiveC.NSObject, InstalibSDKFramework.SwiftyRSAMessage {
  @objc public var base64String: Swift.String {
    @objc get
  }
  @objc public var data: Foundation.Data {
    @objc get
  }
  required public init(swiftValue: InstalibSDKFramework.EncryptedMessage)
  @objc required public init(data: Foundation.Data)
  @objc required public init(base64Encoded base64String: Swift.String) throws
  @objc public func decrypted(with key: InstalibSDKFramework._objc_PrivateKey, padding: InstalibSDKFramework.SwiftyRSAPadding) throws -> InstalibSDKFramework._objc_ClearMessage
  @objc deinit
}
@objc(Signature) public class _objc_Signature : ObjectiveC.NSObject {
  @objc public enum DigestType : Swift.Int {
    case sha1
    case sha224
    case sha256
    case sha384
    case sha512
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var base64String: Swift.String {
    @objc get
  }
  @objc public var data: Foundation.Data {
    @objc get
  }
  required public init(swiftValue: InstalibSDKFramework.Signature)
  @objc public init(data: Foundation.Data)
  @objc required public init(base64Encoded base64String: Swift.String) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers open class SwKeyStore {
  public enum SecError : Darwin.OSStatus, Swift.Error {
    case unimplemented
    case param
    case allocate
    case notAvailable
    case authFailed
    case duplicateItem
    case itemNotFound
    case interactionNotAllowed
    case decode
    case missingEntitlement
    public static var debugLevel: Swift.Int
    public init?(rawValue: Darwin.OSStatus)
    public typealias RawValue = Darwin.OSStatus
    public var rawValue: Darwin.OSStatus {
      get
    }
  }
  public static func upsertKey(_ pemKey: Swift.String, keyTag: Swift.String, options: [Foundation.NSString : Swift.AnyObject] = [:]) throws
  public static func getKey(_ keyTag: Swift.String) throws -> Swift.String
  public static func delKey(_ keyTag: Swift.String) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers open class SwKeyConvert {
  public enum SwError : Swift.Error {
    case invalidKey
    case badPassphrase
    case keyNotEncrypted
    public static var debugLevel: Swift.Int
    public static func == (a: InstalibSDKFramework.SwKeyConvert.SwError, b: InstalibSDKFramework.SwKeyConvert.SwError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_hasMissingDesignatedInitializers open class PrivateKey {
    public static func pemToPKCS1DER(_ pemKey: Swift.String) throws -> Foundation.Data
    public static func derToPKCS1PEM(_ derKey: Foundation.Data) -> Swift.String
    public typealias EncMode = InstalibSDKFramework.PEM.EncryptedPrivateKey.EncMode
    public static func encryptPEM(_ pemKey: Swift.String, passphrase: Swift.String, mode: InstalibSDKFramework.SwKeyConvert.PrivateKey.EncMode) throws -> Swift.String
    public static func decryptPEM(_ pemKey: Swift.String, passphrase: Swift.String) throws -> Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class PublicKey {
    public static func pemToPKCS1DER(_ pemKey: Swift.String) throws -> Foundation.Data
    public static func pemToPKCS8DER(_ pemKey: Swift.String) throws -> Foundation.Data
    public static func derToPKCS1PEM(_ derKey: Foundation.Data) -> Swift.String
    public static func derToPKCS8PEM(_ derKey: Foundation.Data) -> Swift.String
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class PKCS8 {
  @_hasMissingDesignatedInitializers open class PrivateKey {
    public static func getPKCS1DEROffset(_ derKey: Foundation.Data) -> Swift.Int?
    public static func stripHeaderIfAny(_ derKey: Foundation.Data) -> Foundation.Data?
    public static func hasCorrectHeader(_ derKey: Foundation.Data) -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class PublicKey {
    public static func addHeader(_ derKey: Foundation.Data) -> Foundation.Data
    public static func getPKCS1DEROffset(_ derKey: Foundation.Data) -> Swift.Int?
    public static func stripHeaderIfAny(_ derKey: Foundation.Data) -> Foundation.Data?
    public static func hasCorrectHeader(_ derKey: Foundation.Data) -> Swift.Bool
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class PEM {
  public enum SwError : Swift.Error {
    case parse(Swift.String)
    case badPassphrase
    case keyNotEncrypted
    public static var debugLevel: Swift.Int
  }
  @_hasMissingDesignatedInitializers open class PrivateKey {
    public static func toDER(_ pemKey: Swift.String) throws -> Foundation.Data
    public static func toPEM(_ derKey: Foundation.Data) -> Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class PublicKey {
    public static func toDER(_ pemKey: Swift.String) throws -> Foundation.Data
    public static func toPEM(_ derKey: Foundation.Data) -> Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class EncryptedPrivateKey {
    public enum EncMode {
      case aes128CBC, aes256CBC
      public static func == (a: InstalibSDKFramework.PEM.EncryptedPrivateKey.EncMode, b: InstalibSDKFramework.PEM.EncryptedPrivateKey.EncMode) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public static func toDER(_ pemKey: Swift.String, passphrase: Swift.String) throws -> Foundation.Data
    public static func toPEM(_ derKey: Foundation.Data, passphrase: Swift.String, mode: InstalibSDKFramework.PEM.EncryptedPrivateKey.EncMode) -> Swift.String
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class CC {
  public typealias CCCryptorStatus = Swift.Int32
  public enum CCError : InstalibSDKFramework.CC.CCCryptorStatus, Swift.Error {
    case paramError
    case bufferTooSmall
    case memoryFailure
    case alignmentError
    case decodeError
    case unimplemented
    case overflow
    case rngFailure
    case unspecifiedError
    case callSequenceError
    case keySizeError
    case invalidKey
    public static var debugLevel: Swift.Int
    public init?(rawValue: InstalibSDKFramework.CC.CCCryptorStatus)
    public typealias RawValue = InstalibSDKFramework.CC.CCCryptorStatus
    public var rawValue: InstalibSDKFramework.CC.CCCryptorStatus {
      get
    }
  }
  public static func generateRandom(_ size: Swift.Int) -> Foundation.Data
  public typealias CCDigestAlgorithm = Swift.UInt32
  public enum DigestAlgorithm : InstalibSDKFramework.CC.CCDigestAlgorithm {
    case none
    case md5
    case rmd128, rmd160, rmd256, rmd320
    case sha1
    case sha224, sha256, sha384, sha512
    public init?(rawValue: InstalibSDKFramework.CC.CCDigestAlgorithm)
    public typealias RawValue = InstalibSDKFramework.CC.CCDigestAlgorithm
    public var rawValue: InstalibSDKFramework.CC.CCDigestAlgorithm {
      get
    }
  }
  public static func digest(_ data: Foundation.Data, alg: InstalibSDKFramework.CC.DigestAlgorithm) -> Foundation.Data
  public typealias CCHmacAlgorithm = Swift.UInt32
  public enum HMACAlg : InstalibSDKFramework.CC.CCHmacAlgorithm {
    case sha1, md5, sha256, sha384, sha512, sha224
    public init?(rawValue: InstalibSDKFramework.CC.CCHmacAlgorithm)
    public typealias RawValue = InstalibSDKFramework.CC.CCHmacAlgorithm
    public var rawValue: InstalibSDKFramework.CC.CCHmacAlgorithm {
      get
    }
  }
  public static func HMAC(_ data: Foundation.Data, alg: InstalibSDKFramework.CC.HMACAlg, key: Foundation.Data) -> Foundation.Data
  public typealias CCOperation = Swift.UInt32
  public enum OpMode : InstalibSDKFramework.CC.CCOperation {
    case encrypt, decrypt
    public init?(rawValue: InstalibSDKFramework.CC.CCOperation)
    public typealias RawValue = InstalibSDKFramework.CC.CCOperation
    public var rawValue: InstalibSDKFramework.CC.CCOperation {
      get
    }
  }
  public typealias CCMode = Swift.UInt32
  public enum BlockMode : InstalibSDKFramework.CC.CCMode {
    case ecb, cbc, cfb, ctr, f8, lrw, ofb, xts, rc4, cfb8
    public init?(rawValue: InstalibSDKFramework.CC.CCMode)
    public typealias RawValue = InstalibSDKFramework.CC.CCMode
    public var rawValue: InstalibSDKFramework.CC.CCMode {
      get
    }
  }
  public enum AuthBlockMode : InstalibSDKFramework.CC.CCMode {
    case gcm, ccm
    public init?(rawValue: InstalibSDKFramework.CC.CCMode)
    public typealias RawValue = InstalibSDKFramework.CC.CCMode
    public var rawValue: InstalibSDKFramework.CC.CCMode {
      get
    }
  }
  public typealias CCAlgorithm = Swift.UInt32
  public enum Algorithm : InstalibSDKFramework.CC.CCAlgorithm {
    case aes, des, threeDES, cast, rc4, rc2, blowfish
    public init?(rawValue: InstalibSDKFramework.CC.CCAlgorithm)
    public typealias RawValue = InstalibSDKFramework.CC.CCAlgorithm
    public var rawValue: InstalibSDKFramework.CC.CCAlgorithm {
      get
    }
  }
  public typealias CCPadding = Swift.UInt32
  public enum Padding : InstalibSDKFramework.CC.CCPadding {
    case noPadding, pkcs7Padding
    public init?(rawValue: InstalibSDKFramework.CC.CCPadding)
    public typealias RawValue = InstalibSDKFramework.CC.CCPadding
    public var rawValue: InstalibSDKFramework.CC.CCPadding {
      get
    }
  }
  public static func crypt(_ opMode: InstalibSDKFramework.CC.OpMode, blockMode: InstalibSDKFramework.CC.BlockMode, algorithm: InstalibSDKFramework.CC.Algorithm, padding: InstalibSDKFramework.CC.Padding, data: Foundation.Data, key: Foundation.Data, iv: Foundation.Data) throws -> Foundation.Data
  public static func cryptAuth(_ opMode: InstalibSDKFramework.CC.OpMode, blockMode: InstalibSDKFramework.CC.AuthBlockMode, algorithm: InstalibSDKFramework.CC.Algorithm, data: Foundation.Data, aData: Foundation.Data, key: Foundation.Data, iv: Foundation.Data, tagLength: Swift.Int) throws -> Foundation.Data
  public static func digestAvailable() -> Swift.Bool
  public static func randomAvailable() -> Swift.Bool
  public static func hmacAvailable() -> Swift.Bool
  public static func cryptorAvailable() -> Swift.Bool
  public static func available() -> Swift.Bool
  @_hasMissingDesignatedInitializers open class GCM {
    public static func crypt(_ opMode: InstalibSDKFramework.CC.OpMode, algorithm: InstalibSDKFramework.CC.Algorithm, data: Foundation.Data, key: Foundation.Data, iv: Foundation.Data, aData: Foundation.Data, tagLength: Swift.Int) throws -> (Foundation.Data, Foundation.Data)
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class CCM {
    public static func crypt(_ opMode: InstalibSDKFramework.CC.OpMode, algorithm: InstalibSDKFramework.CC.Algorithm, data: Foundation.Data, key: Foundation.Data, iv: Foundation.Data, aData: Foundation.Data, tagLength: Swift.Int) throws -> (Foundation.Data, Foundation.Data)
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class RSA {
    public typealias CCAsymmetricPadding = Swift.UInt32
    public enum AsymmetricPadding : InstalibSDKFramework.CC.RSA.CCAsymmetricPadding {
      case pkcs1
      case oaep
      public init?(rawValue: InstalibSDKFramework.CC.RSA.CCAsymmetricPadding)
      public typealias RawValue = InstalibSDKFramework.CC.RSA.CCAsymmetricPadding
      public var rawValue: InstalibSDKFramework.CC.RSA.CCAsymmetricPadding {
        get
      }
    }
    public enum AsymmetricSAPadding : Swift.UInt32 {
      case pkcs15
      case pss
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func generateKeyPair(_ keySize: Swift.Int = 4096) throws -> (Foundation.Data, Foundation.Data)
    public static func getPublicKeyFromPrivateKey(_ derKey: Foundation.Data) throws -> Foundation.Data
    public static func encrypt(_ data: Foundation.Data, derKey: Foundation.Data, tag: Foundation.Data, padding: InstalibSDKFramework.CC.RSA.AsymmetricPadding, digest: InstalibSDKFramework.CC.DigestAlgorithm) throws -> Foundation.Data
    public static func decrypt(_ data: Foundation.Data, derKey: Foundation.Data, tag: Foundation.Data, padding: InstalibSDKFramework.CC.RSA.AsymmetricPadding, digest: InstalibSDKFramework.CC.DigestAlgorithm) throws -> (Foundation.Data, Swift.Int)
    public static func sign(_ message: Foundation.Data, derKey: Foundation.Data, padding: InstalibSDKFramework.CC.RSA.AsymmetricSAPadding, digest: InstalibSDKFramework.CC.DigestAlgorithm, saltLen: Swift.Int) throws -> Foundation.Data
    public static func verify(_ message: Foundation.Data, derKey: Foundation.Data, padding: InstalibSDKFramework.CC.RSA.AsymmetricSAPadding, digest: InstalibSDKFramework.CC.DigestAlgorithm, saltLen: Swift.Int, signedData: Foundation.Data) throws -> Swift.Bool
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class DH {
    public enum DHParam {
      case rfc3526Group5
      case rfc2409Group2
      public static func == (a: InstalibSDKFramework.CC.DH.DHParam, b: InstalibSDKFramework.CC.DH.DHParam) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    open class DH {
      public init(dhParam: InstalibSDKFramework.CC.DH.DHParam) throws
      open func generateKey() throws -> Foundation.Data
      open func computeKey(_ peerKey: Foundation.Data) throws -> Foundation.Data
      @objc deinit
    }
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class EC {
    public static func generateKeyPair(_ keySize: Swift.Int) throws -> (Foundation.Data, Foundation.Data)
    public static func getPublicKeyFromPrivateKey(_ privateKey: Foundation.Data) throws -> Foundation.Data
    public static func signHash(_ privateKey: Foundation.Data, hash: Foundation.Data) throws -> Foundation.Data
    public static func verifyHash(_ publicKey: Foundation.Data, hash: Foundation.Data, signedData: Foundation.Data) throws -> Swift.Bool
    public static func computeSharedSecret(_ privateKey: Foundation.Data, publicKey: Foundation.Data) throws -> Foundation.Data
    public struct KeyComponents {
      public init(_ keySize: Swift.Int, _ x: Foundation.Data, _ y: Foundation.Data, _ d: Foundation.Data)
      public var keySize: Swift.Int
      public var x: Foundation.Data
      public var y: Foundation.Data
      public var d: Foundation.Data
    }
    public static func getPublicKeyComponents(_ keyData: Foundation.Data) throws -> InstalibSDKFramework.CC.EC.KeyComponents
    public static func getPrivateKeyComponents(_ keyData: Foundation.Data) throws -> InstalibSDKFramework.CC.EC.KeyComponents
    public static func createFromData(_ keySize: Darwin.size_t, _ x: Foundation.Data, _ y: Foundation.Data) throws -> Foundation.Data
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class CRC {
    public typealias CNcrc = Swift.UInt32
    public enum Mode : InstalibSDKFramework.CC.CRC.CNcrc {
      case crc8, crc8ICODE, crc8ITU, crc8ROHC, crc8WCDMA, crc16, crc16CCITTTrue, crc16CCITTFalse, crc16USB, crc16XMODEM, crc16DECTR, crc16DECTX, crc16ICODE, crc16VERIFONE, crc16A, crc16B, crc16Fletcher, crc32Adler, crc32, crc32CASTAGNOLI, crc32BZIP2, crc32MPEG2, crc32POSIX, crc32XFER, crc64ECMA182
      public init?(rawValue: InstalibSDKFramework.CC.CRC.CNcrc)
      public typealias RawValue = InstalibSDKFramework.CC.CRC.CNcrc
      public var rawValue: InstalibSDKFramework.CC.CRC.CNcrc {
        get
      }
    }
    public static func crc(_ input: Foundation.Data, mode: InstalibSDKFramework.CC.CRC.Mode) throws -> Swift.UInt64
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class CMAC {
    public static func AESCMAC(_ data: Foundation.Data, key: Foundation.Data) -> Foundation.Data
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class KeyDerivation {
    public typealias CCPseudoRandomAlgorithm = Swift.UInt32
    public enum PRFAlg : InstalibSDKFramework.CC.KeyDerivation.CCPseudoRandomAlgorithm {
      case sha1, sha224, sha256, sha384, sha512
      public init?(rawValue: InstalibSDKFramework.CC.KeyDerivation.CCPseudoRandomAlgorithm)
      public typealias RawValue = InstalibSDKFramework.CC.KeyDerivation.CCPseudoRandomAlgorithm
      public var rawValue: InstalibSDKFramework.CC.KeyDerivation.CCPseudoRandomAlgorithm {
        get
      }
    }
    public static func PBKDF2(_ password: Swift.String, salt: Foundation.Data, prf: InstalibSDKFramework.CC.KeyDerivation.PRFAlg, rounds: Swift.UInt32) throws -> Foundation.Data
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class KeyWrap {
    public static let rfc3394IV: Foundation.Data
    public static func SymmetricKeyWrap(_ iv: Foundation.Data, kek: Foundation.Data, rawKey: Foundation.Data) throws -> Foundation.Data
    public static func SymmetricKeyUnwrap(_ iv: Foundation.Data, kek: Foundation.Data, wrappedKey: Foundation.Data) throws -> Foundation.Data
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @objc deinit
}
extension Foundation.Data {
  public func hexadecimalString() -> Swift.String
  public func arrayOfBytes() -> [Swift.UInt8]
}
extension Swift.String {
  public func dataFromHexadecimalString() -> Foundation.Data?
}
@_hasMissingDesignatedInitializers final public class AEADChaCha20Poly1305 : InstalibSDKFramework.AEAD {
  public static let kLen: Swift.Int
  public static var ivRange: Swift.Range<Swift.Int>
  public static func encrypt(_ plainText: Swift.Array<Swift.UInt8>, key: Swift.Array<Swift.UInt8>, iv: Swift.Array<Swift.UInt8>, authenticationHeader: Swift.Array<Swift.UInt8>) throws -> (cipherText: Swift.Array<Swift.UInt8>, authenticationTag: Swift.Array<Swift.UInt8>)
  public static func decrypt(_ cipherText: Swift.Array<Swift.UInt8>, key: Swift.Array<Swift.UInt8>, iv: Swift.Array<Swift.UInt8>, authenticationHeader: Swift.Array<Swift.UInt8>, authenticationTag: Swift.Array<Swift.UInt8>) throws -> (plainText: Swift.Array<Swift.UInt8>, success: Swift.Bool)
  @objc deinit
}
final public class Checksum {
  @usableFromInline
  internal static let table32: [Swift.UInt32]
  @usableFromInline
  internal static let table32c: [Swift.UInt32]
  @usableFromInline
  internal static let table16: [Swift.UInt16]
  @usableFromInline
  internal init()
  @inlinable final internal func crc32(_ message: Swift.Array<Swift.UInt8>, seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32 {
    var crc: UInt32 = seed != nil ? seed! : 0xFFFF_FFFF
    for chunk in message.batched(by: 256) {
      for b in chunk {
        let idx = Int((crc ^ UInt32(reflect ? b : reversed(b))) & 0xFF)
        crc = (crc >> 8) ^ Checksum.table32[idx]
      }
    }
    return (reflect ? crc : reversed(crc)) ^ 0xFFFF_FFFF
  }
  @inlinable final internal func crc32c(_ message: Swift.Array<Swift.UInt8>, seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32 {
    var crc: UInt32 = seed != nil ? seed! : 0xFFFF_FFFF
    for chunk in message.batched(by: 256) {
      for b in chunk {
        let idx = Int((crc ^ UInt32(reflect ? b : reversed(b))) & 0xFF)
        crc = (crc >> 8) ^ Checksum.table32c[idx]
      }
    }
    return (reflect ? crc : reversed(crc)) ^ 0xFFFF_FFFF
  }
  @inlinable final internal func crc16(_ message: Swift.Array<Swift.UInt8>, seed: Swift.UInt16? = nil) -> Swift.UInt16 {
    var crc: UInt16 = seed != nil ? seed! : 0x0000
    for chunk in message.batched(by: 256) {
      for b in chunk {
        crc = (crc >> 8) ^ Checksum.table16[Int((crc ^ UInt16(b)) & 0xFF)]
      }
    }
    return crc
  }
  @objc deinit
}
extension InstalibSDKFramework.Checksum {
  @inlinable public static func crc32(_ message: Swift.Array<Swift.UInt8>, seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32 {
    Checksum().crc32(message, seed: seed, reflect: reflect)
  }
  @inlinable public static func crc32c(_ message: Swift.Array<Swift.UInt8>, seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32 {
    Checksum().crc32c(message, seed: seed, reflect: reflect)
  }
  @inlinable public static func crc16(_ message: Swift.Array<Swift.UInt8>, seed: Swift.UInt16? = nil) -> Swift.UInt16 {
    Checksum().crc16(message, seed: seed)
  }
}
public enum Collation {
  case binary
  case nocase
  case rtrim
  case custom(Swift.String)
}
extension InstalibSDKFramework.Collation : InstalibSDKFramework.Expressible {
  public var expression: InstalibSDKFramework.Expression<Swift.Void> {
    get
  }
}
extension InstalibSDKFramework.Collation : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class UserHandler : InstalibSDKFramework.Handler {
  final public func current(delay: Swift.ClosedRange<Swift.Double>?, completionHandler: @escaping (Swift.Result<InstalibSDKFramework.User, Swift.Error>) -> Swift.Void)
  final public func search(forUsersMatching query: Swift.String, completionHandler: @escaping (Swift.Result<[InstalibSDKFramework.User], Swift.Error>) -> Swift.Void)
  final public func user(_ user: InstalibSDKFramework.User.Reference, completionHandler: @escaping (Swift.Result<InstalibSDKFramework.User, Swift.Error>) -> Swift.Void)
  final public func tagged(user: InstalibSDKFramework.User.Reference, with paginationParameters: InstalibSDKFramework.PaginationParameters, updateHandler: InstalibSDKFramework.PaginationUpdateHandler<InstalibSDKFramework.Media, InstalibSDKFramework.AnyPaginatedResponse>?, completionHandler: @escaping InstalibSDKFramework.PaginationCompletionHandler<InstalibSDKFramework.Media>)
  final public func following(user: InstalibSDKFramework.User.Reference, usersMatchinQuery query: Swift.String? = nil, with paginationParameters: InstalibSDKFramework.PaginationParameters, updateHandler: InstalibSDKFramework.PaginationUpdateHandler<InstalibSDKFramework.User, InstalibSDKFramework.AnyPaginatedResponse>?, completionHandler: @escaping InstalibSDKFramework.PaginationCompletionHandler<InstalibSDKFramework.User>)
  final public func followed(byUser user: InstalibSDKFramework.User.Reference, usersMatchinQuery query: Swift.String? = nil, with paginationParameters: InstalibSDKFramework.PaginationParameters, updateHandler: InstalibSDKFramework.PaginationUpdateHandler<InstalibSDKFramework.User, InstalibSDKFramework.AnyPaginatedResponse>?, completionHandler: @escaping InstalibSDKFramework.PaginationCompletionHandler<InstalibSDKFramework.User>)
  final public func recentActivities(with paginationParameters: InstalibSDKFramework.PaginationParameters, updateHandler: InstalibSDKFramework.PaginationUpdateHandler<InstalibSDKFramework.SuggestedUser, InstalibSDKFramework.RecentActivity>?, completionHandler: @escaping InstalibSDKFramework.PaginationCompletionHandler<InstalibSDKFramework.SuggestedUser>)
  @available(*, unavailable, message: "Instagram no longer supports this endpoint.")
  final public func recentFollowingActivities(with paginationParameters: InstalibSDKFramework.PaginationParameters, updateHandler: InstalibSDKFramework.PaginationUpdateHandler<InstalibSDKFramework.RecentActivity.Story, InstalibSDKFramework.AnyPaginatedResponse>?, completionHandler: @escaping InstalibSDKFramework.PaginationCompletionHandler<InstalibSDKFramework.RecentActivity.Story>)
  final public func remove(follower user: InstalibSDKFramework.User.Reference, completionHandler: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  final public func approveRequest(from user: InstalibSDKFramework.User.Reference, completionHandler: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  final public func rejectRequest(from user: InstalibSDKFramework.User.Reference, completionHandler: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  final public func pendingRequests(with paginationParameters: InstalibSDKFramework.PaginationParameters, updateHandler: InstalibSDKFramework.PaginationUpdateHandler<InstalibSDKFramework.User, InstalibSDKFramework.AnyPaginatedResponse>?, completionHandler: @escaping InstalibSDKFramework.PaginationCompletionHandler<InstalibSDKFramework.User>)
  final public func follow(user: InstalibSDKFramework.User.Reference, completionHandler: @escaping (Swift.Result<InstalibSDKFramework.Friendship, Swift.Error>) -> Swift.Void)
  final public func unfollow(user: InstalibSDKFramework.User.Reference, completionHandler: @escaping (Swift.Result<InstalibSDKFramework.Friendship, Swift.Error>) -> Swift.Void)
  final public func friendshipStatus(withUser user: InstalibSDKFramework.User.Reference, completionHandler: @escaping (Swift.Result<InstalibSDKFramework.Friendship, Swift.Error>) -> Swift.Void)
  final public func friendshipStatuses<C>(withUsersMatchingIDs ids: C, completionHandler: @escaping (Swift.Result<[InstalibSDKFramework.User.Reference : InstalibSDKFramework.Friendship], Swift.Error>) -> Swift.Void) where C : Swift.Collection, C.Element == Swift.Int
  final public func blocked(with paginationParameters: InstalibSDKFramework.PaginationParameters, updateHandler: InstalibSDKFramework.PaginationUpdateHandler<InstalibSDKFramework.BlockedUser, InstalibSDKFramework.AnyPaginatedResponse>?, completionHandler: @escaping InstalibSDKFramework.PaginationCompletionHandler<InstalibSDKFramework.BlockedUser>)
  final public func block(user: InstalibSDKFramework.User.Reference, completionHandler: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  final public func unblock(user: InstalibSDKFramework.User.Reference, completionHandler: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  final public func report(user: InstalibSDKFramework.User.Reference, completionHandler: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  final public func besties(with paginationParameters: InstalibSDKFramework.PaginationParameters, updateHandler: InstalibSDKFramework.PaginationUpdateHandler<InstalibSDKFramework.User, InstalibSDKFramework.AnyPaginatedResponse>?, completionHandler: @escaping InstalibSDKFramework.PaginationCompletionHandler<InstalibSDKFramework.User>)
  final public func detail(username: Swift.String, completionHandler: @escaping (Swift.Result<InstalibSDKFramework.AnonymousUserInfoModel, Swift.Error>) -> Swift.Void)
  final public func getMostPostedUserInYourFeed(completionHandler: @escaping (Swift.Result<[InstalibSDKFramework.User], Swift.Error>) -> Swift.Void)
  final public func getUserSuggestions(userId: Swift.Int, completionHandler: @escaping (Swift.Result<InstalibSDKFramework.SuggestedUsersResponseModel, Swift.Error>) -> Swift.Void)
  final public func requestedFollows(cursor: Swift.String?, completionHandler: @escaping (Swift.Result<InstalibSDKFramework.FollowRequestsResponseModel, Swift.Error>) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NotificationDao {
  @objc deinit
}
public enum PKCS7 {
}
public class BlockDecryptor : InstalibSDKFramework.Cryptor, InstalibSDKFramework.Updatable {
  @usableFromInline
  final internal let blockSize: Swift.Int
  @usableFromInline
  final internal let padding: InstalibSDKFramework.Padding
  @usableFromInline
  internal var worker: InstalibSDKFramework.CipherModeWorker
  @usableFromInline
  internal var accumulated: [Swift.UInt8]
  @usableFromInline
  internal init(blockSize: Swift.Int, padding: InstalibSDKFramework.Padding, _ worker: InstalibSDKFramework.CipherModeWorker) throws
  @inlinable public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8> {
    self.accumulated += bytes

    // If a worker (eg GCM) can combine ciphertext + tag
    // we need to remove tag from the ciphertext.
    if !isLast && self.accumulated.count < self.blockSize + self.worker.additionalBufferSize {
      return []
    }

    let accumulatedWithoutSuffix: Array<UInt8>
    if self.worker.additionalBufferSize > 0 {
      // FIXME: how slow is that?
      accumulatedWithoutSuffix = Array(self.accumulated.prefix(self.accumulated.count - self.worker.additionalBufferSize))
    } else {
      accumulatedWithoutSuffix = self.accumulated
    }

    var processedBytesCount = 0
    var plaintext = Array<UInt8>(reserveCapacity: accumulatedWithoutSuffix.count)
    // Processing in a block-size manner. It's good for block modes, but bad for stream modes.
    for var chunk in accumulatedWithoutSuffix.batched(by: self.blockSize) {
      if isLast || (accumulatedWithoutSuffix.count - processedBytesCount) >= blockSize {
        let isLastChunk = processedBytesCount + chunk.count == accumulatedWithoutSuffix.count

        if isLast, isLastChunk, var finalizingWorker = worker as? FinalizingDecryptModeWorker {
          chunk = try finalizingWorker.willDecryptLast(bytes: chunk + accumulated.suffix(worker.additionalBufferSize)) // tag size
        }

        if !chunk.isEmpty {
          plaintext += worker.decrypt(block: chunk)
        }

        if isLast, isLastChunk, var finalizingWorker = worker as? FinalizingDecryptModeWorker {
          plaintext = Array(try finalizingWorker.didDecryptLast(bytes: plaintext.slice))
        }

        processedBytesCount += chunk.count
      }
    }
    accumulated.removeFirst(processedBytesCount) // super-slow

    if isLast {
      if accumulatedWithoutSuffix.isEmpty, var finalizingWorker = worker as? FinalizingDecryptModeWorker {
        try finalizingWorker.willDecryptLast(bytes: self.accumulated.suffix(self.worker.additionalBufferSize))
        plaintext = Array(try finalizingWorker.didDecryptLast(bytes: plaintext.slice))
      }
      plaintext = self.padding.remove(from: plaintext, blockSize: self.blockSize)
    }

    return plaintext
  }
  public func seek(to position: Swift.Int) throws
  @objc deinit
}
public struct ECB : InstalibSDKFramework.BlockMode {
  public let options: InstalibSDKFramework.BlockModeOption
  public let customBlockSize: Swift.Int?
  public init()
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping InstalibSDKFramework.CipherOperationOnBlock, encryptionOperation: @escaping InstalibSDKFramework.CipherOperationOnBlock) throws -> InstalibSDKFramework.CipherModeWorker
}
extension Swift.UInt32 {
  @_specialize(exported: false, kind: full, where T == Swift.ArraySlice<Swift.UInt8>)
  @inlinable internal init<T>(bytes: T, fromIndex index: T.Index) where T : Swift.Collection, T.Element == Swift.UInt8, T.Index == Swift.Int {
    if bytes.isEmpty {
      self = 0
      return
    }

    let count = bytes.count

    let val0 = count > 0 ? UInt32(bytes[index.advanced(by: 0)]) << 24 : 0
    let val1 = count > 1 ? UInt32(bytes[index.advanced(by: 1)]) << 16 : 0
    let val2 = count > 2 ? UInt32(bytes[index.advanced(by: 2)]) << 8 : 0
    let val3 = count > 3 ? UInt32(bytes[index.advanced(by: 3)]) : 0

    self = val0 | val1 | val2 | val3
  }
}
public struct Tray : InstalibSDKFramework.IdentifiableParsedResponse {
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public let rawResponse: InstalibSDKFramework.DynamicResponse
  public var items: [InstalibSDKFramework.TrayElement] {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct TrayArchive : InstalibSDKFramework.IdentifiableParsedResponse {
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public let rawResponse: InstalibSDKFramework.DynamicResponse
  public var count: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct TrayElement : InstalibSDKFramework.IdentifiableParsedResponse {
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public let rawResponse: InstalibSDKFramework.DynamicResponse
  public var title: Swift.String? {
    get
  }
  public var updatedAt: Foundation.Date {
    get
  }
  public var expiringAt: Foundation.Date {
    get
  }
  public var lastSeenOn: Foundation.Date {
    get
  }
  public var containsUnseenMedia: Swift.Bool {
    get
  }
  public var containsBestiesOnlyMedia: Swift.Bool {
    get
  }
  public var isMuted: Swift.Bool {
    get
  }
  public var cover: InstalibSDKFramework.Cover? {
    get
  }
  public var media: [InstalibSDKFramework.Media] {
    get
  }
  public var user: InstalibSDKFramework.User? {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct StoryViewers {
  public var rawResponse: InstalibSDKFramework.DynamicResponse
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public var users: Swift.Int {
    get
  }
  public var viewers: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct UserCounterModel {
  public init()
  public var userId: Swift.Int64
  public var count: Swift.Int
}
public struct UserStatsModel {
  public init()
  public var userId: Swift.Int64
  public var dateId: Swift.Int64
  public var followers: Swift.Int?
  public var followings: Swift.Int?
  public var lostFollowers: Swift.Int
  public var gainedFollowers: Swift.Int
  public var blockingMeFollowers: Swift.Int
  public var blockedByMeFollowers: Swift.Int
  public var totalPosts: Swift.Int?
  public var totalVideos: Swift.Int?
  public var totalPhotos: Swift.Int?
  public var totalComments: Swift.Int?
  public var totalLikes: Swift.Int?
  public var totalStories: Swift.Int?
  public var recentInteractionsCount: Swift.Int?
  public var recentSuggestionsCount: Swift.Int?
  public var deletedTagsCount: Swift.Int?
  public var deletedCommentsCount: Swift.Int?
  public var deletedLikesCount: Swift.Int?
  public var logDate: Swift.Int64
  public var weekMonthYear: Swift.String?
}
@objc @_hasMissingDesignatedInitializers @available(iOS 12, *)
@_Concurrency.MainActor(unsafe) public class LoginWebViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) final public let handler: InstalibSDKFramework.APIHandler
  @_Concurrency.MainActor(unsafe) public var completionHandler: (InstalibSDKFramework.LoginWebViewController, Swift.Result<(InstalibSDKFramework.Authentication.Response, InstalibSDKFramework.APIHandler), Swift.Error>) -> Swift.Void
  @_Concurrency.MainActor(unsafe) public var dissmisHandler: () -> Swift.Void
  @_Concurrency.MainActor(unsafe) public var indicator: UIKit.UIActivityIndicatorView! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var webView: InstalibSDKFramework.LoginWebView! {
    get
    set
  }
  @available(*, unavailable, message: "using a custom `userAgent` is no longer supported")
  @_Concurrency.MainActor(unsafe) public init(userAgent: Swift.String?, completionHandler: @escaping (InstalibSDKFramework.LoginWebViewController, Swift.Result<(InstalibSDKFramework.Authentication.Response, InstalibSDKFramework.APIHandler), Swift.Error>) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public init(completionHandler: @escaping (InstalibSDKFramework.LoginWebViewController, Swift.Result<(InstalibSDKFramework.Authentication.Response, InstalibSDKFramework.APIHandler), Swift.Error>) -> Swift.Void, dissmisHandler: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
extension InstalibSDKFramework.ExpressionType where Self.UnderlyingType : InstalibSDKFramework.Value {
  public var distinct: InstalibSDKFramework.Expression<Self.UnderlyingType> {
    get
  }
  public var count: InstalibSDKFramework.Expression<Swift.Int> {
    get
  }
}
extension InstalibSDKFramework.ExpressionType where Self.UnderlyingType : InstalibSDKFramework._OptionalType, Self.UnderlyingType.WrappedType : InstalibSDKFramework.Value {
  public var distinct: InstalibSDKFramework.Expression<Self.UnderlyingType> {
    get
  }
  public var count: InstalibSDKFramework.Expression<Swift.Int> {
    get
  }
}
extension InstalibSDKFramework.ExpressionType where Self.UnderlyingType : InstalibSDKFramework.Value, Self.UnderlyingType.Datatype : Swift.Comparable {
  public var max: InstalibSDKFramework.Expression<Self.UnderlyingType?> {
    get
  }
  public var min: InstalibSDKFramework.Expression<Self.UnderlyingType?> {
    get
  }
}
extension InstalibSDKFramework.ExpressionType where Self.UnderlyingType : InstalibSDKFramework._OptionalType, Self.UnderlyingType.WrappedType : InstalibSDKFramework.Value, Self.UnderlyingType.WrappedType.Datatype : Swift.Comparable {
  public var max: InstalibSDKFramework.Expression<Self.UnderlyingType> {
    get
  }
  public var min: InstalibSDKFramework.Expression<Self.UnderlyingType> {
    get
  }
}
extension InstalibSDKFramework.ExpressionType where Self.UnderlyingType : InstalibSDKFramework.Value, Self.UnderlyingType.Datatype : InstalibSDKFramework.Number {
  public var average: InstalibSDKFramework.Expression<Swift.Double?> {
    get
  }
  public var sum: InstalibSDKFramework.Expression<Self.UnderlyingType?> {
    get
  }
  public var total: InstalibSDKFramework.Expression<Swift.Double> {
    get
  }
}
extension InstalibSDKFramework.ExpressionType where Self.UnderlyingType : InstalibSDKFramework._OptionalType, Self.UnderlyingType.WrappedType : InstalibSDKFramework.Value, Self.UnderlyingType.WrappedType.Datatype : InstalibSDKFramework.Number {
  public var average: InstalibSDKFramework.Expression<Swift.Double?> {
    get
  }
  public var sum: InstalibSDKFramework.Expression<Self.UnderlyingType> {
    get
  }
  public var total: InstalibSDKFramework.Expression<Swift.Double> {
    get
  }
}
public func count(_ star: (InstalibSDKFramework.Expression<InstalibSDKFramework.SQLiteBinding>?, InstalibSDKFramework.Expression<InstalibSDKFramework.SQLiteBinding>?) -> InstalibSDKFramework.Expression<Swift.Void>) -> InstalibSDKFramework.Expression<Swift.Int>
public protocol IDBRepository {
  func updateUserStatsBatch(userId: Swift.Int64)
  func processUserMediaPopularDaysAndHours(userId: Swift.Int64)
  func getBestPostDays(userId: Swift.Int64) -> [InstalibSDKFramework.BestTimeForPostModel]
  func getBestPostHours(userId: Swift.Int64) -> [InstalibSDKFramework.BestTimeForPostModel]
  func getBestPostDaysHours(userId: Swift.Int64) -> [InstalibSDKFramework.BestTimeForPostModel]
  func getCloseFriends(userId: Swift.Int64) -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func updateAppUser(appUser: InstalibSDKFramework.AppUserModel)
  func getDashboardStats() -> InstalibSDKFramework.UserDashboardDetailView?
  func getTop5PopuplarMedias() -> [InstalibSDKFramework.MediaModel]
  func getMostEngagedTop5UsersWithMetadata() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func getUserDetails(userId: Swift.Int64) -> InstalibSDKFramework.EngagedUserWithMetadataModel?
  func updatefollowingStateDb(engagedUser: InstalibSDKFramework.EngagedUserModel)
  func getFollowings() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func getFollowers() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func getFollowersByAsc() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func getMostEngagedUsers() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func getMostCommentUsers() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func getMostLikeUsers() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func getLeastEngagedUsers() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func getLeastCommentUsers() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func getLeastLikeUsers() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func getUserStatsLimit(limit: Swift.Int) -> [InstalibSDKFramework.UserStatsModel]
  func getUserStats() -> [InstalibSDKFramework.UserStatsModel]
  func getUserStatByDate() -> [InstalibSDKFramework.UserStatsModel]
  func getLostUsers() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func getGainedUsers() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func getBlockMeUsers() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func getClosedAccounts() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func getFollowingsNotFollowYou() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func getFollowersYouFollow() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func getFollowersYouNotFollow() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func getLikeOrCommentButNoFollowUsers() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func getNoLikeOrCommentUsers() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func getNoLikeOrCommentFollowers() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func getYouMostLikedUsers() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func getYouLikedButNoFollowUsers() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func getTagYouUsers() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func getUserActiveStories() -> [InstalibSDKFramework.StoryDbModel]
  func getArchivedStories() -> [InstalibSDKFramework.StoryDbModel]
  func getStoryViewers(storyId: Swift.String) -> [InstalibSDKFramework.StoryViewerWithMetadataModel]
  func getNotFolloweLeastViewedCount() -> [InstalibSDKFramework.UserStoryViewCountModel]
  func getNotFollowMeViewedStory() -> [InstalibSDKFramework.UserStoryViewCountModel]
  func getFollowerMostViewedCount() -> [InstalibSDKFramework.UserStoryViewCountModel]
  func getFollowerLeastViewedCount() -> [InstalibSDKFramework.UserStoryViewCountModel]
  func getLeastViewedStories() -> [InstalibSDKFramework.StoryDbModel]
  func getMostViewedStories() -> [InstalibSDKFramework.StoryDbModel]
  func storiesUpdateAllDefaultToFalse()
  func insertStories(models: [InstalibSDKFramework.StoryDbModel])
  func getStoryById(id: Swift.String) -> InstalibSDKFramework.StoryDbModel?
  func updateStory(model: InstalibSDKFramework.StoryDbModel)
  func getDefaultAppUser() -> InstalibSDKFramework.AppUserModel?
  func deleteByUserId(uid: Swift.Int)
  func getAllUsers() -> [InstalibSDKFramework.AppUserModel]
  func updateUsers(models: [InstalibSDKFramework.AppUserModel])
  func updateAllDefaultToFalse()
  func insertAppUser(model: InstalibSDKFramework.AppUserModel) -> Swift.Int64
  func getEngagedUser(userId: Swift.Int64) -> InstalibSDKFramework.EngagedUserModel?
  func updateEngagedUser(model: InstalibSDKFramework.EngagedUserModel)
  func insertUser(model: InstalibSDKFramework.InstaUserMetadataModel) -> Swift.Int64
  func insertUserEngagement(model: InstalibSDKFramework.EngagedUserModel) -> Swift.Int64
  func getYourBesties() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func insertUserStats(model: InstalibSDKFramework.UserStatsModel)
  func getMostLikedMedias() -> [InstalibSDKFramework.MediaModel]
  func getMostCommentedMedias() -> [InstalibSDKFramework.MediaModel]
  func getMostPopularMedias() -> [InstalibSDKFramework.MediaModel]
  func getMostViewedMedias() -> [InstalibSDKFramework.MediaModel]
  func getLeastLikedMedias() -> [InstalibSDKFramework.MediaModel]
  func getLeastCommentedMedias() -> [InstalibSDKFramework.MediaModel]
  func getLeastPopularMedias() -> [InstalibSDKFramework.MediaModel]
  func getLeastViewedMedias() -> [InstalibSDKFramework.MediaModel]
  func getUsersDeleteComment() -> [InstalibSDKFramework.MediaDeletedUserModel]
  func getUsersDeleteLike() -> [InstalibSDKFramework.MediaDeletedUserModel]
  func getUsersDeleteLikeOrComment() -> [InstalibSDKFramework.MediaDeletedUserModel]
  func getMediaUploadPerMonth() -> [InstalibSDKFramework.StatisticsCounterModel]
  func getCommentPerMonth() -> [InstalibSDKFramework.StatisticsCounterModel]
  func getLikePerMonth() -> [InstalibSDKFramework.StatisticsCounterModel]
  func getMediaUploadPerWeek() -> [InstalibSDKFramework.StatisticsCounterModel]
  func getCommentPerWeek() -> [InstalibSDKFramework.StatisticsCounterModel]
  func getLikePerWeek() -> [InstalibSDKFramework.StatisticsCounterModel]
  func getLostFollowerPerMonth() -> [InstalibSDKFramework.StatisticsCounterModel]
  func getBlockFollowerPerMonth() -> [InstalibSDKFramework.StatisticsCounterModel]
  func getNewFollowerPerMonth() -> [InstalibSDKFramework.StatisticsCounterModel]
  func getStoryPerMonth() -> [InstalibSDKFramework.StatisticsCounterModel]
  func getStoryViewPerMonth() -> [InstalibSDKFramework.StatisticsCounterModel]
  func getNewFollowerPerWeek() -> [InstalibSDKFramework.StatisticsCounterModel]
  func getLostFollowerPerWeek() -> [InstalibSDKFramework.StatisticsCounterModel]
  func getDbUserAllPosts() -> [InstalibSDKFramework.MediaModel]
  func getDbUserAllVideoPosts() -> [InstalibSDKFramework.MediaModel]
  func getDbUserAllPhotoPosts() -> [InstalibSDKFramework.MediaModel]
  func getDbUserAllStories() -> [InstalibSDKFramework.StoryDbModel]
  func getAllSuggestedUsers() -> [InstalibSDKFramework.SuggestedUserModel]
  func getBlockedByMeUsers() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func getUsersDeleteTag() -> [InstalibSDKFramework.UserTagWithMetadataModel]
  func getYouUnfollows() -> [InstalibSDKFramework.EngagedUserWithMetadataModel]
  func getNotifications() -> [InstalibSDKFramework.NotificationEntityModel]
  func deleteAllNotifications()
  func deleteNotification(uid: Swift.Int?)
  func deleteNotification(type: InstalibSDKFramework.NotificationTypes)
  func getStalkerCandidates() -> [InstalibSDKFramework.StalkerCandidateWithMetadataModel]
  func updateAllStalkersSeen()
  func clearUserHistory()
  func logoutUser() -> InstalibSDKFramework.AppUserModel!
  func getFavUsers() -> [InstalibSDKFramework.EngagedUserBookmarkedWithMetadataModel]
  func insertBookmarkedUser(_ model: InstalibSDKFramework.EngagedUserBookmarkedModel) -> Swift.Int64?
  func deleteBookmark(_ model: InstalibSDKFramework.EngagedUserBookmarkedModel)
  func insertFollowStateChangeLog(_ model: InstalibSDKFramework.FollowerStateChangeLogModel)
  func updateUserProfilePhoto(_ userId: Swift.Int64, _ profilePicUrl: Swift.String)
  func getStalkerCandidate(ownerUserId: Swift.Int64, userId: Swift.Int64) -> InstalibSDKFramework.StalkerCandidateEntityModel?
  func insertStalker(_ model: InstalibSDKFramework.StalkerCandidateEntityModel)
  func updateStalker(_ model: InstalibSDKFramework.StalkerCandidateEntityModel)
  func getCommentersUsers(mediaId: Swift.String?, ownerUserId: Swift.Int64?) -> [InstalibSDKFramework.MediaCommenterModel]
  func getCommenterUserByCommentId(userId: Swift.Int64?, commentId: Swift.Int64?) -> InstalibSDKFramework.MediaCommenterModel?
  func getUserMetadata(userId: Swift.Int64) -> InstalibSDKFramework.InstaUserMetadataModel?
  func updateMediaComment(_ model: InstalibSDKFramework.MediaCommenterModel)
  func updateUser(_ model: InstalibSDKFramework.InstaUserMetadataModel)
  func insertMediaComment(_ model: InstalibSDKFramework.MediaCommenterModel)
  func insertMediaLike(_ model: InstalibSDKFramework.MediaLikerModel)
  func updateMedia(_ model: InstalibSDKFramework.MediaModel)
}
public protocol PaginationProtocol {
  associatedtype Identifier : Swift.Hashable, Swift.LosslessStringConvertible
  var autoLoadMoreEnabled: Swift.Bool? { get }
  var moreAvailable: Swift.Bool? { get }
  var nextMaxId: Self.Identifier? { get }
  var numResults: Swift.Int? { get }
}
extension InstalibSDKFramework.PaginationProtocol {
  public var autoLoadMoreEnabled: Swift.Bool? {
    get
  }
  public var moreAvailable: Swift.Bool? {
    get
  }
  public var numResults: Swift.Int? {
    get
  }
}
public protocol NestedPaginationProtocol : InstalibSDKFramework.PaginationProtocol {
  static var nextMaxIdPath: Swift.KeyPath<Self, Self.Identifier?> { get }
}
extension InstalibSDKFramework.NestedPaginationProtocol {
  public var nextMaxId: Self.Identifier? {
    get
  }
}
public struct AnyPaginatedResponse {
  public var rawResponse: InstalibSDKFramework.DynamicResponse
  public init(rawResponse: InstalibSDKFramework.DynamicResponse)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public typealias PaginationUpdateHandler<R, P> = (_ update: P, _ inserting: [R], _ nextParameters: InstalibSDKFramework.PaginationParameters, _ runningResponse: [R]) -> Swift.Void
public typealias LegacyPaginationUpdateHandler<R> = (_ update: R, _ nextParameters: InstalibSDKFramework.PaginationParameters, _ runningResponse: [R]) -> Swift.Void
public typealias PaginationCompletionHandler<R> = (_ response: Swift.Result<[R], Swift.Error>, _ nextParameters: InstalibSDKFramework.PaginationParameters) -> Swift.Void
public protocol DeviceGenerating {
  func generate() -> InstalibSDKFramework.Device
}
public struct Device : Swift.Codable {
  public let brand: Swift.String
  public let id: Swift.String
  public let model: Swift.String
  public let phoneGuid: Foundation.UUID
  public let deviceGuid: Foundation.UUID
  public let googleAdId: Foundation.UUID
  public let rankToken: Foundation.UUID
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public typealias CipherOperationOnBlock = (_ block: Swift.ArraySlice<Swift.UInt8>) -> Swift.Array<Swift.UInt8>?
public protocol BlockMode {
  var options: InstalibSDKFramework.BlockModeOption { get }
  @inlinable func worker(blockSize: Swift.Int, cipherOperation: @escaping InstalibSDKFramework.CipherOperationOnBlock, encryptionOperation: @escaping InstalibSDKFramework.CipherOperationOnBlock) throws -> InstalibSDKFramework.CipherModeWorker
  var customBlockSize: Swift.Int? { get }
}
public protocol SQLiteBinding {
}
public protocol Number : InstalibSDKFramework.SQLiteBinding {
}
public protocol Value : InstalibSDKFramework.Expressible {
  associatedtype ValueType = Self
  associatedtype Datatype : InstalibSDKFramework.SQLiteBinding
  static var declaredDatatype: Swift.String { get }
  static func fromDatatypeValue(_ datatypeValue: Self.Datatype) -> Self.ValueType
  var datatypeValue: Self.Datatype { get }
}
extension Swift.Double : InstalibSDKFramework.Number, InstalibSDKFramework.Value {
  public static let declaredDatatype: Swift.String
  public static func fromDatatypeValue(_ datatypeValue: Swift.Double) -> Swift.Double
  public var datatypeValue: Swift.Double {
    get
  }
  public typealias Datatype = Swift.Double
  public typealias ValueType = Swift.Double
}
extension Swift.Int64 : InstalibSDKFramework.Number, InstalibSDKFramework.Value {
  public static let declaredDatatype: Swift.String
  public static func fromDatatypeValue(_ datatypeValue: Swift.Int64) -> Swift.Int64
  public var datatypeValue: Swift.Int64 {
    get
  }
  public typealias Datatype = Swift.Int64
  public typealias ValueType = Swift.Int64
}
extension Swift.String : InstalibSDKFramework.SQLiteBinding, InstalibSDKFramework.Value {
  public static let declaredDatatype: Swift.String
  public static func fromDatatypeValue(_ datatypeValue: Swift.String) -> Swift.String
  public var datatypeValue: Swift.String {
    get
  }
  public typealias Datatype = Swift.String
  public typealias ValueType = Swift.String
}
extension InstalibSDKFramework.Blob : InstalibSDKFramework.SQLiteBinding, InstalibSDKFramework.Value {
  public static let declaredDatatype: Swift.String
  public static func fromDatatypeValue(_ datatypeValue: InstalibSDKFramework.Blob) -> InstalibSDKFramework.Blob
  public var datatypeValue: InstalibSDKFramework.Blob {
    get
  }
  public typealias Datatype = InstalibSDKFramework.Blob
  public typealias ValueType = InstalibSDKFramework.Blob
}
extension Swift.Bool : InstalibSDKFramework.SQLiteBinding, InstalibSDKFramework.Value {
  public static var declaredDatatype: Swift.String
  public static func fromDatatypeValue(_ datatypeValue: Swift.Int64) -> Swift.Bool
  public var datatypeValue: Swift.Int64 {
    get
  }
  public typealias Datatype = Swift.Int64
  public typealias ValueType = Swift.Bool
}
extension Swift.Int : InstalibSDKFramework.Number, InstalibSDKFramework.Value {
  public static var declaredDatatype: Swift.String
  public static func fromDatatypeValue(_ datatypeValue: Swift.Int64) -> Swift.Int
  public var datatypeValue: Swift.Int64 {
    get
  }
  public typealias Datatype = Swift.Int64
  public typealias ValueType = Swift.Int
}
public struct CCM {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    case invalidParameter
    case fail
    public static func == (a: InstalibSDKFramework.CCM.Error, b: InstalibSDKFramework.CCM.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let options: InstalibSDKFramework.BlockModeOption
  public let customBlockSize: Swift.Int?
  public var authenticationTag: Swift.Array<Swift.UInt8>?
  public init(iv: Swift.Array<Swift.UInt8>, tagLength: Swift.Int, messageLength: Swift.Int, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil)
  public init(iv: Swift.Array<Swift.UInt8>, tagLength: Swift.Int, messageLength: Swift.Int, authenticationTag: Swift.Array<Swift.UInt8>, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping InstalibSDKFramework.CipherOperationOnBlock, encryptionOperation: @escaping InstalibSDKFramework.CipherOperationOnBlock) throws -> InstalibSDKFramework.CipherModeWorker
}
public struct CFB : InstalibSDKFramework.BlockMode {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    public static func == (a: InstalibSDKFramework.CFB.Error, b: InstalibSDKFramework.CFB.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum SegmentSize : Swift.Int {
    case cfb8
    case cfb128
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public let options: InstalibSDKFramework.BlockModeOption
  public let customBlockSize: Swift.Int?
  public init(iv: Swift.Array<Swift.UInt8>, segmentSize: InstalibSDKFramework.CFB.SegmentSize = .cfb128)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping InstalibSDKFramework.CipherOperationOnBlock, encryptionOperation: @escaping InstalibSDKFramework.CipherOperationOnBlock) throws -> InstalibSDKFramework.CipherModeWorker
}
public struct BestTimeForPostModel {
  public init()
  public var totalComment: Swift.Int
  public var totalLike: Swift.Int
  public var totalView: Swift.Int
  public var totalPost: Swift.Int
  public var hour: Swift.Int
  public var dayOfWeek: Swift.Int
  public var ownerUserId: Swift.Int64?
  public var groupItem: Swift.Int
}
public protocol Updatable {
  mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool) throws -> Swift.Array<Swift.UInt8>
  mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool, output: (_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Void) throws
}
extension InstalibSDKFramework.Updatable {
  @inlinable public mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false, output: (_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Void) throws {
    let processed = try update(withBytes: bytes, isLast: isLast)
    if !processed.isEmpty {
      output(processed)
    }
  }
  @inlinable public mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8> {
    try self.update(withBytes: bytes, isLast: isLast)
  }
  @inlinable public mutating func update(withBytes bytes: Swift.Array<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8> {
    try self.update(withBytes: bytes.slice, isLast: isLast)
  }
  @inlinable public mutating func update(withBytes bytes: Swift.Array<Swift.UInt8>, isLast: Swift.Bool = false, output: (_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Void) throws {
    try self.update(withBytes: bytes.slice, isLast: isLast, output: output)
  }
  @inlinable public mutating func finish(withBytes bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8> {
    try self.update(withBytes: bytes, isLast: true)
  }
  @inlinable public mutating func finish(withBytes bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8> {
    try self.finish(withBytes: bytes.slice)
  }
  @inlinable public mutating func finish() throws -> Swift.Array<Swift.UInt8> {
    try self.update(withBytes: [], isLast: true)
  }
  @inlinable public mutating func finish(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, output: (_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Void) throws {
    let processed = try update(withBytes: bytes, isLast: true)
    if !processed.isEmpty {
      output(processed)
    }
  }
  @inlinable public mutating func finish(withBytes bytes: Swift.Array<Swift.UInt8>, output: (_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Void) throws {
    try self.finish(withBytes: bytes.slice, output: output)
  }
  @inlinable public mutating func finish(output: (Swift.Array<Swift.UInt8>) -> Swift.Void) throws {
    try self.finish(withBytes: [], output: output)
  }
}
public typealias SwiftyRSAPadding = Security.SecPadding
public enum SwiftyRSA {
  @available(iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  public static func generateRSAKeyPair(sizeInBits size: Swift.Int) throws -> (privateKey: InstalibSDKFramework.PrivateKey, publicKey: InstalibSDKFramework.PublicKey)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class FeedHandler : InstalibSDKFramework.Handler {
  final public func explore(with paginationParameters: InstalibSDKFramework.PaginationParameters, updateHandler: InstalibSDKFramework.PaginationUpdateHandler<InstalibSDKFramework.ExploreElement, InstalibSDKFramework.AnyPaginatedResponse>?, completionHandler: @escaping InstalibSDKFramework.PaginationCompletionHandler<InstalibSDKFramework.ExploreElement>)
  final public func liked(with paginationParameters: InstalibSDKFramework.PaginationParameters, updateHandler: InstalibSDKFramework.PaginationUpdateHandler<InstalibSDKFramework.Media, InstalibSDKFramework.AnyPaginatedResponse>?, completionHandler: @escaping InstalibSDKFramework.PaginationCompletionHandler<InstalibSDKFramework.Media>)
  final public func tag(_ tag: Swift.String, with paginationParameters: InstalibSDKFramework.PaginationParameters, updateHandler: InstalibSDKFramework.PaginationUpdateHandler<InstalibSDKFramework.Media, InstalibSDKFramework.AnyPaginatedResponse>?, completionHandler: @escaping InstalibSDKFramework.PaginationCompletionHandler<InstalibSDKFramework.Media>)
  final public func igtv(userId: Swift.String, completionHandler: @escaping (Swift.Result<InstalibSDKFramework.IgtvResponseModel, Swift.Error>) -> Swift.Void)
  final public func timeline(with paginationParameters: InstalibSDKFramework.PaginationParameters, updateHandler: InstalibSDKFramework.PaginationUpdateHandler<InstalibSDKFramework.Media, InstalibSDKFramework.AnyPaginatedResponse>?, completionHandler: @escaping InstalibSDKFramework.PaginationCompletionHandler<InstalibSDKFramework.Media>)
  @objc deinit
}
public struct FollowerStateChangeLogModel {
  public init(ownerUserId: Swift.Int64, logUserId: Swift.Int64, type: InstalibSDKFramework.FollowerStateTypes)
  public var uid: Swift.Int
  public var ownerUserId: Swift.Int64
  public var logDate: Swift.Int64
  public var logUserId: Swift.Int64
  public var type: InstalibSDKFramework.FollowerStateTypes
}
public enum FollowerStateTypes : Swift.Int {
  public typealias RawValue = Swift.Int
  case none
  case newFollower
  case lostFollower
  case blockedFollower
  case closedAccount
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@usableFromInline
final internal class StreamEncryptor : InstalibSDKFramework.Cryptor, InstalibSDKFramework.Updatable {
  @usableFromInline
  final internal let blockSize: Swift.Int
  @usableFromInline
  final internal var worker: InstalibSDKFramework.CipherModeWorker
  @usableFromInline
  final internal let padding: InstalibSDKFramework.Padding
  @usableFromInline
  final internal var lastBlockRemainder: Swift.Int
  @usableFromInline
  internal init(blockSize: Swift.Int, padding: InstalibSDKFramework.Padding, _ worker: InstalibSDKFramework.CipherModeWorker) throws
  @inlinable final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool) throws -> Swift.Array<Swift.UInt8> {
    var accumulated = Array(bytes)
    if isLast {
      // CTR doesn't need padding. Really. Add padding to the last block if really want. but... don't.
      accumulated = self.padding.add(to: accumulated, blockSize: self.blockSize - self.lastBlockRemainder)
    }

    var encrypted = Array<UInt8>(reserveCapacity: bytes.count)
    for chunk in accumulated.batched(by: self.blockSize) {
      encrypted += self.worker.encrypt(block: chunk)
    }

    // omit unecessary calculation if not needed
    if self.padding != .noPadding {
      self.lastBlockRemainder = encrypted.count.quotientAndRemainder(dividingBy: self.blockSize).remainder
    }

    if var finalizingWorker = worker as? FinalizingEncryptModeWorker, isLast == true {
      encrypted = Array(try finalizingWorker.finalize(encrypt: encrypted.slice))
    }

    return encrypted
  }
  @usableFromInline
  final internal func seek(to: Swift.Int) throws
  @objc @usableFromInline
  deinit
}
public func + (lhs: InstalibSDKFramework.Expression<Swift.String>, rhs: InstalibSDKFramework.Expression<Swift.String>) -> InstalibSDKFramework.Expression<Swift.String>
public func + (lhs: InstalibSDKFramework.Expression<Swift.String>, rhs: InstalibSDKFramework.Expression<Swift.String?>) -> InstalibSDKFramework.Expression<Swift.String?>
public func + (lhs: InstalibSDKFramework.Expression<Swift.String?>, rhs: InstalibSDKFramework.Expression<Swift.String>) -> InstalibSDKFramework.Expression<Swift.String?>
public func + (lhs: InstalibSDKFramework.Expression<Swift.String?>, rhs: InstalibSDKFramework.Expression<Swift.String?>) -> InstalibSDKFramework.Expression<Swift.String?>
public func + (lhs: InstalibSDKFramework.Expression<Swift.String>, rhs: Swift.String) -> InstalibSDKFramework.Expression<Swift.String>
public func + (lhs: InstalibSDKFramework.Expression<Swift.String?>, rhs: Swift.String) -> InstalibSDKFramework.Expression<Swift.String?>
public func + (lhs: Swift.String, rhs: InstalibSDKFramework.Expression<Swift.String>) -> InstalibSDKFramework.Expression<Swift.String>
public func + (lhs: Swift.String, rhs: InstalibSDKFramework.Expression<Swift.String?>) -> InstalibSDKFramework.Expression<Swift.String?>
public func + <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func + <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func + <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func + <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func + <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: V) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func + <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: V) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func + <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func + <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func - <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func - <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func - <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func - <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func - <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: V) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func - <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: V) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func - <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func - <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func * <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func * <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func * <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func * <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func * <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: V) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func * <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: V) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func * <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func * <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func / <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func / <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func / <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func / <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func / <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: V) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func / <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: V) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func / <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func / <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
prefix public func - <V>(rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
prefix public func - <V>(rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func % <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func % <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func % <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func % <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func % <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: V) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func % <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: V) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func % <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func % <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func << <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func << <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func << <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func << <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func << <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: V) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func << <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: V) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func << <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func << <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func >> <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func >> <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func >> <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func >> <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func >> <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: V) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func >> <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: V) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func >> <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func >> <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func & <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func & <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func & <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func & <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func & <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: V) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func & <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: V) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func & <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func & <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func | <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func | <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func | <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func | <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func | <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: V) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func | <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: V) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func | <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func | <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func ^ <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func ^ <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func ^ <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func ^ <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func ^ <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: V) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func ^ <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: V) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func ^ <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func ^ <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
prefix public func ~ <V>(rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
prefix public func ~ <V>(rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V?> where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func == <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<Swift.Bool> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Equatable
public func == <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Equatable
public func == <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Equatable
public func == <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Equatable
public func == <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: V) -> InstalibSDKFramework.Expression<Swift.Bool> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Equatable
public func == <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: V?) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Equatable
public func == <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<Swift.Bool> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Equatable
public func == <V>(lhs: V?, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Equatable
public func != <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<Swift.Bool> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Equatable
public func != <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Equatable
public func != <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Equatable
public func != <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Equatable
public func != <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: V) -> InstalibSDKFramework.Expression<Swift.Bool> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Equatable
public func != <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: V?) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Equatable
public func != <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<Swift.Bool> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Equatable
public func != <V>(lhs: V?, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Equatable
public func > <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<Swift.Bool> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func > <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func > <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func > <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func > <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: V) -> InstalibSDKFramework.Expression<Swift.Bool> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func > <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: V) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func > <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<Swift.Bool> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func > <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func >= <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<Swift.Bool> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func >= <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func >= <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func >= <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func >= <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: V) -> InstalibSDKFramework.Expression<Swift.Bool> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func >= <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: V) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func >= <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<Swift.Bool> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func >= <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func < <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<Swift.Bool> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func < <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func < <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func < <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func < <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: V) -> InstalibSDKFramework.Expression<Swift.Bool> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func < <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: V) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func < <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<Swift.Bool> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func < <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func <= <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<Swift.Bool> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func <= <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func <= <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func <= <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func <= <V>(lhs: InstalibSDKFramework.Expression<V>, rhs: V) -> InstalibSDKFramework.Expression<Swift.Bool> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func <= <V>(lhs: InstalibSDKFramework.Expression<V?>, rhs: V) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func <= <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<Swift.Bool> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func <= <V>(lhs: V, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func ~= <V>(lhs: Swift.ClosedRange<V>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<Swift.Bool> where V : InstalibSDKFramework.Value, V : Swift.Comparable, V.Datatype : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func ~= <V>(lhs: Swift.ClosedRange<V>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V : Swift.Comparable, V.Datatype : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func ~= <V>(lhs: Swift.Range<V>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<Swift.Bool> where V : InstalibSDKFramework.Value, V : Swift.Comparable, V.Datatype : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func ~= <V>(lhs: Swift.Range<V>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V : Swift.Comparable, V.Datatype : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func ~= <V>(lhs: Swift.PartialRangeThrough<V>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<Swift.Bool> where V : InstalibSDKFramework.Value, V : Swift.Comparable, V.Datatype : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func ~= <V>(lhs: Swift.PartialRangeThrough<V>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V : Swift.Comparable, V.Datatype : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func ~= <V>(lhs: Swift.PartialRangeUpTo<V>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<Swift.Bool> where V : InstalibSDKFramework.Value, V : Swift.Comparable, V.Datatype : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func ~= <V>(lhs: Swift.PartialRangeUpTo<V>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V : Swift.Comparable, V.Datatype : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func ~= <V>(lhs: Swift.PartialRangeFrom<V>, rhs: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<Swift.Bool> where V : InstalibSDKFramework.Value, V : Swift.Comparable, V.Datatype : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func ~= <V>(lhs: Swift.PartialRangeFrom<V>, rhs: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<Swift.Bool?> where V : InstalibSDKFramework.Value, V : Swift.Comparable, V.Datatype : InstalibSDKFramework.Value, V.Datatype : Swift.Comparable
public func && (lhs: InstalibSDKFramework.Expression<Swift.Bool>, rhs: InstalibSDKFramework.Expression<Swift.Bool>) -> InstalibSDKFramework.Expression<Swift.Bool>
public func && (lhs: InstalibSDKFramework.Expression<Swift.Bool>, rhs: InstalibSDKFramework.Expression<Swift.Bool?>) -> InstalibSDKFramework.Expression<Swift.Bool?>
public func && (lhs: InstalibSDKFramework.Expression<Swift.Bool?>, rhs: InstalibSDKFramework.Expression<Swift.Bool>) -> InstalibSDKFramework.Expression<Swift.Bool?>
public func && (lhs: InstalibSDKFramework.Expression<Swift.Bool?>, rhs: InstalibSDKFramework.Expression<Swift.Bool?>) -> InstalibSDKFramework.Expression<Swift.Bool?>
public func && (lhs: InstalibSDKFramework.Expression<Swift.Bool>, rhs: Swift.Bool) -> InstalibSDKFramework.Expression<Swift.Bool>
public func && (lhs: InstalibSDKFramework.Expression<Swift.Bool?>, rhs: Swift.Bool) -> InstalibSDKFramework.Expression<Swift.Bool?>
public func && (lhs: Swift.Bool, rhs: InstalibSDKFramework.Expression<Swift.Bool>) -> InstalibSDKFramework.Expression<Swift.Bool>
public func && (lhs: Swift.Bool, rhs: InstalibSDKFramework.Expression<Swift.Bool?>) -> InstalibSDKFramework.Expression<Swift.Bool?>
public func || (lhs: InstalibSDKFramework.Expression<Swift.Bool>, rhs: InstalibSDKFramework.Expression<Swift.Bool>) -> InstalibSDKFramework.Expression<Swift.Bool>
public func || (lhs: InstalibSDKFramework.Expression<Swift.Bool>, rhs: InstalibSDKFramework.Expression<Swift.Bool?>) -> InstalibSDKFramework.Expression<Swift.Bool?>
public func || (lhs: InstalibSDKFramework.Expression<Swift.Bool?>, rhs: InstalibSDKFramework.Expression<Swift.Bool>) -> InstalibSDKFramework.Expression<Swift.Bool?>
public func || (lhs: InstalibSDKFramework.Expression<Swift.Bool?>, rhs: InstalibSDKFramework.Expression<Swift.Bool?>) -> InstalibSDKFramework.Expression<Swift.Bool?>
public func || (lhs: InstalibSDKFramework.Expression<Swift.Bool>, rhs: Swift.Bool) -> InstalibSDKFramework.Expression<Swift.Bool>
public func || (lhs: InstalibSDKFramework.Expression<Swift.Bool?>, rhs: Swift.Bool) -> InstalibSDKFramework.Expression<Swift.Bool?>
public func || (lhs: Swift.Bool, rhs: InstalibSDKFramework.Expression<Swift.Bool>) -> InstalibSDKFramework.Expression<Swift.Bool>
public func || (lhs: Swift.Bool, rhs: InstalibSDKFramework.Expression<Swift.Bool?>) -> InstalibSDKFramework.Expression<Swift.Bool?>
prefix public func ! (rhs: InstalibSDKFramework.Expression<Swift.Bool>) -> InstalibSDKFramework.Expression<Swift.Bool>
prefix public func ! (rhs: InstalibSDKFramework.Expression<Swift.Bool?>) -> InstalibSDKFramework.Expression<Swift.Bool?>
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class MessageHandler : InstalibSDKFramework.Handler {
  final public func inbox(with paginationParameters: InstalibSDKFramework.PaginationParameters, updateHandler: InstalibSDKFramework.PaginationUpdateHandler<InstalibSDKFramework.Thread, InstalibSDKFramework.AnyPaginatedResponse>?, completionHandler: @escaping InstalibSDKFramework.PaginationCompletionHandler<InstalibSDKFramework.Thread>)
  final public func send(_ text: Swift.String, to receipients: InstalibSDKFramework.Recipient.Reference, completionHandler: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  final public func `in`(thread: Swift.String, completionHandler: @escaping (Swift.Result<InstalibSDKFramework.Thread, Swift.Error>) -> Swift.Void)
  final public func recent(completionHandler: @escaping (Swift.Result<[InstalibSDKFramework.Recipient], Swift.Error>) -> Swift.Void)
  final public func ranked(completionHandler: @escaping (Swift.Result<[InstalibSDKFramework.Recipient], Swift.Error>) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Instalib {
  public static func initSdk(licenseKey: Swift.String, callback: @escaping (Swift.Bool) -> Swift.Void) throws
  public static func getRepository() throws -> InstalibSDKFramework.IRepository
  @objc deinit
}
public protocol AEAD {
  static var kLen: Swift.Int { get }
  static var ivRange: Swift.Range<Swift.Int> { get }
}
public struct CBC : InstalibSDKFramework.BlockMode {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    public static func == (a: InstalibSDKFramework.CBC.Error, b: InstalibSDKFramework.CBC.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let options: InstalibSDKFramework.BlockModeOption
  public let customBlockSize: Swift.Int?
  public init(iv: Swift.Array<Swift.UInt8>)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping InstalibSDKFramework.CipherOperationOnBlock, encryptionOperation: @escaping InstalibSDKFramework.CipherOperationOnBlock) throws -> InstalibSDKFramework.CipherModeWorker
}
final public class SHA3 {
  final public let blockSize: Swift.Int
  final public let digestLength: Swift.Int
  final public let markByte: Swift.UInt8
  @usableFromInline
  final internal var accumulated: [Swift.UInt8]
  @usableFromInline
  final internal var accumulatedHash: Swift.Array<Swift.UInt64>
  public enum Variant {
    case sha224, sha256, sha384, sha512, keccak224, keccak256, keccak384, keccak512
    public var outputLength: Swift.Int {
      get
    }
    public static func == (a: InstalibSDKFramework.SHA3.Variant, b: InstalibSDKFramework.SHA3.Variant) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(variant: InstalibSDKFramework.SHA3.Variant)
  @inlinable final public func calculate(for bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8> {
    do {
      return try update(withBytes: bytes.slice, isLast: true)
    } catch {
      return []
    }
  }
  @usableFromInline
  final internal func process(block chunk: Swift.ArraySlice<Swift.UInt64>, currentHash hh: inout Swift.Array<Swift.UInt64>)
  @objc deinit
}
extension InstalibSDKFramework.SHA3 : InstalibSDKFramework.Updatable {
  @inlinable final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8> {
    self.accumulated += bytes

    if isLast {
      // Add padding
      let markByteIndex = self.accumulated.count

      // We need to always pad the input. Even if the input is a multiple of blockSize.
      let r = self.blockSize * 8
      let q = (r / 8) - (accumulated.count % (r / 8))
      self.accumulated += Array<UInt8>(repeating: 0, count: q)

      self.accumulated[markByteIndex] |= self.markByte
      self.accumulated[self.accumulated.count - 1] |= 0x80
    }

    var processedBytes = 0
    for chunk in self.accumulated.batched(by: self.blockSize) {
      if isLast || (self.accumulated.count - processedBytes) >= self.blockSize {
        self.process(block: chunk.toUInt64Array().slice, currentHash: &self.accumulatedHash)
        processedBytes += chunk.count
      }
    }
    self.accumulated.removeFirst(processedBytes)

    // TODO: verify performance, reduce vs for..in
    let result = self.accumulatedHash.reduce(into: Array<UInt8>()) { (result, value) in
      result += value.bigEndian.bytes()
    }

    // reset hash value for instance
    if isLast {
      self.accumulatedHash = Array<UInt64>(repeating: 0, count: self.digestLength)
    }

    return Array(result[0..<self.digestLength])
  }
}
public class EncryptedMessage : InstalibSDKFramework.SwiftyRSAMessage {
  final public let data: Foundation.Data
  required public init(data: Foundation.Data)
  public func decrypted(with key: InstalibSDKFramework.PrivateKey, padding: InstalibSDKFramework.SwiftyRSAPadding) throws -> InstalibSDKFramework.ClearMessage
  @objc deinit
}
precedencegroup ColumnAssignment {
  associativity: left
  assignment: true
  lowerThan: AssignmentPrecedence
}
infix operator <- : ColumnAssignment
public struct Setter {
}
extension InstalibSDKFramework.Setter : InstalibSDKFramework.Expressible {
  public var expression: InstalibSDKFramework.Expression<Swift.Void> {
    get
  }
}
public func <- <V>(column: InstalibSDKFramework.Expression<V>, value: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value
public func <- <V>(column: InstalibSDKFramework.Expression<V>, value: V) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value
public func <- <V>(column: InstalibSDKFramework.Expression<V?>, value: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value
public func <- <V>(column: InstalibSDKFramework.Expression<V?>, value: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value
public func <- <V>(column: InstalibSDKFramework.Expression<V?>, value: V?) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value
public func += (column: InstalibSDKFramework.Expression<Swift.String>, value: InstalibSDKFramework.Expression<Swift.String>) -> InstalibSDKFramework.Setter
public func += (column: InstalibSDKFramework.Expression<Swift.String>, value: Swift.String) -> InstalibSDKFramework.Setter
public func += (column: InstalibSDKFramework.Expression<Swift.String?>, value: InstalibSDKFramework.Expression<Swift.String>) -> InstalibSDKFramework.Setter
public func += (column: InstalibSDKFramework.Expression<Swift.String?>, value: InstalibSDKFramework.Expression<Swift.String?>) -> InstalibSDKFramework.Setter
public func += (column: InstalibSDKFramework.Expression<Swift.String?>, value: Swift.String) -> InstalibSDKFramework.Setter
public func += <V>(column: InstalibSDKFramework.Expression<V>, value: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func += <V>(column: InstalibSDKFramework.Expression<V>, value: V) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func += <V>(column: InstalibSDKFramework.Expression<V?>, value: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func += <V>(column: InstalibSDKFramework.Expression<V?>, value: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func += <V>(column: InstalibSDKFramework.Expression<V?>, value: V) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func -= <V>(column: InstalibSDKFramework.Expression<V>, value: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func -= <V>(column: InstalibSDKFramework.Expression<V>, value: V) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func -= <V>(column: InstalibSDKFramework.Expression<V?>, value: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func -= <V>(column: InstalibSDKFramework.Expression<V?>, value: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func -= <V>(column: InstalibSDKFramework.Expression<V?>, value: V) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func *= <V>(column: InstalibSDKFramework.Expression<V>, value: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func *= <V>(column: InstalibSDKFramework.Expression<V>, value: V) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func *= <V>(column: InstalibSDKFramework.Expression<V?>, value: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func *= <V>(column: InstalibSDKFramework.Expression<V?>, value: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func *= <V>(column: InstalibSDKFramework.Expression<V?>, value: V) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func /= <V>(column: InstalibSDKFramework.Expression<V>, value: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func /= <V>(column: InstalibSDKFramework.Expression<V>, value: V) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func /= <V>(column: InstalibSDKFramework.Expression<V?>, value: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func /= <V>(column: InstalibSDKFramework.Expression<V?>, value: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func /= <V>(column: InstalibSDKFramework.Expression<V?>, value: V) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype : InstalibSDKFramework.Number
public func %= <V>(column: InstalibSDKFramework.Expression<V>, value: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func %= <V>(column: InstalibSDKFramework.Expression<V>, value: V) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func %= <V>(column: InstalibSDKFramework.Expression<V?>, value: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func %= <V>(column: InstalibSDKFramework.Expression<V?>, value: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func %= <V>(column: InstalibSDKFramework.Expression<V?>, value: V) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func <<= <V>(column: InstalibSDKFramework.Expression<V>, value: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func <<= <V>(column: InstalibSDKFramework.Expression<V>, value: V) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func <<= <V>(column: InstalibSDKFramework.Expression<V?>, value: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func <<= <V>(column: InstalibSDKFramework.Expression<V?>, value: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func <<= <V>(column: InstalibSDKFramework.Expression<V?>, value: V) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func >>= <V>(column: InstalibSDKFramework.Expression<V>, value: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func >>= <V>(column: InstalibSDKFramework.Expression<V>, value: V) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func >>= <V>(column: InstalibSDKFramework.Expression<V?>, value: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func >>= <V>(column: InstalibSDKFramework.Expression<V?>, value: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func >>= <V>(column: InstalibSDKFramework.Expression<V?>, value: V) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func &= <V>(column: InstalibSDKFramework.Expression<V>, value: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func &= <V>(column: InstalibSDKFramework.Expression<V>, value: V) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func &= <V>(column: InstalibSDKFramework.Expression<V?>, value: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func &= <V>(column: InstalibSDKFramework.Expression<V?>, value: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func &= <V>(column: InstalibSDKFramework.Expression<V?>, value: V) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func |= <V>(column: InstalibSDKFramework.Expression<V>, value: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func |= <V>(column: InstalibSDKFramework.Expression<V>, value: V) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func |= <V>(column: InstalibSDKFramework.Expression<V?>, value: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func |= <V>(column: InstalibSDKFramework.Expression<V?>, value: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func |= <V>(column: InstalibSDKFramework.Expression<V?>, value: V) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func ^= <V>(column: InstalibSDKFramework.Expression<V>, value: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func ^= <V>(column: InstalibSDKFramework.Expression<V>, value: V) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func ^= <V>(column: InstalibSDKFramework.Expression<V?>, value: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func ^= <V>(column: InstalibSDKFramework.Expression<V?>, value: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public func ^= <V>(column: InstalibSDKFramework.Expression<V?>, value: V) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
postfix public func ++ <V>(column: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
postfix public func ++ <V>(column: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
postfix public func -- <V>(column: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
postfix public func -- <V>(column: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Setter where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
public protocol IRepository {
  func initRepository(completionHandler: @escaping (_ isAuthenticated: Swift.Bool) -> Swift.Void)
  func initRepositoryWithoutAuth(completionHandler: @escaping (_ isAuthenticated: Swift.Bool) -> Swift.Void)
  func initRepositoryLogin(userId: Swift.Int64, completionHandler: @escaping (_ isAuthenticated: Swift.Bool, _ user: InstalibSDKFramework.User?) -> Swift.Void)
  static func getInstance() -> InstalibSDKFramework.IRepository
  func getCurrentUser(completionHandler: @escaping (InstalibSDKFramework.User?) -> Swift.Void)
  func friendDetailSync(userId: Swift.Int64) -> InstalibSDKFramework.User?
  func getUserInfoAnonymousSync(username: Swift.String) -> InstalibSDKFramework.AnonymousUserInfoModel?
  func friendDetail(userId: Swift.Int64, completionHandler: @escaping (Swift.Result<InstalibSDKFramework.User, Swift.Error>) -> Swift.Void)
  func getUserFollowersWithPaging(userId: Swift.Int64?, searchQuery: Swift.String?, nextMaxId: Swift.String?, completionHandler: @escaping ([InstalibSDKFramework.User], Swift.String?) -> Swift.Void)
  func getUserFollowingWithPaging(userId: Swift.Int64?, searchQuery: Swift.String?, nextMaxId: Swift.String?, completionHandler: @escaping ([InstalibSDKFramework.User], Swift.String?) -> Swift.Void)
  func getStoryArchieve(nextMaxId: Swift.String?, completionHandler: @escaping ([InstalibSDKFramework.TrayArchive]?, Swift.String?) -> Swift.Void)
  func getStoryArchieveMedias(ids: [Swift.String], completionHandler: @escaping ([Swift.String : InstalibSDKFramework.TrayElement]?) -> Swift.Void)
  func friendshipShowAsync(userId: Swift.Int64) -> InstalibSDKFramework.Friendship?
  func friendshipShow(userId: Swift.Int64, completionHandler: @escaping (InstalibSDKFramework.Friendship?) -> Swift.Void)
  func getStoryUserList(completionHandler: @escaping (InstalibSDKFramework.Tray?) -> Swift.Void)
  func getUserStories(userId: Swift.Int64, completionHandler: @escaping (InstalibSDKFramework.TrayElement?) -> Swift.Void)
  func followUser(userId: Swift.Int64, completionHandler: @escaping (InstalibSDKFramework.Friendship?) -> Swift.Void)
  func unfollowUser(userId: Swift.Int64, completionHandler: @escaping (InstalibSDKFramework.Friendship?) -> Swift.Void)
  func followUserSync(userId: Swift.Int64) -> InstalibSDKFramework.Friendship?
  func unfollowUserSync(userId: Swift.Int64) -> InstalibSDKFramework.Friendship?
  func removeFollower(userId: Swift.Int64, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  func removeFollowerSync(userId: Swift.Int64) -> Swift.Bool
  func getUserHighlights(userId: Swift.Int64, completionHandler: @escaping (InstalibSDKFramework.Tray?) -> Swift.Void)
  func getUserPosts(userId: Swift.Int64, nextMaxId: Swift.String?, completionHandler: @escaping ([InstalibSDKFramework.Media]?, Swift.String?, Swift.Bool) -> Swift.Void)
  func getUserIgtvs(userId: Swift.Int64, nextMaxId: Swift.String?, completionHandler: @escaping (InstalibSDKFramework.IgtvResponseModel?, Swift.String?, Swift.Bool) -> Swift.Void)
  func getPostDetail(mediaId: Swift.String, completionHandler: @escaping (InstalibSDKFramework.Media?) -> Swift.Void)
  func getPostDetailSync(mediaId: Swift.String) -> InstalibSDKFramework.Media?
  func searchUsers(query: Swift.String, completionHandler: @escaping ([InstalibSDKFramework.User]?) -> Swift.Void)
  func getMostPostsInTimeline(completionHandler: @escaping ([InstalibSDKFramework.User]?) -> Swift.Void)
  func getFriendStatusMany(userIds: [Swift.Int], completionHandler: @escaping ([InstalibSDKFramework.User.Reference : InstalibSDKFramework.Friendship]?) -> Swift.Void)
  func likePost(mediaId: Swift.String, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  func unlikePost(mediaId: Swift.String, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  func getUserPendingFriendRequestsToMe(completionHandler: @escaping ([InstalibSDKFramework.User]?) -> Swift.Void)
  func getUserPendingFriendRequestsToFriends(cursor: Swift.String?, completionHandler: @escaping ([InstalibSDKFramework.AnonymousUserInfoModel]?, Swift.String?) -> Swift.Void)
  func getUserPendingFriendRequestsToFriendsOnlyUsername(cursor: Swift.String?, completionHandler: @escaping ([InstalibSDKFramework.FollowRequestItemModel]?, Swift.String?) -> Swift.Void)
  func getUserFollowersAndFollowingsBatch(userId: Swift.Int64?, progressHandler: ((_ progress: Swift.Int) -> Swift.Void)?) -> Swift.Bool
  func getUserFollowersAndFollowingsBatch(userId: Swift.Int64?, progressHandler: ((_ progress: Swift.Int) -> Swift.Void)?, followersMaxPage: InstalibSDKFramework.PaginationParameters, followingsMaxPage: InstalibSDKFramework.PaginationParameters) -> Swift.Bool
  func getUserFollowersAndFollowingsOnlyBatch(userId: Swift.Int64?, progressHandler: ((_ progress: Swift.Int) -> Swift.Void)?) -> Swift.Bool
  func getUserFollowersAndFollowingsOnlyBatch(userId: Swift.Int64?, progressHandler: ((_ progress: Swift.Int) -> Swift.Void)?, followersMaxPage: InstalibSDKFramework.PaginationParameters, followingsMaxPage: InstalibSDKFramework.PaginationParameters) -> Swift.Bool
  func getUserBestFriendsDataBatch(userId: Swift.Int64)
  func getUserBlockedsDataBatch(userId: Swift.Int64)
  func getUserMediaDataBatch(userId: Swift.Int64)
  func getUserMediaDataBatch(userId: Swift.Int64, maxPage: InstalibSDKFramework.PaginationParameters)
  func getUserMediaDataOnlyFirstPageBatch(userId: Swift.Int64)
  func getUserMediaDataListOnlyBatch(userId: Swift.Int64)
  func getUserMediaDataListOnlyBatch(userId: Swift.Int64, maxPage: InstalibSDKFramework.PaginationParameters)
  func getUserMediaDataCommentAndLikeOnlyBatch(userId: Swift.Int64)
  func getUserStoriesBatch(userId: Swift.Int64)
  func getUserArchivedStoryViewersBatch(userId: Swift.Int64, storyIds: [Swift.String])
  func getLikedFeedsBatch(userId: Swift.Int64)
  func getTaggedFeedsBatch(userId: Swift.Int64)
  func updateUserStatsBatch(userId: Swift.Int64)
  func getUserArchivedStoryBatch(userId: Swift.Int64)
  func getUserSuggestedUsersBatch(userId: Swift.Int64)
  func getUserPendingFriendRequestsBatch(userId: Swift.Int64)
  func processUserMediaPopularDaysAndHours(userId: Swift.Int64)
  func getBestPostDays(userId: Swift.Int64) -> [InstalibSDKFramework.BestTimeForPostModel]
  func getBestPostHours(userId: Swift.Int64) -> [InstalibSDKFramework.BestTimeForPostModel]
  func getBestPostDaysHours(userId: Swift.Int64) -> [InstalibSDKFramework.BestTimeForPostModel]
  func getCloseFriends(userId: Swift.Int64, completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func updateAppUser(appUser: InstalibSDKFramework.AppUserModel)
  func getDashboardStats(completionHandler: @escaping (InstalibSDKFramework.UserDashboardDetailView?) -> Swift.Void)
  func getTop5PopuplarMedias(completionHandler: @escaping ([InstalibSDKFramework.MediaModel]?) -> Swift.Void)
  func getMostEngagedTop5UsersWithMetadata(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getUserDetails(userId: Swift.Int64, completionHandler: @escaping (InstalibSDKFramework.EngagedUserWithMetadataModel?) -> Swift.Void)
  func updatefollowingStateDb(engagedUser: InstalibSDKFramework.EngagedUserModel)
  func getFollowings(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getFollowers(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getFollowersByAsc(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getMostEngagedUsers(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getMostCommentUsers(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getMostLikeUsers(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getLeastEngagedUsers(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getLeastCommentUsers(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getLeastLikeUsers(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getUserStatsLimit(limit: Swift.Int, completionHandler: @escaping ([InstalibSDKFramework.UserStatsModel]?) -> Swift.Void)
  func getUserStats(completionHandler: @escaping ([InstalibSDKFramework.UserStatsModel]?) -> Swift.Void)
  func getUserStatByDate(completionHandler: @escaping ([InstalibSDKFramework.UserStatsModel]?) -> Swift.Void)
  func getLostUsers(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getGainedUsers(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getBlockMeUsers(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getClosedAccounts(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getFollowingsNotFollowYou(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getFollowersYouFollow(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getFollowersYouNotFollow(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getLikeOrCommentButNoFollowUsers(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getNoLikeOrCommentUsers(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getNoLikeOrCommentFollowers(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getYouMostLikedUsers(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getYouLikedButNoFollowUsers(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getTagYouUsers(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getUserActiveStories(completionHandler: @escaping ([InstalibSDKFramework.StoryDbModel]?) -> Swift.Void)
  func getArchivedStories(completionHandler: @escaping ([InstalibSDKFramework.StoryDbModel]?) -> Swift.Void)
  func getStoryViewers(storyId: Swift.String, completionHandler: @escaping ([InstalibSDKFramework.StoryViewerWithMetadataModel]?) -> Swift.Void)
  func getNotFolloweLeastViewedCount(completionHandler: @escaping ([InstalibSDKFramework.UserStoryViewCountModel]?) -> Swift.Void)
  func getNotFollowMeViewedStory(completionHandler: @escaping ([InstalibSDKFramework.UserStoryViewCountModel]?) -> Swift.Void)
  func getFollowerMostViewedCount(completionHandler: @escaping ([InstalibSDKFramework.UserStoryViewCountModel]?) -> Swift.Void)
  func getFollowerLeastViewedCount(completionHandler: @escaping ([InstalibSDKFramework.UserStoryViewCountModel]?) -> Swift.Void)
  func getLeastViewedStories(completionHandler: @escaping ([InstalibSDKFramework.StoryDbModel]?) -> Swift.Void)
  func getMostViewedStories(completionHandler: @escaping ([InstalibSDKFramework.StoryDbModel]?) -> Swift.Void)
  func storiesUpdateAllDefaultToFalse()
  func insertStories(models: [InstalibSDKFramework.StoryDbModel])
  func getStoryById(id: Swift.String, completionHandler: @escaping (InstalibSDKFramework.StoryDbModel?) -> Swift.Void)
  func updateStory(model: InstalibSDKFramework.StoryDbModel)
  func getDefaultAppUser(completionHandler: @escaping (InstalibSDKFramework.AppUserModel?) -> Swift.Void)
  func deleteByUserId(uid: Swift.Int)
  func getAllUsers(completionHandler: @escaping ([InstalibSDKFramework.AppUserModel]?) -> Swift.Void)
  func updateUsers(models: [InstalibSDKFramework.AppUserModel])
  func updateAllDefaultToFalse()
  func insertAppUser(model: InstalibSDKFramework.AppUserModel, completionHandler: @escaping (Swift.Int64?) -> Swift.Void)
  func getEngagedUser(userId: Swift.Int64, completionHandler: @escaping (InstalibSDKFramework.EngagedUserModel?) -> Swift.Void)
  func updateEngagedUser(model: InstalibSDKFramework.EngagedUserModel)
  func insertUser(model: InstalibSDKFramework.InstaUserMetadataModel, completionHandler: @escaping (Swift.Int64?) -> Swift.Void)
  func insertUserEngagement(model: InstalibSDKFramework.EngagedUserModel, completionHandler: @escaping (Swift.Int64?) -> Swift.Void)
  func getYourBesties(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getDashboardStatsSync(completionHandler: @escaping (InstalibSDKFramework.UserDashboardDetailView?) -> Swift.Void)
  func insertUserStats(model: InstalibSDKFramework.UserStatsModel, completionHandler: @escaping (Swift.Int64?) -> Swift.Void)
  func getMostLikedMedias(completionHandler: @escaping ([InstalibSDKFramework.MediaModel]?) -> Swift.Void)
  func getMostCommentedMedias(completionHandler: @escaping ([InstalibSDKFramework.MediaModel]?) -> Swift.Void)
  func getMostPopularMedias(completionHandler: @escaping ([InstalibSDKFramework.MediaModel]?) -> Swift.Void)
  func getMostViewedMedias(completionHandler: @escaping ([InstalibSDKFramework.MediaModel]?) -> Swift.Void)
  func getLeastLikedMedias(completionHandler: @escaping ([InstalibSDKFramework.MediaModel]?) -> Swift.Void)
  func getLeastCommentedMedias(completionHandler: @escaping ([InstalibSDKFramework.MediaModel]?) -> Swift.Void)
  func getLeastPopularMedias(completionHandler: @escaping ([InstalibSDKFramework.MediaModel]?) -> Swift.Void)
  func getLeastViewedMedias(completionHandler: @escaping ([InstalibSDKFramework.MediaModel]?) -> Swift.Void)
  func getUsersDeleteComment(completionHandler: @escaping ([InstalibSDKFramework.MediaDeletedUserModel]?) -> Swift.Void)
  func getUsersDeleteLike(completionHandler: @escaping ([InstalibSDKFramework.MediaDeletedUserModel]?) -> Swift.Void)
  func getUsersDeleteLikeOrComment(completionHandler: @escaping ([InstalibSDKFramework.MediaDeletedUserModel]?) -> Swift.Void)
  func getMediaUploadPerMonth(completionHandler: @escaping ([InstalibSDKFramework.StatisticsCounterModel]?) -> Swift.Void)
  func getCommentPerMonth(completionHandler: @escaping ([InstalibSDKFramework.StatisticsCounterModel]?) -> Swift.Void)
  func getLikePerMonth(completionHandler: @escaping ([InstalibSDKFramework.StatisticsCounterModel]?) -> Swift.Void)
  func getMediaUploadPerWeek(completionHandler: @escaping ([InstalibSDKFramework.StatisticsCounterModel]?) -> Swift.Void)
  func getCommentPerWeek(completionHandler: @escaping ([InstalibSDKFramework.StatisticsCounterModel]?) -> Swift.Void)
  func getLikePerWeek(completionHandler: @escaping ([InstalibSDKFramework.StatisticsCounterModel]?) -> Swift.Void)
  func getLostFollowerPerMonth(completionHandler: @escaping ([InstalibSDKFramework.StatisticsCounterModel]?) -> Swift.Void)
  func getBlockFollowerPerMonth(completionHandler: @escaping ([InstalibSDKFramework.StatisticsCounterModel]?) -> Swift.Void)
  func getNewFollowerPerMonth(completionHandler: @escaping ([InstalibSDKFramework.StatisticsCounterModel]?) -> Swift.Void)
  func getStoryPerMonth(completionHandler: @escaping ([InstalibSDKFramework.StatisticsCounterModel]?) -> Swift.Void)
  func getStoryViewPerMonth(completionHandler: @escaping ([InstalibSDKFramework.StatisticsCounterModel]?) -> Swift.Void)
  func getNewFollowerPerWeek(completionHandler: @escaping ([InstalibSDKFramework.StatisticsCounterModel]?) -> Swift.Void)
  func getLostFollowerPerWeek(completionHandler: @escaping ([InstalibSDKFramework.StatisticsCounterModel]?) -> Swift.Void)
  func getDbUserAllPosts(completionHandler: @escaping ([InstalibSDKFramework.MediaModel]?) -> Swift.Void)
  func getDbUserAllVideoPosts(completionHandler: @escaping ([InstalibSDKFramework.MediaModel]?) -> Swift.Void)
  func getDbUserAllPhotoPosts(completionHandler: @escaping ([InstalibSDKFramework.MediaModel]?) -> Swift.Void)
  func getDbUserAllStories(completionHandler: @escaping ([InstalibSDKFramework.StoryDbModel]?) -> Swift.Void)
  func getStalkerCandidates(completionHandler: @escaping ([InstalibSDKFramework.StalkerCandidateWithMetadataModel]?) -> Swift.Void)
  func getAllSuggestedUsers(completionHandler: @escaping ([InstalibSDKFramework.SuggestedUserModel]?) -> Swift.Void)
  func getBlockedByMeUsers(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getUsersDeleteTag(completionHandler: @escaping ([InstalibSDKFramework.UserTagWithMetadataModel]?) -> Swift.Void)
  func getYouUnfollows(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserWithMetadataModel]?) -> Swift.Void)
  func getNotifications() -> [InstalibSDKFramework.NotificationEntityModel]
  func deleteAllNotifications()
  func deleteNotification(uid: Swift.Int?)
  func deleteNotification(type: InstalibSDKFramework.NotificationTypes)
  func getStalkerCandidates() -> [InstalibSDKFramework.StalkerCandidateWithMetadataModel]
  func updateAllStalkersSeen()
  func clearUserHistory()
  func logoutUser() -> InstalibSDKFramework.AppUserModel!
  func getFavUsers() -> [InstalibSDKFramework.EngagedUserBookmarkedWithMetadataModel]
  func getFavUsers(completionHandler: @escaping ([InstalibSDKFramework.EngagedUserBookmarkedWithMetadataModel]?) -> Swift.Void)
  func insertBookmarkedUser(_ model: InstalibSDKFramework.EngagedUserBookmarkedModel) -> Swift.Int64?
  func deleteBookmark(_ model: InstalibSDKFramework.EngagedUserBookmarkedModel)
  func getEngagedUserSync(userId: Swift.Int64) -> InstalibSDKFramework.EngagedUserModel?
  func updateEngagedUserSync(model: InstalibSDKFramework.EngagedUserModel)
}
public struct MediaCommenterModel {
  public init()
  public var commentId: Swift.Int64
  public var userId: Swift.Int64
  public var mediaId: Swift.String?
  public var commentText: Swift.String?
  public var ownerUserId: Swift.Int64?
  public var isDelete: Swift.Bool?
  public var createdAt: Swift.Int64?
}
extension InstalibSDKFramework.ExpressionType where Self.UnderlyingType : InstalibSDKFramework.Number {
  public var absoluteValue: InstalibSDKFramework.Expression<Self.UnderlyingType> {
    get
  }
}
extension InstalibSDKFramework.ExpressionType where Self.UnderlyingType : InstalibSDKFramework._OptionalType, Self.UnderlyingType.WrappedType : InstalibSDKFramework.Number {
  public var absoluteValue: InstalibSDKFramework.Expression<Self.UnderlyingType> {
    get
  }
}
extension InstalibSDKFramework.ExpressionType where Self.UnderlyingType == Swift.Double {
  public func round(_ precision: Swift.Int? = nil) -> InstalibSDKFramework.Expression<Self.UnderlyingType>
}
extension InstalibSDKFramework.ExpressionType where Self.UnderlyingType == Swift.Double? {
  public func round(_ precision: Swift.Int? = nil) -> InstalibSDKFramework.Expression<Self.UnderlyingType>
}
extension InstalibSDKFramework.ExpressionType where Self.UnderlyingType : InstalibSDKFramework.Value, Self.UnderlyingType.Datatype == Swift.Int64 {
  public static func random() -> InstalibSDKFramework.Expression<Self.UnderlyingType>
}
extension InstalibSDKFramework.ExpressionType where Self.UnderlyingType == Foundation.Data {
  public static func random(_ length: Swift.Int) -> InstalibSDKFramework.Expression<Self.UnderlyingType>
  public static func allZeros(_ length: Swift.Int) -> InstalibSDKFramework.Expression<Self.UnderlyingType>
  public var length: InstalibSDKFramework.Expression<Swift.Int> {
    get
  }
}
extension InstalibSDKFramework.ExpressionType where Self.UnderlyingType == Foundation.Data? {
  public var length: InstalibSDKFramework.Expression<Swift.Int?> {
    get
  }
}
extension InstalibSDKFramework.ExpressionType where Self.UnderlyingType == Swift.String {
  public var length: InstalibSDKFramework.Expression<Swift.Int> {
    get
  }
  public var lowercaseString: InstalibSDKFramework.Expression<Swift.String> {
    get
  }
  public var uppercaseString: InstalibSDKFramework.Expression<Swift.String> {
    get
  }
  public func like(_ pattern: Swift.String, escape character: Swift.Character? = nil) -> InstalibSDKFramework.Expression<Swift.Bool>
  public func like(_ pattern: InstalibSDKFramework.Expression<Swift.String>, escape character: Swift.Character? = nil) -> InstalibSDKFramework.Expression<Swift.Bool>
  public func glob(_ pattern: Swift.String) -> InstalibSDKFramework.Expression<Swift.Bool>
  public func match(_ pattern: Swift.String) -> InstalibSDKFramework.Expression<Swift.Bool>
  public func regexp(_ pattern: Swift.String) -> InstalibSDKFramework.Expression<Swift.Bool>
  public func collate(_ collation: InstalibSDKFramework.Collation) -> InstalibSDKFramework.Expression<Self.UnderlyingType>
  public func ltrim(_ characters: Swift.Set<Swift.Character>? = nil) -> InstalibSDKFramework.Expression<Self.UnderlyingType>
  public func rtrim(_ characters: Swift.Set<Swift.Character>? = nil) -> InstalibSDKFramework.Expression<Self.UnderlyingType>
  public func trim(_ characters: Swift.Set<Swift.Character>? = nil) -> InstalibSDKFramework.Expression<Self.UnderlyingType>
  public func replace(_ pattern: Swift.String, with replacement: Swift.String) -> InstalibSDKFramework.Expression<Self.UnderlyingType>
  public func substring(_ location: Swift.Int, length: Swift.Int? = nil) -> InstalibSDKFramework.Expression<Self.UnderlyingType>
  public subscript(range: Swift.Range<Swift.Int>) -> InstalibSDKFramework.Expression<Self.UnderlyingType> {
    get
  }
}
extension InstalibSDKFramework.ExpressionType where Self.UnderlyingType == Swift.String? {
  public var length: InstalibSDKFramework.Expression<Swift.Int?> {
    get
  }
  public var lowercaseString: InstalibSDKFramework.Expression<Swift.String?> {
    get
  }
  public var uppercaseString: InstalibSDKFramework.Expression<Swift.String?> {
    get
  }
  public func like(_ pattern: Swift.String, escape character: Swift.Character? = nil) -> InstalibSDKFramework.Expression<Swift.Bool?>
  public func like(_ pattern: InstalibSDKFramework.Expression<Swift.String>, escape character: Swift.Character? = nil) -> InstalibSDKFramework.Expression<Swift.Bool?>
  public func glob(_ pattern: Swift.String) -> InstalibSDKFramework.Expression<Swift.Bool?>
  public func match(_ pattern: Swift.String) -> InstalibSDKFramework.Expression<Swift.Bool>
  public func regexp(_ pattern: Swift.String) -> InstalibSDKFramework.Expression<Swift.Bool?>
  public func collate(_ collation: InstalibSDKFramework.Collation) -> InstalibSDKFramework.Expression<Self.UnderlyingType>
  public func ltrim(_ characters: Swift.Set<Swift.Character>? = nil) -> InstalibSDKFramework.Expression<Self.UnderlyingType>
  public func rtrim(_ characters: Swift.Set<Swift.Character>? = nil) -> InstalibSDKFramework.Expression<Self.UnderlyingType>
  public func trim(_ characters: Swift.Set<Swift.Character>? = nil) -> InstalibSDKFramework.Expression<Self.UnderlyingType>
  public func replace(_ pattern: Swift.String, with replacement: Swift.String) -> InstalibSDKFramework.Expression<Self.UnderlyingType>
  public func substring(_ location: Swift.Int, length: Swift.Int? = nil) -> InstalibSDKFramework.Expression<Self.UnderlyingType>
  public subscript(range: Swift.Range<Swift.Int>) -> InstalibSDKFramework.Expression<Self.UnderlyingType> {
    get
  }
}
extension Swift.Collection where Self.Element : InstalibSDKFramework.Value {
  public func contains(_ expression: InstalibSDKFramework.Expression<Self.Iterator.Element>) -> InstalibSDKFramework.Expression<Swift.Bool>
  public func contains(_ expression: InstalibSDKFramework.Expression<Self.Iterator.Element?>) -> InstalibSDKFramework.Expression<Swift.Bool?>
}
extension Swift.String {
  public func like(_ pattern: InstalibSDKFramework.Expression<Swift.String>, escape character: Swift.Character? = nil) -> InstalibSDKFramework.Expression<Swift.Bool>
}
public func ?? <V>(optional: InstalibSDKFramework.Expression<V?>, defaultValue: V) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value
public func ?? <V>(optional: InstalibSDKFramework.Expression<V?>, defaultValue: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value
public func ?? <V>(optional: InstalibSDKFramework.Expression<V?>, defaultValue: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.Expression<V> where V : InstalibSDKFramework.Value
extension Swift.String {
  public func decryptBase64ToString(cipher: InstalibSDKFramework.Cipher) throws -> Swift.String
  public func decryptBase64(cipher: InstalibSDKFramework.Cipher) throws -> Swift.Array<Swift.UInt8>
}
public struct InstaUserMetadataModel {
  public init()
  public var userId: Swift.Int64?
  public var userName: Swift.String?
  public var fullName: Swift.String?
  public var profilePictureUrl: Swift.String?
  public var isPrivate: Swift.Bool?
  public var isVerified: Swift.Bool?
  public var isAccountDeletedOrDisabled: Swift.Bool?
  public var lastUpdateDate: Swift.Int64
}
@_inheritsConvenienceInitializers final public class CBCMAC : InstalibSDKFramework.CMAC {
  override final public func authenticate(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  override public init(key: Swift.Array<Swift.UInt8>) throws
  @objc deinit
}
@usableFromInline
final internal class BlockEncryptor : InstalibSDKFramework.Cryptor, InstalibSDKFramework.Updatable {
  @usableFromInline
  internal init(blockSize: Swift.Int, padding: InstalibSDKFramework.Padding, _ worker: InstalibSDKFramework.CipherModeWorker) throws
  final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool) throws -> Swift.Array<Swift.UInt8>
  @usableFromInline
  final internal func seek(to: Swift.Int) throws
  @objc @usableFromInline
  deinit
}
public class PaginationParameters {
  public var maxPagesToLoad: Swift.Int
  public var loadedPages: Swift.Int
  public var currentMaxId: Swift.String?
  public var nextMaxId: Swift.String?
  public init(startingAt maxId: Swift.String? = nil, maxPagesToLoad: Swift.Int = 1)
  public init(_ paginationParameters: InstalibSDKFramework.PaginationParameters)
  public static let everything: InstalibSDKFramework.PaginationParameters
  @available(*, unavailable, message: "use `init` instead.")
  public static func maxPagesToLoad(maxPages: Swift.Int) -> InstalibSDKFramework.PaginationParameters
  @objc deinit
}
extension InstalibSDKFramework.Connection {
  final public func createFunction<Z>(_ function: Swift.String, deterministic: Swift.Bool = false, _ block: @escaping () -> Z) throws -> (() -> InstalibSDKFramework.Expression<Z>) where Z : InstalibSDKFramework.Value
  final public func createFunction<Z>(_ function: Swift.String, deterministic: Swift.Bool = false, _ block: @escaping () -> Z?) throws -> (() -> InstalibSDKFramework.Expression<Z?>) where Z : InstalibSDKFramework.Value
  final public func createFunction<Z, A>(_ function: Swift.String, deterministic: Swift.Bool = false, _ block: @escaping (A) -> Z) throws -> ((InstalibSDKFramework.Expression<A>) -> InstalibSDKFramework.Expression<Z>) where Z : InstalibSDKFramework.Value, A : InstalibSDKFramework.Value
  final public func createFunction<Z, A>(_ function: Swift.String, deterministic: Swift.Bool = false, _ block: @escaping (A?) -> Z) throws -> ((InstalibSDKFramework.Expression<A?>) -> InstalibSDKFramework.Expression<Z>) where Z : InstalibSDKFramework.Value, A : InstalibSDKFramework.Value
  final public func createFunction<Z, A>(_ function: Swift.String, deterministic: Swift.Bool = false, _ block: @escaping (A) -> Z?) throws -> ((InstalibSDKFramework.Expression<A>) -> InstalibSDKFramework.Expression<Z?>) where Z : InstalibSDKFramework.Value, A : InstalibSDKFramework.Value
  final public func createFunction<Z, A>(_ function: Swift.String, deterministic: Swift.Bool = false, _ block: @escaping (A?) -> Z?) throws -> ((InstalibSDKFramework.Expression<A?>) -> InstalibSDKFramework.Expression<Z?>) where Z : InstalibSDKFramework.Value, A : InstalibSDKFramework.Value
  final public func createFunction<Z, A, B>(_ function: Swift.String, deterministic: Swift.Bool = false, _ block: @escaping (A, B) -> Z) throws -> (InstalibSDKFramework.Expression<A>, InstalibSDKFramework.Expression<B>) -> InstalibSDKFramework.Expression<Z> where Z : InstalibSDKFramework.Value, A : InstalibSDKFramework.Value, B : InstalibSDKFramework.Value
  final public func createFunction<Z, A, B>(_ function: Swift.String, deterministic: Swift.Bool = false, _ block: @escaping (A?, B) -> Z) throws -> (InstalibSDKFramework.Expression<A?>, InstalibSDKFramework.Expression<B>) -> InstalibSDKFramework.Expression<Z> where Z : InstalibSDKFramework.Value, A : InstalibSDKFramework.Value, B : InstalibSDKFramework.Value
  final public func createFunction<Z, A, B>(_ function: Swift.String, deterministic: Swift.Bool = false, _ block: @escaping (A, B?) -> Z) throws -> (InstalibSDKFramework.Expression<A>, InstalibSDKFramework.Expression<B?>) -> InstalibSDKFramework.Expression<Z> where Z : InstalibSDKFramework.Value, A : InstalibSDKFramework.Value, B : InstalibSDKFramework.Value
  final public func createFunction<Z, A, B>(_ function: Swift.String, deterministic: Swift.Bool = false, _ block: @escaping (A, B) -> Z?) throws -> (InstalibSDKFramework.Expression<A>, InstalibSDKFramework.Expression<B>) -> InstalibSDKFramework.Expression<Z?> where Z : InstalibSDKFramework.Value, A : InstalibSDKFramework.Value, B : InstalibSDKFramework.Value
  final public func createFunction<Z, A, B>(_ function: Swift.String, deterministic: Swift.Bool = false, _ block: @escaping (A?, B?) -> Z) throws -> (InstalibSDKFramework.Expression<A?>, InstalibSDKFramework.Expression<B?>) -> InstalibSDKFramework.Expression<Z> where Z : InstalibSDKFramework.Value, A : InstalibSDKFramework.Value, B : InstalibSDKFramework.Value
  final public func createFunction<Z, A, B>(_ function: Swift.String, deterministic: Swift.Bool = false, _ block: @escaping (A?, B) -> Z?) throws -> (InstalibSDKFramework.Expression<A?>, InstalibSDKFramework.Expression<B>) -> InstalibSDKFramework.Expression<Z?> where Z : InstalibSDKFramework.Value, A : InstalibSDKFramework.Value, B : InstalibSDKFramework.Value
  final public func createFunction<Z, A, B>(_ function: Swift.String, deterministic: Swift.Bool = false, _ block: @escaping (A, B?) -> Z?) throws -> (InstalibSDKFramework.Expression<A>, InstalibSDKFramework.Expression<B?>) -> InstalibSDKFramework.Expression<Z?> where Z : InstalibSDKFramework.Value, A : InstalibSDKFramework.Value, B : InstalibSDKFramework.Value
  final public func createFunction<Z, A, B>(_ function: Swift.String, deterministic: Swift.Bool = false, _ block: @escaping (A?, B?) -> Z?) throws -> (InstalibSDKFramework.Expression<A?>, InstalibSDKFramework.Expression<B?>) -> InstalibSDKFramework.Expression<Z?> where Z : InstalibSDKFramework.Value, A : InstalibSDKFramework.Value, B : InstalibSDKFramework.Value
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 12, *)
@_Concurrency.MainActor(unsafe) public class LoginWebView : WebKit.WKWebView, WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) public var didReachEndOfLoginFlow: (() -> Swift.Void)?
  @available(*, unavailable, message: "using a custom `userAgent` is no longer supported")
  @_Concurrency.MainActor(unsafe) public init(frame: CoreGraphics.CGRect, userAgent: Swift.String?, didReachEndOfLoginFlow: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public init(frame: CoreGraphics.CGRect, didReachEndOfLoginFlow: (() -> Swift.Void)? = nil)
  @available(*, unavailable, message: "use `init(frame:didReachEndOfLoginFlow:)` instead.")
  @_Concurrency.MainActor(unsafe) public init(frame: CoreGraphics.CGRect, improvingReadability shouldImproveReadability: Swift.Bool, didReachEndOfLoginFlow: (() -> Swift.Void)? = nil)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol QueryType : InstalibSDKFramework.Expressible {
  var clauses: InstalibSDKFramework.QueryClauses { get set }
  init(_ name: Swift.String, database: Swift.String?)
}
public protocol SchemaType : InstalibSDKFramework.QueryType {
  static var identifier: Swift.String { get }
}
extension InstalibSDKFramework.SchemaType {
  public func select(_ column1: InstalibSDKFramework.Expressible, _ more: InstalibSDKFramework.Expressible...) -> Self
  public func select(distinct column1: InstalibSDKFramework.Expressible, _ more: InstalibSDKFramework.Expressible...) -> Self
  public func select(_ all: [InstalibSDKFramework.Expressible]) -> Self
  public func select(distinct columns: [InstalibSDKFramework.Expressible]) -> Self
  public func select(_ star: (InstalibSDKFramework.Expression<InstalibSDKFramework.SQLiteBinding>?, InstalibSDKFramework.Expression<InstalibSDKFramework.SQLiteBinding>?) -> InstalibSDKFramework.Expression<Swift.Void>) -> Self
  public func select(distinct star: (InstalibSDKFramework.Expression<InstalibSDKFramework.SQLiteBinding>?, InstalibSDKFramework.Expression<InstalibSDKFramework.SQLiteBinding>?) -> InstalibSDKFramework.Expression<Swift.Void>) -> Self
  public func select<V>(_ column: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.ScalarQuery<V> where V : InstalibSDKFramework.Value
  public func select<V>(_ column: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.ScalarQuery<V?> where V : InstalibSDKFramework.Value
  public func select<V>(distinct column: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.ScalarQuery<V> where V : InstalibSDKFramework.Value
  public func select<V>(distinct column: InstalibSDKFramework.Expression<V?>) -> InstalibSDKFramework.ScalarQuery<V?> where V : InstalibSDKFramework.Value
  public var count: InstalibSDKFramework.ScalarQuery<Swift.Int> {
    get
  }
}
extension InstalibSDKFramework.QueryType {
  public func union(_ table: InstalibSDKFramework.QueryType) -> Self
  public func join(_ table: InstalibSDKFramework.QueryType, on condition: InstalibSDKFramework.Expression<Swift.Bool>) -> Self
  public func join(_ table: InstalibSDKFramework.QueryType, on condition: InstalibSDKFramework.Expression<Swift.Bool?>) -> Self
  public func join(_ type: InstalibSDKFramework.JoinType, _ table: InstalibSDKFramework.QueryType, on condition: InstalibSDKFramework.Expression<Swift.Bool>) -> Self
  public func join(_ type: InstalibSDKFramework.JoinType, _ table: InstalibSDKFramework.QueryType, on condition: InstalibSDKFramework.Expression<Swift.Bool?>) -> Self
  public func filter(_ predicate: InstalibSDKFramework.Expression<Swift.Bool>) -> Self
  public func filter(_ predicate: InstalibSDKFramework.Expression<Swift.Bool?>) -> Self
  public func `where`(_ predicate: InstalibSDKFramework.Expression<Swift.Bool>) -> Self
  public func `where`(_ predicate: InstalibSDKFramework.Expression<Swift.Bool?>) -> Self
  public func group(_ by: InstalibSDKFramework.Expressible...) -> Self
  public func group(_ by: [InstalibSDKFramework.Expressible]) -> Self
  public func group(_ by: InstalibSDKFramework.Expressible, having: InstalibSDKFramework.Expression<Swift.Bool>) -> Self
  public func group(_ by: InstalibSDKFramework.Expressible, having: InstalibSDKFramework.Expression<Swift.Bool?>) -> Self
  public func group(_ by: [InstalibSDKFramework.Expressible], having: InstalibSDKFramework.Expression<Swift.Bool>) -> Self
  public func group(_ by: [InstalibSDKFramework.Expressible], having: InstalibSDKFramework.Expression<Swift.Bool?>) -> Self
  public func order(_ by: InstalibSDKFramework.Expressible...) -> Self
  public func order(_ by: [InstalibSDKFramework.Expressible]) -> Self
  public func limit(_ length: Swift.Int?) -> Self
  public func limit(_ length: Swift.Int, offset: Swift.Int) -> Self
  public func alias(_ aliasName: Swift.String) -> Self
  public func insert(_ value: InstalibSDKFramework.Setter, _ more: InstalibSDKFramework.Setter...) -> InstalibSDKFramework.Insert
  public func insert(_ values: [InstalibSDKFramework.Setter]) -> InstalibSDKFramework.Insert
  public func insert(or onConflict: InstalibSDKFramework.OnConflict, _ values: InstalibSDKFramework.Setter...) -> InstalibSDKFramework.Insert
  public func insert(or onConflict: InstalibSDKFramework.OnConflict, _ values: [InstalibSDKFramework.Setter]) -> InstalibSDKFramework.Insert
  public func insert() -> InstalibSDKFramework.Insert
  public func insert(_ query: InstalibSDKFramework.QueryType) -> InstalibSDKFramework.Update
  public func update(_ values: InstalibSDKFramework.Setter...) -> InstalibSDKFramework.Update
  public func update(_ values: [InstalibSDKFramework.Setter]) -> InstalibSDKFramework.Update
  public func delete() -> InstalibSDKFramework.Delete
  public var exists: InstalibSDKFramework.Select<Swift.Bool> {
    get
  }
  public func namespace<V>(_ column: InstalibSDKFramework.Expression<V>) -> InstalibSDKFramework.Expression<V>
  public subscript<T>(column: InstalibSDKFramework.Expression<T>) -> InstalibSDKFramework.Expression<T> {
    get
  }
  public subscript<T>(column: InstalibSDKFramework.Expression<T?>) -> InstalibSDKFramework.Expression<T?> {
    get
  }
  public subscript(star: (InstalibSDKFramework.Expression<InstalibSDKFramework.SQLiteBinding>?, InstalibSDKFramework.Expression<InstalibSDKFramework.SQLiteBinding>?) -> InstalibSDKFramework.Expression<Swift.Void>) -> InstalibSDKFramework.Expression<Swift.Void> {
    get
  }
  public var expression: InstalibSDKFramework.Expression<Swift.Void> {
    get
  }
}
public struct Table : InstalibSDKFramework.SchemaType {
  public static let identifier: Swift.String
  public var clauses: InstalibSDKFramework.QueryClauses
  public init(_ name: Swift.String, database: Swift.String? = nil)
}
public struct SQLiteView : InstalibSDKFramework.SchemaType {
  public static let identifier: Swift.String
  public var clauses: InstalibSDKFramework.QueryClauses
  public init(_ name: Swift.String, database: Swift.String? = nil)
}
public struct VirtualTable : InstalibSDKFramework.SchemaType {
  public static let identifier: Swift.String
  public var clauses: InstalibSDKFramework.QueryClauses
  public init(_ name: Swift.String, database: Swift.String? = nil)
}
public struct ScalarQuery<V> : InstalibSDKFramework.QueryType {
  public var clauses: InstalibSDKFramework.QueryClauses
  public init(_ name: Swift.String, database: Swift.String? = nil)
}
public struct Select<T> : InstalibSDKFramework.ExpressionType {
  public var template: Swift.String
  public var bindings: [InstalibSDKFramework.SQLiteBinding?]
  public init(_ template: Swift.String, _ bindings: [InstalibSDKFramework.SQLiteBinding?])
  public typealias UnderlyingType = Swift.Void
}
public struct Insert : InstalibSDKFramework.ExpressionType {
  public var template: Swift.String
  public var bindings: [InstalibSDKFramework.SQLiteBinding?]
  public init(_ template: Swift.String, _ bindings: [InstalibSDKFramework.SQLiteBinding?])
  public typealias UnderlyingType = Swift.Void
}
public struct Update : InstalibSDKFramework.ExpressionType {
  public var template: Swift.String
  public var bindings: [InstalibSDKFramework.SQLiteBinding?]
  public init(_ template: Swift.String, _ bindings: [InstalibSDKFramework.SQLiteBinding?])
  public typealias UnderlyingType = Swift.Void
}
public struct Delete : InstalibSDKFramework.ExpressionType {
  public var template: Swift.String
  public var bindings: [InstalibSDKFramework.SQLiteBinding?]
  public init(_ template: Swift.String, _ bindings: [InstalibSDKFramework.SQLiteBinding?])
  public typealias UnderlyingType = Swift.Void
}
public struct RowIterator : InstalibSDKFramework.FailableIterator {
  public typealias Element = InstalibSDKFramework.Row
  public func failableNext() throws -> InstalibSDKFramework.Row?
  public func map<T>(_ transform: (InstalibSDKFramework.RowIterator.Element) throws -> T) throws -> [T]
}
extension InstalibSDKFramework.Connection {
  final public func prepare(_ query: InstalibSDKFramework.QueryType) throws -> Swift.AnySequence<InstalibSDKFramework.Row>
  final public func prepareRowIterator(_ query: InstalibSDKFramework.QueryType) throws -> InstalibSDKFramework.RowIterator
  final public func scalar<V>(_ query: InstalibSDKFramework.ScalarQuery<V>) throws -> V where V : InstalibSDKFramework.Value
  final public func scalar<V>(_ query: InstalibSDKFramework.ScalarQuery<V?>) throws -> V.ValueType? where V : InstalibSDKFramework.Value
  final public func scalar<V>(_ query: InstalibSDKFramework.Select<V>) throws -> V where V : InstalibSDKFramework.Value
  final public func scalar<V>(_ query: InstalibSDKFramework.Select<V?>) throws -> V.ValueType? where V : InstalibSDKFramework.Value
  final public func pluck(_ query: InstalibSDKFramework.QueryType) throws -> InstalibSDKFramework.Row?
  @discardableResult
  final public func run(_ query: InstalibSDKFramework.Insert) throws -> Swift.Int64
  @discardableResult
  final public func run(_ query: InstalibSDKFramework.Update) throws -> Swift.Int
  @discardableResult
  final public func run(_ query: InstalibSDKFramework.Delete) throws -> Swift.Int
}
public struct Row {
  public func get<V>(_ column: InstalibSDKFramework.Expression<V>) throws -> V where V : InstalibSDKFramework.Value
  public func get<V>(_ column: InstalibSDKFramework.Expression<V?>) throws -> V? where V : InstalibSDKFramework.Value
  public subscript<T>(column: InstalibSDKFramework.Expression<T>) -> T where T : InstalibSDKFramework.Value {
    get
  }
  public subscript<T>(column: InstalibSDKFramework.Expression<T?>) -> T? where T : InstalibSDKFramework.Value {
    get
  }
}
public enum JoinType : Swift.String {
  case cross
  case inner
  case leftOuter
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum OnConflict : Swift.String {
  case replace
  case rollback
  case abort
  case fail
  case ignore
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct QueryClauses {
}
public enum CipherError : Swift.Error {
  case encrypt
  case decrypt
  public static func == (a: InstalibSDKFramework.CipherError, b: InstalibSDKFramework.CipherError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol Cipher : AnyObject {
  var keySize: Swift.Int { get }
  func encrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  func encrypt(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  func decrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  func decrypt(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
extension InstalibSDKFramework.Cipher {
  public func encrypt(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  public func decrypt(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class StoryHandler : InstalibSDKFramework.Handler {
  final public func tray(completionHandler: @escaping (Swift.Result<InstalibSDKFramework.Tray, Swift.Error>) -> Swift.Void)
  final public func by(user: InstalibSDKFramework.User.Reference, completionHandler: @escaping (Swift.Result<InstalibSDKFramework.TrayElement, Swift.Error>) -> Swift.Void)
  final public func reelBy(user: InstalibSDKFramework.User.Reference, completionHandler: @escaping (Swift.Result<InstalibSDKFramework.Tray, Swift.Error>) -> Swift.Void)
  final public func highlightsBy(user: InstalibSDKFramework.User.Reference, completionHandler: @escaping (Swift.Result<InstalibSDKFramework.Tray, Swift.Error>) -> Swift.Void)
  @available(*, unavailable, message: "Instagram changed this endpoint. We're working on making it work again.")
  final public func upload(photo: InstalibSDKFramework.Upload.Picture, completionHandler: @escaping (Swift.Result<InstalibSDKFramework.Upload.Response.Picture, Swift.Error>) -> Swift.Void)
  final public func viewers(forStory storyId: Swift.String, with paginationParameters: InstalibSDKFramework.PaginationParameters, updateHandler: InstalibSDKFramework.PaginationUpdateHandler<InstalibSDKFramework.User, InstalibSDKFramework.StoryViewers>?, completionHandler: @escaping InstalibSDKFramework.PaginationCompletionHandler<InstalibSDKFramework.User>)
  final public func mark(stories: [InstalibSDKFramework.Media], with sourceId: Swift.String?, asSeen seen: Swift.Bool, completionHandler: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  final public func reelsMedia(_ feeds: [Swift.String], completionHandler: @escaping (Swift.Result<[Swift.String : InstalibSDKFramework.TrayElement], Swift.Error>) -> Swift.Void)
  final public func archive(with paginationParameters: InstalibSDKFramework.PaginationParameters, updateHandler: InstalibSDKFramework.PaginationUpdateHandler<InstalibSDKFramework.TrayArchive, InstalibSDKFramework.AnyPaginatedResponse>?, completionHandler: @escaping InstalibSDKFramework.PaginationCompletionHandler<InstalibSDKFramework.TrayArchive>)
  @objc deinit
}
public struct EndpointQuery<Endpoint> : InstalibSDKFramework.LosselessEndpointRepresentable where Endpoint : InstalibSDKFramework.LosselessEndpointRepresentable {
  public var endpoint: Endpoint
  public var items: [Swift.String : Swift.String]
  public var components: Foundation.URLComponents? {
    get
  }
  public var placeholders: [Swift.String]? {
    get
  }
  public func filling(_ placeholder: Swift.String, with string: Swift.String) -> InstalibSDKFramework.LosselessEndpointRepresentable!
  public func query<L>(_ items: [Swift.String : L]) -> InstalibSDKFramework.LosselessEndpointRepresentable! where L : Swift.LosslessStringConvertible
  public func appending(_ path: Swift.String) -> InstalibSDKFramework.LosselessEndpointRepresentable!
  public var description: Swift.String {
    get
  }
}
@inlinable internal func rotateLeft(_ value: Swift.UInt8, by: Swift.UInt8) -> Swift.UInt8 {
  ((value << by) & 0xff) | (value >> (8 - by))
}
@inlinable internal func rotateLeft(_ value: Swift.UInt16, by: Swift.UInt16) -> Swift.UInt16 {
  ((value << by) & 0xffff) | (value >> (16 - by))
}
@inlinable internal func rotateLeft(_ value: Swift.UInt32, by: Swift.UInt32) -> Swift.UInt32 {
  ((value << by) & 0xffffffff) | (value >> (32 - by))
}
@inlinable internal func rotateLeft(_ value: Swift.UInt64, by: Swift.UInt64) -> Swift.UInt64 {
  (value << by) | (value >> (64 - by))
}
@inlinable internal func rotateRight(_ value: Swift.UInt16, by: Swift.UInt16) -> Swift.UInt16 {
  (value >> by) | (value << (16 - by))
}
@inlinable internal func rotateRight(_ value: Swift.UInt32, by: Swift.UInt32) -> Swift.UInt32 {
  (value >> by) | (value << (32 - by))
}
@inlinable internal func rotateRight(_ value: Swift.UInt64, by: Swift.UInt64) -> Swift.UInt64 {
  ((value >> by) | (value << (64 - by)))
}
@inlinable internal func reversed(_ uint8: Swift.UInt8) -> Swift.UInt8 {
  var v = uint8
  v = (v & 0xf0) >> 4 | (v & 0x0f) << 4
  v = (v & 0xcc) >> 2 | (v & 0x33) << 2
  v = (v & 0xaa) >> 1 | (v & 0x55) << 1
  return v
}
@inlinable internal func reversed(_ uint32: Swift.UInt32) -> Swift.UInt32 {
  var v = uint32
  v = ((v >> 1) & 0x55555555) | ((v & 0x55555555) << 1)
  v = ((v >> 2) & 0x33333333) | ((v & 0x33333333) << 2)
  v = ((v >> 4) & 0x0f0f0f0f) | ((v & 0x0f0f0f0f) << 4)
  v = ((v >> 8) & 0x00ff00ff) | ((v & 0x00ff00ff) << 8)
  v = ((v >> 16) & 0xffff) | ((v & 0xffff) << 16)
  return v
}
@inlinable internal func xor<T, V>(_ left: T, _ right: V) -> Swift.ArraySlice<Swift.UInt8> where T : Swift.RandomAccessCollection, V : Swift.RandomAccessCollection, T.Element == Swift.UInt8, T.Index == Swift.Int, V.Element == Swift.UInt8, V.Index == Swift.Int {
  return xor(left, right).slice
}
@inlinable internal func xor<T, V>(_ left: T, _ right: V) -> Swift.Array<Swift.UInt8> where T : Swift.RandomAccessCollection, V : Swift.RandomAccessCollection, T.Element == Swift.UInt8, T.Index == Swift.Int, V.Element == Swift.UInt8, V.Index == Swift.Int {
  let length = Swift.min(left.count, right.count)

  let buf = UnsafeMutablePointer<UInt8>.allocate(capacity: length)
  buf.initialize(repeating: 0, count: length)
  defer {
    buf.deinitialize(count: length)
    buf.deallocate()
  }

  // xor
  for i in 0..<length {
    buf[i] = left[left.startIndex.advanced(by: i)] ^ right[right.startIndex.advanced(by: i)]
  }

  return Array(UnsafeBufferPointer(start: buf, count: length))
}
@inline(__always) @inlinable internal func bitPadding(to data: inout Swift.Array<Swift.UInt8>, blockSize: Swift.Int, allowance: Swift.Int = 0) {
  let msgLength = data.count
  // Step 1. Append Padding Bits
  // append one bit (UInt8 with one bit) to message
  data.append(0x80)

  // Step 2. append "0" bit until message length in bits ≡ 448 (mod 512)
  let max = blockSize - allowance // 448, 986
  if msgLength % blockSize < max { // 448
    data += Array<UInt8>(repeating: 0, count: max - 1 - (msgLength % blockSize))
  } else {
    data += Array<UInt8>(repeating: 0, count: blockSize + max - 1 - (msgLength % blockSize))
  }
}
public struct BlockModeOption : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  @usableFromInline
  internal static let none: InstalibSDKFramework.BlockModeOption
  @usableFromInline
  internal static let initializationVectorRequired: InstalibSDKFramework.BlockModeOption
  @usableFromInline
  internal static let paddingRequired: InstalibSDKFramework.BlockModeOption
  @usableFromInline
  internal static let useEncryptToDecrypt: InstalibSDKFramework.BlockModeOption
  public typealias ArrayLiteralElement = InstalibSDKFramework.BlockModeOption
  public typealias Element = InstalibSDKFramework.BlockModeOption
  public typealias RawValue = Swift.Int
}
public struct RecentActivity : InstalibSDKFramework.ParsedResponse {
  public struct Count : Swift.Codable {
    public let commentLikes: Swift.Int
    public let campaignNotifications: Swift.Int
    public let likes: Swift.Int
    public let comments: Swift.Int
    public let tags: Swift.Int
    public let relationships: Swift.Int
    public let photosOfYou: Swift.Int
    public let requests: Swift.Int
    public init(rawResponse: InstalibSDKFramework.DynamicResponse)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Story : InstalibSDKFramework.IdentifiableParsedResponse {
    public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
    public let rawResponse: InstalibSDKFramework.DynamicResponse
    public var count: InstalibSDKFramework.RecentActivity.Count {
      get
    }
    public var arguments: [InstalibSDKFramework.DynamicResponse] {
      get
    }
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public let rawResponse: InstalibSDKFramework.DynamicResponse
  public var count: InstalibSDKFramework.RecentActivity.Count {
    get
  }
  public var suggestedUsers: [InstalibSDKFramework.SuggestedUser] {
    get
  }
  public var friendRequestStories: [InstalibSDKFramework.RecentActivity.Story] {
    get
  }
  public var newStories: [InstalibSDKFramework.RecentActivity.Story] {
    get
  }
  public var oldStories: [InstalibSDKFramework.RecentActivity.Story] {
    get
  }
  public var continuationToken: Swift.String? {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol Authenticator {
  func authenticate(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
public struct StatisticsCounterModel {
  public init()
  public var ownerUserId: Swift.Int64
  public var count: Swift.Int
  public var monthYear: Swift.String
  public var weekOfYear: Swift.String
}
public struct Status : Swift.Codable {
  public enum State {
    case ok, fail, unknown
    public static func == (a: InstalibSDKFramework.Status.State, b: InstalibSDKFramework.Status.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var status: Swift.String?
  public var state: InstalibSDKFramework.Status.State {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class Credentials {
  public enum Verification : Swift.String {
    case email, text
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum VerificationCodeType : Swift.String {
    case challenge, sms, backup, totp
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var username: Swift.String {
    get
  }
  public var verification: InstalibSDKFramework.Credentials.Verification
  public var code: (InstalibSDKFramework.Credentials.VerificationCodeType, Swift.String)? {
    get
    set
  }
  public init(username: Swift.String, password: Swift.String, verifyBy verification: InstalibSDKFramework.Credentials.Verification)
  public func resendCode(completionHandler: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  @objc deinit
}
@usableFromInline
internal struct BatchedCollectionIndex<Base> where Base : Swift.Collection {
}
extension InstalibSDKFramework.BatchedCollectionIndex : Swift.Comparable {
  @usableFromInline
  internal static func == <Base>(lhs: InstalibSDKFramework.BatchedCollectionIndex<Base>, rhs: InstalibSDKFramework.BatchedCollectionIndex<Base>) -> Swift.Bool where Base : Swift.Collection
  @usableFromInline
  internal static func < <Base>(lhs: InstalibSDKFramework.BatchedCollectionIndex<Base>, rhs: InstalibSDKFramework.BatchedCollectionIndex<Base>) -> Swift.Bool where Base : Swift.Collection
}
@usableFromInline
internal struct BatchedCollection<Base> : Swift.Collection where Base : Swift.Collection {
  @usableFromInline
  internal init(base: Base, size: Swift.Int)
  @usableFromInline
  internal typealias Index = InstalibSDKFramework.BatchedCollectionIndex<Base>
  @usableFromInline
  internal var startIndex: InstalibSDKFramework.BatchedCollection<Base>.Index {
    get
  }
  @usableFromInline
  internal var endIndex: InstalibSDKFramework.BatchedCollection<Base>.Index {
    get
  }
  @usableFromInline
  internal func index(after idx: InstalibSDKFramework.BatchedCollection<Base>.Index) -> InstalibSDKFramework.BatchedCollection<Base>.Index
  @usableFromInline
  internal subscript(idx: InstalibSDKFramework.BatchedCollection<Base>.Index) -> Base.SubSequence {
    get
  }
  @usableFromInline
  internal typealias Element = Base.SubSequence
  @usableFromInline
  internal typealias Indices = Swift.DefaultIndices<InstalibSDKFramework.BatchedCollection<Base>>
  @usableFromInline
  internal typealias Iterator = Swift.IndexingIterator<InstalibSDKFramework.BatchedCollection<Base>>
  @usableFromInline
  internal typealias SubSequence = Swift.Slice<InstalibSDKFramework.BatchedCollection<Base>>
}
extension Swift.Collection {
  @inlinable internal func batched(by size: Swift.Int) -> InstalibSDKFramework.BatchedCollection<Self> {
    BatchedCollection(base: self, size: size)
  }
}
extension InstalibSDKFramework.AES {
  convenience public init(key: Swift.String, iv: Swift.String, padding: InstalibSDKFramework.Padding = .pkcs7) throws
}
final public class SHA2 {
  @usableFromInline
  final internal let variant: InstalibSDKFramework.SHA2.Variant
  @usableFromInline
  final internal let size: Swift.Int
  @usableFromInline
  final internal let blockSize: Swift.Int
  @usableFromInline
  final internal let digestLength: Swift.Int
  @usableFromInline
  final internal var accumulated: [Swift.UInt8]
  @usableFromInline
  final internal var processedBytesTotalCount: Swift.Int
  @usableFromInline
  final internal var accumulatedHash32: [Swift.UInt32]
  @usableFromInline
  final internal var accumulatedHash64: [Swift.UInt64]
  public enum Variant : Swift.RawRepresentable {
    case sha224, sha256, sha384, sha512
    public var digestLength: Swift.Int {
      get
    }
    public var blockSize: Swift.Int {
      get
    }
    public typealias RawValue = Swift.Int
    public var rawValue: InstalibSDKFramework.SHA2.Variant.RawValue {
      get
    }
    public init?(rawValue: InstalibSDKFramework.SHA2.Variant.RawValue)
    @usableFromInline
    internal var h: Swift.Array<Swift.UInt64> {
      get
    }
    @usableFromInline
    internal var finalLength: Swift.Int {
      get
    }
  }
  public init(variant: InstalibSDKFramework.SHA2.Variant)
  @inlinable final public func calculate(for bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8> {
    do {
      return try update(withBytes: bytes.slice, isLast: true)
    } catch {
      return []
    }
  }
  @usableFromInline
  final internal func process64(block chunk: Swift.ArraySlice<Swift.UInt8>, currentHash hh: inout Swift.Array<Swift.UInt64>)
  @usableFromInline
  final internal func process32(block chunk: Swift.ArraySlice<Swift.UInt8>, currentHash hh: inout Swift.Array<Swift.UInt32>)
  @objc deinit
}
extension InstalibSDKFramework.SHA2 : InstalibSDKFramework.Updatable {
  @inlinable final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8> {
    self.accumulated += bytes

    if isLast {
      let lengthInBits = (processedBytesTotalCount + self.accumulated.count) * 8
      let lengthBytes = lengthInBits.bytes(totalBytes: self.blockSize / 8) // A 64-bit/128-bit representation of b. blockSize fit by accident.

      // Step 1. Append padding
      bitPadding(to: &self.accumulated, blockSize: self.blockSize, allowance: self.blockSize / 8)

      // Step 2. Append Length a 64-bit representation of lengthInBits
      self.accumulated += lengthBytes
    }

    var processedBytes = 0
    for chunk in self.accumulated.batched(by: self.blockSize) {
      if isLast || (self.accumulated.count - processedBytes) >= self.blockSize {
        switch self.variant {
          case .sha224, .sha256:
            self.process32(block: chunk, currentHash: &self.accumulatedHash32)
          case .sha384, .sha512:
            self.process64(block: chunk, currentHash: &self.accumulatedHash64)
          @unknown default:
            preconditionFailure()
          }
        processedBytes += chunk.count
      }
    }
    self.accumulated.removeFirst(processedBytes)
    self.processedBytesTotalCount += processedBytes

    // output current hash
    var result = Array<UInt8>(repeating: 0, count: variant.digestLength)
    switch self.variant {
      case .sha224, .sha256:
        var pos = 0
        for idx in 0..<self.accumulatedHash32.count where idx < self.variant.finalLength {
          let h = accumulatedHash32[idx]
          result[pos + 0] = UInt8((h >> 24) & 0xff)
          result[pos + 1] = UInt8((h >> 16) & 0xff)
          result[pos + 2] = UInt8((h >> 8) & 0xff)
          result[pos + 3] = UInt8(h & 0xff)
          pos += 4
        }
      case .sha384, .sha512:
        var pos = 0
        for idx in 0..<self.accumulatedHash64.count where idx < self.variant.finalLength {
          let h = accumulatedHash64[idx]
          result[pos + 0] = UInt8((h >> 56) & 0xff)
          result[pos + 1] = UInt8((h >> 48) & 0xff)
          result[pos + 2] = UInt8((h >> 40) & 0xff)
          result[pos + 3] = UInt8((h >> 32) & 0xff)
          result[pos + 4] = UInt8((h >> 24) & 0xff)
          result[pos + 5] = UInt8((h >> 16) & 0xff)
          result[pos + 6] = UInt8((h >> 8) & 0xff)
          result[pos + 7] = UInt8(h & 0xff)
          pos += 8
        }
      @unknown default:
          preconditionFailure()
    }

    // reset hash value for instance
    if isLast {
      switch self.variant {
        case .sha224, .sha256:
          self.accumulatedHash32 = self.variant.h.lazy.map { UInt32($0) } // FIXME: UInt64 for process64
        case .sha384, .sha512:
          self.accumulatedHash64 = self.variant.h
        @unknown default:
          preconditionFailure()
      }
    }

    return result
  }
}
public protocol CipherModeWorker {
  var cipherOperation: InstalibSDKFramework.CipherOperationOnBlock { get }
  var additionalBufferSize: Swift.Int { get }
  @inlinable mutating func encrypt(block plaintext: Swift.ArraySlice<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  @inlinable mutating func decrypt(block ciphertext: Swift.ArraySlice<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
}
public protocol BlockModeWorker : InstalibSDKFramework.CipherModeWorker {
  var blockSize: Swift.Int { get }
}
public protocol CounterModeWorker : InstalibSDKFramework.CipherModeWorker {
  associatedtype Counter
  var counter: Self.Counter { get set }
}
public protocol SeekableModeWorker : InstalibSDKFramework.CipherModeWorker {
  mutating func seek(to position: Swift.Int) throws
}
public protocol StreamModeWorker : InstalibSDKFramework.CipherModeWorker {
}
public protocol FinalizingEncryptModeWorker : InstalibSDKFramework.CipherModeWorker {
  mutating func finalize(encrypt ciphertext: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.ArraySlice<Swift.UInt8>
}
public protocol FinalizingDecryptModeWorker : InstalibSDKFramework.CipherModeWorker {
  @discardableResult
  mutating func willDecryptLast(bytes ciphertext: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.ArraySlice<Swift.UInt8>
  mutating func didDecryptLast(bytes plaintext: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.ArraySlice<Swift.UInt8>
  mutating func finalize(decrypt plaintext: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.ArraySlice<Swift.UInt8>
}
open class KeychainSwift {
  open var lastResultCode: Darwin.OSStatus
  open var accessGroup: Swift.String?
  open var synchronizable: Swift.Bool
  public init()
  public init(keyPrefix: Swift.String)
  @discardableResult
  open func set(_ value: Swift.String, forKey key: Swift.String, withAccess access: InstalibSDKFramework.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Foundation.Data, forKey key: Swift.String, withAccess access: InstalibSDKFramework.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Bool, forKey key: Swift.String, withAccess access: InstalibSDKFramework.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  open func get(_ key: Swift.String) -> Swift.String?
  open func getData(_ key: Swift.String, asReference: Swift.Bool = false) -> Foundation.Data?
  open func getBool(_ key: Swift.String) -> Swift.Bool?
  @discardableResult
  open func delete(_ key: Swift.String) -> Swift.Bool
  public var allKeys: [Swift.String] {
    get
  }
  @discardableResult
  open func clear() -> Swift.Bool
  @objc deinit
}
public struct KeychainSwiftConstants {
  public static var accessGroup: Swift.String {
    get
  }
  public static var accessible: Swift.String {
    get
  }
  public static var attrAccount: Swift.String {
    get
  }
  public static var attrSynchronizable: Swift.String {
    get
  }
  public static var klass: Swift.String {
    get
  }
  public static var matchLimit: Swift.String {
    get
  }
  public static var returnData: Swift.String {
    get
  }
  public static var valueData: Swift.String {
    get
  }
  public static var returnReference: Swift.String {
    get
  }
  public static var returnAttributes: Swift.String {
    get
  }
  public static var secMatchLimitAll: Swift.String {
    get
  }
}
public enum KeychainSwiftAccessOptions {
  case accessibleWhenUnlocked
  case accessibleWhenUnlockedThisDeviceOnly
  case accessibleAfterFirstUnlock
  case accessibleAfterFirstUnlockThisDeviceOnly
  case accessibleWhenPasscodeSetThisDeviceOnly
  public static func == (a: InstalibSDKFramework.KeychainSwiftAccessOptions, b: InstalibSDKFramework.KeychainSwiftAccessOptions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct StoryDbModel {
  public init()
  public var storyId: Swift.String
  public var userId: Swift.Int64?
  public var thumbnailUrl: Swift.String?
  public var type: Swift.Int?
  public var sourceUrl: Swift.String?
  public var videoDuration: Swift.Double?
  public var viewCount: Swift.Int
  public var expireAt: Swift.Int64
  public var takenAt: Swift.Int64
  public var isArchived: Swift.Bool
  public var isRefreshViewsAfterArchive: Swift.Bool
}
extension InstalibSDKFramework.Module {
  public static func RTree<T, U>(_ primaryKey: InstalibSDKFramework.Expression<T>, _ pairs: (InstalibSDKFramework.Expression<U>, InstalibSDKFramework.Expression<U>)...) -> InstalibSDKFramework.Module where T : InstalibSDKFramework.Value, U : InstalibSDKFramework.Value, T.Datatype == Swift.Int64, U.Datatype == Swift.Double
}
final public class GCM : InstalibSDKFramework.BlockMode {
  public enum Mode {
    case combined
    case detached
    public static func == (a: InstalibSDKFramework.GCM.Mode, b: InstalibSDKFramework.GCM.Mode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let options: InstalibSDKFramework.BlockModeOption
  public enum Error : Swift.Error {
    case invalidInitializationVector
    case fail
    public static func == (a: InstalibSDKFramework.GCM.Error, b: InstalibSDKFramework.GCM.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let customBlockSize: Swift.Int?
  final public var authenticationTag: Swift.Array<Swift.UInt8>?
  public init(iv: Swift.Array<Swift.UInt8>, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil, tagLength: Swift.Int = 16, mode: InstalibSDKFramework.GCM.Mode = .detached)
  convenience public init(iv: Swift.Array<Swift.UInt8>, authenticationTag: Swift.Array<Swift.UInt8>, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil, mode: InstalibSDKFramework.GCM.Mode = .detached)
  final public func worker(blockSize: Swift.Int, cipherOperation: @escaping InstalibSDKFramework.CipherOperationOnBlock, encryptionOperation: @escaping InstalibSDKFramework.CipherOperationOnBlock) throws -> InstalibSDKFramework.CipherModeWorker
  @objc deinit
}
public struct Thread : InstalibSDKFramework.ThreadIdentifiableParsedResponse {
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public let rawResponse: InstalibSDKFramework.DynamicResponse
  public var isMuted: Swift.Bool {
    get
  }
  public var title: Swift.String {
    get
  }
  public var isGroup: Swift.Bool {
    get
  }
  public var users: [InstalibSDKFramework.User] {
    get
  }
  public var messages: [InstalibSDKFramework.Message] {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Message : InstalibSDKFramework.ItemIdentifiableParsedResponse, InstalibSDKFramework.UserIdentifiableParsedResponse {
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public let rawResponse: InstalibSDKFramework.DynamicResponse
  public var sentAt: Foundation.Date {
    get
  }
  public var text: Swift.String? {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Recipient : InstalibSDKFramework.ParsedResponse {
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public let rawResponse: InstalibSDKFramework.DynamicResponse
  public var user: InstalibSDKFramework.User? {
    get
  }
  public var thread: InstalibSDKFramework.Thread? {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
final public class MD5 {
  public init()
  final public func calculate(for bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  @objc deinit
}
extension InstalibSDKFramework.MD5 : InstalibSDKFramework.Updatable {
  final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8>
}
extension InstalibSDKFramework.ChaCha20 {
  convenience public init(key: Swift.String, iv: Swift.String) throws
}
public enum EndpointPath {
  case noVersion(Swift.String)
  case version1(Swift.String)
  case version2(Swift.String)
  case generic(Swift.String)
}
extension InstalibSDKFramework.EndpointPath : InstalibSDKFramework.LosselessEndpointRepresentable {
  public var placeholders: [Swift.String]? {
    get
  }
  public func filling(_ placeholder: Swift.String, with string: Swift.String) -> InstalibSDKFramework.LosselessEndpointRepresentable!
  public func query<L>(_ items: [Swift.String : L]) -> InstalibSDKFramework.LosselessEndpointRepresentable! where L : Swift.LosslessStringConvertible
  public func appending(_ path: Swift.String) -> InstalibSDKFramework.LosselessEndpointRepresentable!
  public var basePath: Swift.String {
    get
  }
  public var endpointPath: Swift.String {
    get
  }
  public var components: Foundation.URLComponents? {
    get
  }
  public var description: Swift.String {
    get
  }
}
extension InstalibSDKFramework.EndpointPath : Swift.RawRepresentable, Swift.ExpressibleByStringLiteral, Swift.Equatable {
  public init(stringLiteral value: Swift.String)
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias RawValue = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
public class CMAC : InstalibSDKFramework.Authenticator {
  public enum Error : Swift.Error {
    case wrongKeyLength
    public static func == (a: InstalibSDKFramework.CMAC.Error, b: InstalibSDKFramework.CMAC.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(key: Swift.Array<Swift.UInt8>) throws
  public func authenticate(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  public func authenticate(_ bytes: Swift.Array<Swift.UInt8>, cipher: InstalibSDKFramework.Cipher) throws -> Swift.Array<Swift.UInt8>
  @objc deinit
}
extension Swift.Collection where Self.Element == Swift.UInt8, Self.Index == Swift.Int {
  @inlinable internal func toUInt32Array() -> Swift.Array<Swift.UInt32> {
    guard !isEmpty else {
      return []
    }

    let c = strideCount(from: startIndex, to: endIndex, by: 4)
    return Array<UInt32>(unsafeUninitializedCapacity: c) { buf, count in
      var counter = 0
      for idx in stride(from: startIndex, to: endIndex, by: 4) {
        let val = UInt32(bytes: self, fromIndex: idx).bigEndian
        buf[counter] = val
        counter += 1
      }
      count = counter
      assert(counter == c)
    }
  }
  @inlinable internal func toUInt64Array() -> Swift.Array<Swift.UInt64> {
    guard !isEmpty else {
      return []
    }

    let c = strideCount(from: startIndex, to: endIndex, by: 8)
    return Array<UInt64>(unsafeUninitializedCapacity: c) { buf, count in
      var counter = 0
      for idx in stride(from: startIndex, to: endIndex, by: 8) {
        let val = UInt64(bytes: self, fromIndex: idx).bigEndian
        buf[counter] = val
        counter += 1
      }
      count = counter
      assert(counter == c)
    }
  }
}
@usableFromInline
internal func strideCount(from: Swift.Int, to: Swift.Int, by: Swift.Int) -> Swift.Int
public protocol ExpressionType : InstalibSDKFramework.Expressible {
  associatedtype UnderlyingType = Swift.Void
  var template: Swift.String { get }
  var bindings: [InstalibSDKFramework.SQLiteBinding?] { get }
  init(_ template: Swift.String, _ bindings: [InstalibSDKFramework.SQLiteBinding?])
}
extension InstalibSDKFramework.ExpressionType {
  public init(literal: Swift.String)
  public init(_ identifier: Swift.String)
  public init<U>(_ expression: U) where U : InstalibSDKFramework.ExpressionType
}
public struct Expression<Datatype> : InstalibSDKFramework.ExpressionType {
  public typealias UnderlyingType = Datatype
  public var template: Swift.String
  public var bindings: [InstalibSDKFramework.SQLiteBinding?]
  public init(_ template: Swift.String, _ bindings: [InstalibSDKFramework.SQLiteBinding?])
}
public protocol Expressible {
  var expression: InstalibSDKFramework.Expression<Swift.Void> { get }
}
extension InstalibSDKFramework.Expressible {
  public func asSQL() -> Swift.String
}
extension InstalibSDKFramework.ExpressionType {
  public var expression: InstalibSDKFramework.Expression<Swift.Void> {
    get
  }
  public var asc: InstalibSDKFramework.Expressible {
    get
  }
  public var desc: InstalibSDKFramework.Expressible {
    get
  }
}
extension InstalibSDKFramework.ExpressionType where Self.UnderlyingType : InstalibSDKFramework.Value {
  public init(value: Self.UnderlyingType)
}
extension InstalibSDKFramework.ExpressionType where Self.UnderlyingType : InstalibSDKFramework._OptionalType, Self.UnderlyingType.WrappedType : InstalibSDKFramework.Value {
  public static var null: Self {
    get
  }
  public init(value: Self.UnderlyingType.WrappedType?)
}
extension InstalibSDKFramework.Value {
  public var expression: InstalibSDKFramework.Expression<Swift.Void> {
    get
  }
}
public let rowid: InstalibSDKFramework.Expression<Swift.Int64>
public func cast<T, U>(_ expression: InstalibSDKFramework.Expression<T>) -> InstalibSDKFramework.Expression<U> where T : InstalibSDKFramework.Value, U : InstalibSDKFramework.Value
public func cast<T, U>(_ expression: InstalibSDKFramework.Expression<T?>) -> InstalibSDKFramework.Expression<U?> where T : InstalibSDKFramework.Value, U : InstalibSDKFramework.Value
public struct MediaLikerModel {
  public init()
  public var uid: Swift.Int64
  public var mediaId: Swift.String?
  public var userId: Swift.Int64?
  public var ownerUserId: Swift.Int64?
  public var isDelete: Swift.Bool?
  public var createdAt: Swift.Int64?
}
@_hasMissingDesignatedInitializers public class Handler {
  @objc deinit
}
public class APIHandler {
  public struct Settings {
    public struct Queues {
      public var request: Dispatch.DispatchQueue
      public var working: Dispatch.DispatchQueue
      public var response: Dispatch.DispatchQueue
      public init(request: Dispatch.DispatchQueue = .main, working: Dispatch.DispatchQueue = .global(qos: .userInitiated), response: Dispatch.DispatchQueue = .main)
    }
    public var delay: Swift.ClosedRange<Swift.Double>
    public var queues: InstalibSDKFramework.APIHandler.Settings.Queues
    public var device: InstalibSDKFramework.Device
    public var session: Foundation.URLSession
    public init(delay: Swift.ClosedRange<Swift.Double> = 1...2, queues: InstalibSDKFramework.APIHandler.Settings.Queues = .init(), device: InstalibSDKFramework.Device? = nil, session: Foundation.URLSession = .shared)
  }
  public var settings: InstalibSDKFramework.APIHandler.Settings
  public var response: InstalibSDKFramework.Authentication.Response?
  public var user: InstalibSDKFramework.User? {
    get
  }
  public init(with settings: InstalibSDKFramework.APIHandler.Settings = .init())
  public func authenticate(with request: InstalibSDKFramework.Authentication.Request, completionHandler: @escaping (Swift.Result<(InstalibSDKFramework.Authentication.Response, InstalibSDKFramework.APIHandler), Swift.Error>) -> Swift.Void)
  public func invalidate(completionHandler: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void) throws
  public var users: InstalibSDKFramework.UserHandler {
    get
  }
  public var comments: InstalibSDKFramework.CommentHandler {
    get
  }
  public var feeds: InstalibSDKFramework.FeedHandler {
    get
  }
  public var media: InstalibSDKFramework.MediaHandler {
    get
  }
  public var messages: InstalibSDKFramework.MessageHandler {
    get
  }
  public var profile: InstalibSDKFramework.ProfileHandler {
    get
  }
  public var stories: InstalibSDKFramework.StoryHandler {
    get
  }
  @objc deinit
}
public enum Gender : Swift.String {
  case male
  case female
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class ProfileHandler : InstalibSDKFramework.Handler {
  final public func markAsPublic(completionHandler: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  final public func markAsPrivate(completionHandler: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  final public func update(password: Swift.String, oldPassword: Swift.String, completionHandler: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  final public func edit(username: Swift.String?, name: Swift.String?, biography: Swift.String?, url: Swift.String?, email: Swift.String?, phone: Swift.String?, gender: InstalibSDKFramework.Gender, completionHandler: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  final public func edit(biography: Swift.String, completionHandler: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  final public func deleteProfilePicture(completionHandler: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  final public func upload(profilePicture photo: InstalibSDKFramework.Upload.Picture, completionHandler: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  @objc deinit
}
final public class AES {
  public enum Error : Swift.Error {
    case invalidKeySize
    case dataPaddingRequired
    case invalidData
    public static func == (a: InstalibSDKFramework.AES.Error, b: InstalibSDKFramework.AES.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Variant : Swift.Int {
    case aes128, aes192, aes256
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @usableFromInline
  final internal let variantNr: Swift.Int
  @usableFromInline
  final internal let variantNb: Swift.Int
  @usableFromInline
  final internal let variantNk: Swift.Int
  public static let blockSize: Swift.Int
  final public let keySize: Swift.Int
  final public let variant: InstalibSDKFramework.AES.Variant
  @usableFromInline
  final internal let blockMode: InstalibSDKFramework.BlockMode
  @usableFromInline
  final internal let padding: InstalibSDKFramework.Padding
  @usableFromInline
  final internal var expandedKey: Swift.Array<Swift.Array<Swift.UInt32>> {
    get
    set
  }
  @usableFromInline
  final internal var expandedKeyInv: Swift.Array<Swift.Array<Swift.UInt32>> {
    get
    set
  }
  @usableFromInline
  internal static let T0: [Swift.UInt32]
  @usableFromInline
  internal static let T0_INV: [Swift.UInt32]
  @usableFromInline
  internal static let T1: [Swift.UInt32]
  @usableFromInline
  internal static let T1_INV: [Swift.UInt32]
  @usableFromInline
  internal static let T2: [Swift.UInt32]
  @usableFromInline
  internal static let T2_INV: [Swift.UInt32]
  @usableFromInline
  internal static let T3: [Swift.UInt32]
  @usableFromInline
  internal static let T3_INV: [Swift.UInt32]
  @usableFromInline
  internal static let U1: [Swift.UInt32]
  @usableFromInline
  internal static let U2: [Swift.UInt32]
  @usableFromInline
  internal static let U3: [Swift.UInt32]
  @usableFromInline
  internal static let U4: [Swift.UInt32]
  public init(key: Swift.Array<Swift.UInt8>, blockMode: InstalibSDKFramework.BlockMode, padding: InstalibSDKFramework.Padding = .pkcs7) throws
  @inlinable final internal func encrypt(block: Swift.ArraySlice<Swift.UInt8>) -> Swift.Array<Swift.UInt8>? {
    if self.blockMode.options.contains(.paddingRequired) && block.count != AES.blockSize {
      return Array(block)
    }

    let rounds = self.variantNr
    let rk = self.expandedKey

    let b00 = UInt32(block[block.startIndex.advanced(by: 0)])
    let b01 = UInt32(block[block.startIndex.advanced(by: 1)]) << 8
    let b02 = UInt32(block[block.startIndex.advanced(by: 2)]) << 16
    let b03 = UInt32(block[block.startIndex.advanced(by: 3)]) << 24
    var b0 = b00 | b01 | b02 | b03

    let b10 = UInt32(block[block.startIndex.advanced(by: 4)])
    let b11 = UInt32(block[block.startIndex.advanced(by: 5)]) << 8
    let b12 = UInt32(block[block.startIndex.advanced(by: 6)]) << 16
    let b13 = UInt32(block[block.startIndex.advanced(by: 7)]) << 24
    var b1 = b10 | b11 | b12 | b13

    let b20 = UInt32(block[block.startIndex.advanced(by: 8)])
    let b21 = UInt32(block[block.startIndex.advanced(by: 9)]) << 8
    let b22 = UInt32(block[block.startIndex.advanced(by: 10)]) << 16
    let b23 = UInt32(block[block.startIndex.advanced(by: 11)]) << 24
    var b2 = b20 | b21 | b22 | b23

    let b30 = UInt32(block[block.startIndex.advanced(by: 12)])
    let b31 = UInt32(block[block.startIndex.advanced(by: 13)]) << 8
    let b32 = UInt32(block[block.startIndex.advanced(by: 14)]) << 16
    let b33 = UInt32(block[block.startIndex.advanced(by: 15)]) << 24
    var b3 = b30 | b31 | b32 | b33

    let tLength = 4
    let t = UnsafeMutablePointer<UInt32>.allocate(capacity: tLength)
    t.initialize(repeating: 0, count: tLength)
    defer {
      t.deinitialize(count: tLength)
      t.deallocate()
    }

    for r in 0..<rounds - 1 {
      t[0] = b0 ^ rk[r][0]
      t[1] = b1 ^ rk[r][1]
      t[2] = b2 ^ rk[r][2]
      t[3] = b3 ^ rk[r][3]

      let lb00 = AES.T0[Int(t[0] & 0xff)]
      let lb01 = AES.T1[Int((t[1] >> 8) & 0xff)]
      let lb02 = AES.T2[Int((t[2] >> 16) & 0xff)]
      let lb03 = AES.T3[Int(t[3] >> 24)]
      b0 = lb00 ^ lb01 ^ lb02 ^ lb03

      let lb10 = AES.T0[Int(t[1] & 0xff)]
      let lb11 = AES.T1[Int((t[2] >> 8) & 0xff)]
      let lb12 = AES.T2[Int((t[3] >> 16) & 0xff)]
      let lb13 = AES.T3[Int(t[0] >> 24)]
      b1 = lb10 ^ lb11 ^ lb12 ^ lb13

      let lb20 = AES.T0[Int(t[2] & 0xff)]
      let lb21 = AES.T1[Int((t[3] >> 8) & 0xff)]
      let lb22 = AES.T2[Int((t[0] >> 16) & 0xff)]
      let lb23 = AES.T3[Int(t[1] >> 24)]
      b2 = lb20 ^ lb21 ^ lb22 ^ lb23

      let lb30 = AES.T0[Int(t[3] & 0xff)]
      let lb31 = AES.T1[Int((t[0] >> 8) & 0xff)]
      let lb32 = AES.T2[Int((t[1] >> 16) & 0xff)]
      let lb33 = AES.T3[Int(t[2] >> 24)]
      b3 = lb30 ^ lb31 ^ lb32 ^ lb33
    }

    // last round
    let r = rounds - 1

    t[0] = b0 ^ rk[r][0]
    t[1] = b1 ^ rk[r][1]
    t[2] = b2 ^ rk[r][2]
    t[3] = b3 ^ rk[r][3]

    // rounds
    b0 = F1(t[0], t[1], t[2], t[3]) ^ rk[rounds][0]
    b1 = F1(t[1], t[2], t[3], t[0]) ^ rk[rounds][1]
    b2 = F1(t[2], t[3], t[0], t[1]) ^ rk[rounds][2]
    b3 = F1(t[3], t[0], t[1], t[2]) ^ rk[rounds][3]

    let encrypted: Array<UInt8> = [
      UInt8(b0 & 0xff), UInt8((b0 >> 8) & 0xff), UInt8((b0 >> 16) & 0xff), UInt8((b0 >> 24) & 0xff),
      UInt8(b1 & 0xff), UInt8((b1 >> 8) & 0xff), UInt8((b1 >> 16) & 0xff), UInt8((b1 >> 24) & 0xff),
      UInt8(b2 & 0xff), UInt8((b2 >> 8) & 0xff), UInt8((b2 >> 16) & 0xff), UInt8((b2 >> 24) & 0xff),
      UInt8(b3 & 0xff), UInt8((b3 >> 8) & 0xff), UInt8((b3 >> 16) & 0xff), UInt8((b3 >> 24) & 0xff)
    ]
    return encrypted
  }
  @usableFromInline
  final internal func decrypt(block: Swift.ArraySlice<Swift.UInt8>) -> Swift.Array<Swift.UInt8>?
  @objc deinit
}
extension InstalibSDKFramework.AES {
  @usableFromInline
  @inline(__always) final internal func F1(_ x0: Swift.UInt32, _ x1: Swift.UInt32, _ x2: Swift.UInt32, _ x3: Swift.UInt32) -> Swift.UInt32
}
extension InstalibSDKFramework.AES : InstalibSDKFramework.Cipher {
  @inlinable final public func encrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8> {
    let blockSize = self.blockMode.customBlockSize ?? AES.blockSize
    let chunks = bytes.batched(by: blockSize)

    var oneTimeCryptor = try makeEncryptor()
    var out = Array<UInt8>(reserveCapacity: bytes.count)
    for chunk in chunks {
      out += try oneTimeCryptor.update(withBytes: chunk, isLast: false)
    }
    // Padding may be added at the very end
    out += try oneTimeCryptor.finish()

    if self.blockMode.options.contains(.paddingRequired) && (out.count % AES.blockSize != 0) {
      throw Error.dataPaddingRequired
    }

    return out
  }
  @inlinable final public func decrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8> {
    if self.blockMode.options.contains(.paddingRequired) && (bytes.count % AES.blockSize != 0) {
      throw Error.dataPaddingRequired
    }

    var oneTimeCryptor = try makeDecryptor()
    let chunks = bytes.batched(by: AES.blockSize)
    if chunks.isEmpty {
      throw Error.invalidData
    }

    var out = Array<UInt8>(reserveCapacity: bytes.count)

    var lastIdx = chunks.startIndex
    chunks.indices.formIndex(&lastIdx, offsetBy: chunks.count - 1)

    // To properly remove padding, `isLast` has to be known when called with the last chunk of ciphertext
    // Last chunk of ciphertext may contains padded data so next call to update(..) won't be able to remove it
    for idx in chunks.indices {
      out += try oneTimeCryptor.update(withBytes: chunks[idx], isLast: idx == lastIdx)
    }
    return out
  }
}
final public class Blowfish {
  public enum Error : Swift.Error {
    case dataPaddingRequired
    case invalidKeyOrInitializationVector
    case invalidInitializationVector
    case invalidBlockMode
    public static func == (a: InstalibSDKFramework.Blowfish.Error, b: InstalibSDKFramework.Blowfish.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let blockSize: Swift.Int
  final public let keySize: Swift.Int
  public init(key: Swift.Array<Swift.UInt8>, blockMode: InstalibSDKFramework.BlockMode = CBC(iv: Array<UInt8>(repeating: 0, count: Blowfish.blockSize)), padding: InstalibSDKFramework.Padding) throws
  @objc deinit
}
extension InstalibSDKFramework.Blowfish : InstalibSDKFramework.Cipher {
  final public func encrypt<C>(_ bytes: C) throws -> Swift.Array<Swift.UInt8> where C : Swift.Collection, C.Element == Swift.UInt8, C.Index == Swift.Int
  final public func decrypt<C>(_ bytes: C) throws -> Swift.Array<Swift.UInt8> where C : Swift.Collection, C.Element == Swift.UInt8, C.Index == Swift.Int
}
extension Foundation.Data {
  public func checksum() -> Swift.UInt16
  public func md5() -> Foundation.Data
  public func sha1() -> Foundation.Data
  public func sha224() -> Foundation.Data
  public func sha256() -> Foundation.Data
  public func sha384() -> Foundation.Data
  public func sha512() -> Foundation.Data
  public func sha3(_ variant: InstalibSDKFramework.SHA3.Variant) -> Foundation.Data
  public func crc32(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Foundation.Data
  public func crc32c(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Foundation.Data
  public func crc16(seed: Swift.UInt16? = nil) -> Foundation.Data
  public func encrypt(cipher: InstalibSDKFramework.Cipher) throws -> Foundation.Data
  public func decrypt(cipher: InstalibSDKFramework.Cipher) throws -> Foundation.Data
  public func authenticate(with authenticator: InstalibSDKFramework.Authenticator) throws -> Foundation.Data
}
extension Foundation.Data {
  public init(hex: Swift.String)
  public var bytes: Swift.Array<Swift.UInt8> {
    get
  }
  public func toHexString() -> Swift.String
}
extension InstalibSDKFramework.AES : InstalibSDKFramework.Cryptors {
  @inlinable final public func makeEncryptor() throws -> InstalibSDKFramework.Cryptor & InstalibSDKFramework.Updatable {
    let blockSize = blockMode.customBlockSize ?? AES.blockSize
    let worker = try blockMode.worker(blockSize: blockSize, cipherOperation: encrypt, encryptionOperation: encrypt)
    if worker is StreamModeWorker {
      return try StreamEncryptor(blockSize: blockSize, padding: padding, worker)
    }
    return try BlockEncryptor(blockSize: blockSize, padding: padding, worker)
  }
  @inlinable final public func makeDecryptor() throws -> InstalibSDKFramework.Cryptor & InstalibSDKFramework.Updatable {
    let blockSize = blockMode.customBlockSize ?? AES.blockSize
    let cipherOperation: CipherOperationOnBlock = blockMode.options.contains(.useEncryptToDecrypt) == true ? encrypt : decrypt
    let worker = try blockMode.worker(blockSize: blockSize, cipherOperation: cipherOperation, encryptionOperation: encrypt)
    if worker is StreamModeWorker {
      return try StreamDecryptor(blockSize: blockSize, padding: padding, worker)
    }
    return try BlockDecryptor(blockSize: blockSize, padding: padding, worker)
  }
}
public class PrivateKey : InstalibSDKFramework.SwiftyKey {
  final public let reference: Security.SecKey
  final public let originalData: Foundation.Data?
  public func pemString() throws -> Swift.String
  required public init(reference: Security.SecKey) throws
  required public init(data: Foundation.Data) throws
  @objc deinit
}
extension Swift.FixedWidthInteger {
  @inlinable internal func bytes(totalBytes: Swift.Int = MemoryLayout<Self>.size) -> Swift.Array<Swift.UInt8> {
    arrayOfBytes(value: self.littleEndian, length: totalBytes)
    // TODO: adjust bytes order
    // var value = self.littleEndian
    // return withUnsafeBytes(of: &value, Array.init).reversed()
  }
}
extension Swift.String {
  public var camelCased: Swift.String {
    get
  }
  public var snakeCased: Swift.String {
    get
  }
  public var beginningWithUppercase: Swift.String {
    get
  }
  public var beginningWithLowercase: Swift.String {
    get
  }
}
@dynamicMemberLookup public enum DynamicResponse : Swift.Equatable {
  case array([InstalibSDKFramework.DynamicResponse])
  case number(Foundation.NSNumber)
  case dictionary([Swift.String : InstalibSDKFramework.DynamicResponse])
  case string(Swift.String)
  case none
  public init(_ object: Any)
  public var beautifiedDescription: Swift.String {
    get
  }
  public var any: Any {
    get
  }
  public var array: [InstalibSDKFramework.DynamicResponse]? {
    get
  }
  public var bool: Swift.Bool? {
    get
  }
  public var dictionary: [Swift.String : InstalibSDKFramework.DynamicResponse]? {
    get
  }
  public var double: Swift.Double? {
    get
  }
  public var int: Swift.Int? {
    get
  }
  public var int64: Swift.Int64? {
    get
  }
  public var string: Swift.String? {
    get
  }
  public var url: Foundation.URL? {
    get
  }
  public subscript(dynamicMember member: Swift.String) -> InstalibSDKFramework.DynamicResponse {
    get
  }
  public subscript(index: Swift.Int) -> InstalibSDKFramework.DynamicResponse {
    get
  }
  public subscript(key: Swift.String) -> InstalibSDKFramework.DynamicResponse {
    get
  }
  public static func == (a: InstalibSDKFramework.DynamicResponse, b: InstalibSDKFramework.DynamicResponse) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class Statement {
  @objc deinit
  final public var columnCount: Swift.Int {
    get
    set
  }
  final public var columnNames: [Swift.String] {
    get
    set
  }
  final public var row: InstalibSDKFramework.Cursor {
    get
    set
  }
  final public func bind(_ values: InstalibSDKFramework.SQLiteBinding?...) -> InstalibSDKFramework.Statement
  final public func bind(_ values: [InstalibSDKFramework.SQLiteBinding?]) -> InstalibSDKFramework.Statement
  final public func bind(_ values: [Swift.String : InstalibSDKFramework.SQLiteBinding?]) -> InstalibSDKFramework.Statement
  @discardableResult
  final public func run(_ bindings: InstalibSDKFramework.SQLiteBinding?...) throws -> InstalibSDKFramework.Statement
  @discardableResult
  final public func run(_ bindings: [InstalibSDKFramework.SQLiteBinding?]) throws -> InstalibSDKFramework.Statement
  @discardableResult
  final public func run(_ bindings: [Swift.String : InstalibSDKFramework.SQLiteBinding?]) throws -> InstalibSDKFramework.Statement
  final public func scalar(_ bindings: InstalibSDKFramework.SQLiteBinding?...) throws -> InstalibSDKFramework.SQLiteBinding?
  final public func scalar(_ bindings: [InstalibSDKFramework.SQLiteBinding?]) throws -> InstalibSDKFramework.SQLiteBinding?
  final public func scalar(_ bindings: [Swift.String : InstalibSDKFramework.SQLiteBinding?]) throws -> InstalibSDKFramework.SQLiteBinding?
  final public func step() throws -> Swift.Bool
}
extension InstalibSDKFramework.Statement : Swift.Sequence {
  final public func makeIterator() -> InstalibSDKFramework.Statement
  public typealias Iterator = InstalibSDKFramework.Statement
}
public protocol FailableIterator : Swift.IteratorProtocol {
  func failableNext() throws -> Self.Element?
}
extension InstalibSDKFramework.FailableIterator {
  public func next() -> Self.Element?
}
extension Swift.Array {
  public init<I>(_ failableIterator: I) throws where Element == I.Element, I : InstalibSDKFramework.FailableIterator
}
extension InstalibSDKFramework.Statement : InstalibSDKFramework.FailableIterator {
  public typealias Element = [InstalibSDKFramework.SQLiteBinding?]
  final public func failableNext() throws -> [InstalibSDKFramework.SQLiteBinding?]?
}
extension InstalibSDKFramework.Statement : Swift.CustomStringConvertible {
  final public var description: Swift.String {
    get
  }
}
public struct Cursor {
  public subscript(idx: Swift.Int) -> Swift.Double {
    get
  }
  public subscript(idx: Swift.Int) -> Swift.Int64 {
    get
  }
  public subscript(idx: Swift.Int) -> Swift.String {
    get
  }
  public subscript(idx: Swift.Int) -> InstalibSDKFramework.Blob {
    get
  }
  public subscript(idx: Swift.Int) -> Swift.Bool {
    get
  }
  public subscript(idx: Swift.Int) -> Swift.Int {
    get
  }
}
extension InstalibSDKFramework.Cursor : Swift.Sequence {
  public subscript(idx: Swift.Int) -> InstalibSDKFramework.SQLiteBinding? {
    get
  }
  public func makeIterator() -> Swift.AnyIterator<InstalibSDKFramework.SQLiteBinding?>
  public typealias Element = InstalibSDKFramework.SQLiteBinding?
  public typealias Iterator = Swift.AnyIterator<InstalibSDKFramework.SQLiteBinding?>
}
public struct Cover : InstalibSDKFramework.CoverIdentifiableParsedResponse {
  public var content: InstalibSDKFramework.Media.Version? {
    get
  }
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public let rawResponse: InstalibSDKFramework.DynamicResponse
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PreviewComment2 : InstalibSDKFramework.IdentifiableParsedResponse {
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public var text: Swift.String {
    get
  }
  public var type: Swift.Int {
    get
  }
  public var userId: Swift.Int64 {
    get
  }
  public var user: InstalibSDKFramework.User? {
    get
  }
  public var createdAt: Foundation.Date {
    get
  }
  public let rawResponse: InstalibSDKFramework.DynamicResponse
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Usertags2 : InstalibSDKFramework.IdentifiableParsedResponse {
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public var user: InstalibSDKFramework.User? {
    get
  }
  public let rawResponse: InstalibSDKFramework.DynamicResponse
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Media : InstalibSDKFramework.IdentifiableParsedResponse {
  public struct Version : Swift.Codable {
    public var url: Foundation.URL
    public var size: CoreGraphics.CGSize
    public var aspectRatio: CoreGraphics.CGFloat {
      get
    }
    public var resolution: CoreGraphics.CGFloat {
      get
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Picture : Swift.Codable {
    public let versions: [InstalibSDKFramework.Media.Version]
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Video : Swift.Codable {
    public let duration: Foundation.TimeInterval
    public let versions: [InstalibSDKFramework.Media.Version]
    public let thumbnails: [InstalibSDKFramework.Media.Version]
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public enum Content : Swift.Codable {
    case picture(InstalibSDKFramework.Media.Picture)
    case video(InstalibSDKFramework.Media.Video)
    case album([InstalibSDKFramework.Media.Content])
    case none
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct IgtvSeriesInfoModel : Swift.Codable {
    public let id: Swift.Int64
    public let title: Swift.String
    public let numEpisodes: Swift.Int
    public init(rawResponse: InstalibSDKFramework.DynamicResponse)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public let rawResponse: InstalibSDKFramework.DynamicResponse
  public var expiringAt: Foundation.Date {
    get
  }
  public var takenAt: Foundation.Date {
    get
  }
  public var size: CoreGraphics.CGSize {
    get
  }
  public var aspectRatio: CoreGraphics.CGFloat {
    get
  }
  public var resolution: CoreGraphics.CGFloat {
    get
  }
  public var userTags: [InstalibSDKFramework.Usertags2] {
    get
  }
  public var previewComments: [InstalibSDKFramework.PreviewComment2] {
    get
  }
  public var caption: InstalibSDKFramework.Comment? {
    get
  }
  public var comments: Swift.Int {
    get
  }
  public var likes: Swift.Int {
    get
  }
  public var videoViewCount: Swift.Int {
    get
  }
  public var shortCode: Swift.String {
    get
  }
  public var takenAtRaw: Swift.Int64 {
    get
  }
  public var type: Swift.String {
    get
  }
  public var mediaType: Swift.Int {
    get
  }
  public var totalViewerCount: Swift.Int {
    get
  }
  public var videoDuration: Swift.Double {
    get
  }
  public var igtvSeriesInfo: InstalibSDKFramework.Media.IgtvSeriesInfoModel? {
    get
  }
  public var content: InstalibSDKFramework.Media.Content {
    get
  }
  public var user: InstalibSDKFramework.User? {
    get
  }
  public var locations: [InstalibSDKFramework.StoryLocation] {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension InstalibSDKFramework.Media.Content {
  public var thumbnails: [[InstalibSDKFramework.Media.Version]] {
    get
  }
  public var sources: [[InstalibSDKFramework.Media.Version]] {
    get
  }
}
extension Swift.Collection where Self.Element : Swift.Collection, Self.Element.Element == InstalibSDKFramework.Media.Version {
  public func with(aspectRatio: CoreGraphics.CGFloat) -> [[InstalibSDKFramework.Media.Version]]
  public var squared: [[InstalibSDKFramework.Media.Version]] {
    get
  }
  public var largest: [InstalibSDKFramework.Media.Version?] {
    get
  }
  public var smallest: [InstalibSDKFramework.Media.Version?] {
    get
  }
}
extension Swift.Collection where Self.Element == InstalibSDKFramework.Media.Version? {
  public var valid: [InstalibSDKFramework.Media.Version] {
    get
  }
}
extension Swift.Collection where Self.Element == InstalibSDKFramework.Media.Version {
  public func with(aspectRatio: CoreGraphics.CGFloat) -> [InstalibSDKFramework.Media.Version]
  public var squared: [InstalibSDKFramework.Media.Version] {
    get
  }
  public var largest: InstalibSDKFramework.Media.Version? {
    get
  }
  public var smallest: InstalibSDKFramework.Media.Version? {
    get
  }
}
public struct IgtvResponseModel : InstalibSDKFramework.ParsedResponse {
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public let rawResponse: InstalibSDKFramework.DynamicResponse
  public var media: [InstalibSDKFramework.Media] {
    get
  }
  public var hasNextPage: Swift.Bool {
    get
  }
  public var maxId: Swift.String {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension InstalibSDKFramework.SchemaType {
  public func drop(ifExists: Swift.Bool = false) -> Swift.String
}
extension InstalibSDKFramework.Table {
  public func create(temporary: Swift.Bool = false, ifNotExists: Swift.Bool = false, withoutRowid: Swift.Bool = false, block: (InstalibSDKFramework.TableBuilder) -> Swift.Void) -> Swift.String
  public func create(_ query: InstalibSDKFramework.QueryType, temporary: Swift.Bool = false, ifNotExists: Swift.Bool = false) -> Swift.String
  public func addColumn<V>(_ name: InstalibSDKFramework.Expression<V>, check: InstalibSDKFramework.Expression<Swift.Bool>? = nil, defaultValue: V) -> Swift.String where V : InstalibSDKFramework.Value
  public func addColumn<V>(_ name: InstalibSDKFramework.Expression<V>, check: InstalibSDKFramework.Expression<Swift.Bool?>, defaultValue: V) -> Swift.String where V : InstalibSDKFramework.Value
  public func addColumn<V>(_ name: InstalibSDKFramework.Expression<V?>, check: InstalibSDKFramework.Expression<Swift.Bool>? = nil, defaultValue: V? = nil) -> Swift.String where V : InstalibSDKFramework.Value
  public func addColumn<V>(_ name: InstalibSDKFramework.Expression<V?>, check: InstalibSDKFramework.Expression<Swift.Bool?>, defaultValue: V? = nil) -> Swift.String where V : InstalibSDKFramework.Value
  public func addColumn<V>(_ name: InstalibSDKFramework.Expression<V>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool>? = nil, references table: InstalibSDKFramework.QueryType, _ other: InstalibSDKFramework.Expression<V>) -> Swift.String where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
  public func addColumn<V>(_ name: InstalibSDKFramework.Expression<V>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool?>, references table: InstalibSDKFramework.QueryType, _ other: InstalibSDKFramework.Expression<V>) -> Swift.String where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
  public func addColumn<V>(_ name: InstalibSDKFramework.Expression<V?>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool>? = nil, references table: InstalibSDKFramework.QueryType, _ other: InstalibSDKFramework.Expression<V>) -> Swift.String where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
  public func addColumn<V>(_ name: InstalibSDKFramework.Expression<V?>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool?>, references table: InstalibSDKFramework.QueryType, _ other: InstalibSDKFramework.Expression<V>) -> Swift.String where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
  public func addColumn<V>(_ name: InstalibSDKFramework.Expression<V>, check: InstalibSDKFramework.Expression<Swift.Bool>? = nil, defaultValue: V, collate: InstalibSDKFramework.Collation) -> Swift.String where V : InstalibSDKFramework.Value, V.Datatype == Swift.String
  public func addColumn<V>(_ name: InstalibSDKFramework.Expression<V>, check: InstalibSDKFramework.Expression<Swift.Bool?>, defaultValue: V, collate: InstalibSDKFramework.Collation) -> Swift.String where V : InstalibSDKFramework.Value, V.Datatype == Swift.String
  public func addColumn<V>(_ name: InstalibSDKFramework.Expression<V?>, check: InstalibSDKFramework.Expression<Swift.Bool>? = nil, defaultValue: V? = nil, collate: InstalibSDKFramework.Collation) -> Swift.String where V : InstalibSDKFramework.Value, V.Datatype == Swift.String
  public func addColumn<V>(_ name: InstalibSDKFramework.Expression<V?>, check: InstalibSDKFramework.Expression<Swift.Bool?>, defaultValue: V? = nil, collate: InstalibSDKFramework.Collation) -> Swift.String where V : InstalibSDKFramework.Value, V.Datatype == Swift.String
  public func rename(_ to: InstalibSDKFramework.Table) -> Swift.String
  public func createIndex(_ columns: InstalibSDKFramework.Expressible..., unique: Swift.Bool = false, ifNotExists: Swift.Bool = false) -> Swift.String
  public func dropIndex(_ columns: InstalibSDKFramework.Expressible..., ifExists: Swift.Bool = false) -> Swift.String
}
extension InstalibSDKFramework.SQLiteView {
  public func create(_ query: InstalibSDKFramework.QueryType, temporary: Swift.Bool = false, ifNotExists: Swift.Bool = false) -> Swift.String
  public func drop(ifExists: Swift.Bool = false) -> Swift.String
}
extension InstalibSDKFramework.VirtualTable {
  public func create(_ using: InstalibSDKFramework.Module, ifNotExists: Swift.Bool = false) -> Swift.String
  public func rename(_ to: InstalibSDKFramework.VirtualTable) -> Swift.String
}
@_hasMissingDesignatedInitializers final public class TableBuilder {
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool>? = nil, defaultValue: InstalibSDKFramework.Expression<V>? = nil) where V : InstalibSDKFramework.Value
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool>? = nil, defaultValue: V) where V : InstalibSDKFramework.Value
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool?>, defaultValue: InstalibSDKFramework.Expression<V>? = nil) where V : InstalibSDKFramework.Value
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool?>, defaultValue: V) where V : InstalibSDKFramework.Value
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V?>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool>? = nil, defaultValue: InstalibSDKFramework.Expression<V>? = nil) where V : InstalibSDKFramework.Value
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V?>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool>? = nil, defaultValue: InstalibSDKFramework.Expression<V?>) where V : InstalibSDKFramework.Value
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V?>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool>? = nil, defaultValue: V) where V : InstalibSDKFramework.Value
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V?>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool?>, defaultValue: InstalibSDKFramework.Expression<V>? = nil) where V : InstalibSDKFramework.Value
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V?>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool?>, defaultValue: InstalibSDKFramework.Expression<V?>) where V : InstalibSDKFramework.Value
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V?>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool?>, defaultValue: V) where V : InstalibSDKFramework.Value
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V>, primaryKey: Swift.Bool, check: InstalibSDKFramework.Expression<Swift.Bool>? = nil, defaultValue: InstalibSDKFramework.Expression<V>? = nil) where V : InstalibSDKFramework.Value
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V>, primaryKey: Swift.Bool, check: InstalibSDKFramework.Expression<Swift.Bool?>, defaultValue: InstalibSDKFramework.Expression<V>? = nil) where V : InstalibSDKFramework.Value
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V>, primaryKey: InstalibSDKFramework.PrimaryKey, check: InstalibSDKFramework.Expression<Swift.Bool>? = nil) where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V>, primaryKey: InstalibSDKFramework.PrimaryKey, check: InstalibSDKFramework.Expression<Swift.Bool?>) where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool>? = nil, references table: InstalibSDKFramework.QueryType, _ other: InstalibSDKFramework.Expression<V>) where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool?>, references table: InstalibSDKFramework.QueryType, _ other: InstalibSDKFramework.Expression<V>) where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V?>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool>? = nil, references table: InstalibSDKFramework.QueryType, _ other: InstalibSDKFramework.Expression<V>) where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V?>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool?>, references table: InstalibSDKFramework.QueryType, _ other: InstalibSDKFramework.Expression<V>) where V : InstalibSDKFramework.Value, V.Datatype == Swift.Int64
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool>? = nil, defaultValue: InstalibSDKFramework.Expression<V>? = nil, collate: InstalibSDKFramework.Collation) where V : InstalibSDKFramework.Value, V.Datatype == Swift.String
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool>? = nil, defaultValue: V, collate: InstalibSDKFramework.Collation) where V : InstalibSDKFramework.Value, V.Datatype == Swift.String
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool?>, defaultValue: InstalibSDKFramework.Expression<V>? = nil, collate: InstalibSDKFramework.Collation) where V : InstalibSDKFramework.Value, V.Datatype == Swift.String
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool?>, defaultValue: V, collate: InstalibSDKFramework.Collation) where V : InstalibSDKFramework.Value, V.Datatype == Swift.String
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V?>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool>? = nil, defaultValue: InstalibSDKFramework.Expression<V>? = nil, collate: InstalibSDKFramework.Collation) where V : InstalibSDKFramework.Value, V.Datatype == Swift.String
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V?>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool>? = nil, defaultValue: InstalibSDKFramework.Expression<V?>, collate: InstalibSDKFramework.Collation) where V : InstalibSDKFramework.Value, V.Datatype == Swift.String
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V?>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool>? = nil, defaultValue: V, collate: InstalibSDKFramework.Collation) where V : InstalibSDKFramework.Value, V.Datatype == Swift.String
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V?>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool?>, defaultValue: InstalibSDKFramework.Expression<V>? = nil, collate: InstalibSDKFramework.Collation) where V : InstalibSDKFramework.Value, V.Datatype == Swift.String
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V?>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool?>, defaultValue: InstalibSDKFramework.Expression<V?>, collate: InstalibSDKFramework.Collation) where V : InstalibSDKFramework.Value, V.Datatype == Swift.String
  final public func column<V>(_ name: InstalibSDKFramework.Expression<V?>, unique: Swift.Bool = false, check: InstalibSDKFramework.Expression<Swift.Bool?>, defaultValue: V, collate: InstalibSDKFramework.Collation) where V : InstalibSDKFramework.Value, V.Datatype == Swift.String
  final public func primaryKey<T>(_ column: InstalibSDKFramework.Expression<T>) where T : InstalibSDKFramework.Value
  final public func primaryKey<T, U>(_ compositeA: InstalibSDKFramework.Expression<T>, _ b: InstalibSDKFramework.Expression<U>) where T : InstalibSDKFramework.Value, U : InstalibSDKFramework.Value
  final public func primaryKey<T, U, V>(_ compositeA: InstalibSDKFramework.Expression<T>, _ b: InstalibSDKFramework.Expression<U>, _ c: InstalibSDKFramework.Expression<V>) where T : InstalibSDKFramework.Value, U : InstalibSDKFramework.Value, V : InstalibSDKFramework.Value
  final public func primaryKey<T, U, V, W>(_ compositeA: InstalibSDKFramework.Expression<T>, _ b: InstalibSDKFramework.Expression<U>, _ c: InstalibSDKFramework.Expression<V>, _ d: InstalibSDKFramework.Expression<W>) where T : InstalibSDKFramework.Value, U : InstalibSDKFramework.Value, V : InstalibSDKFramework.Value, W : InstalibSDKFramework.Value
  final public func unique(_ columns: InstalibSDKFramework.Expressible...)
  final public func unique(_ columns: [InstalibSDKFramework.Expressible])
  final public func check(_ condition: InstalibSDKFramework.Expression<Swift.Bool>)
  final public func check(_ condition: InstalibSDKFramework.Expression<Swift.Bool?>)
  public enum Dependency : Swift.String {
    case noAction
    case restrict
    case setNull
    case setDefault
    case cascade
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  final public func foreignKey<T>(_ column: InstalibSDKFramework.Expression<T>, references table: InstalibSDKFramework.QueryType, _ other: InstalibSDKFramework.Expression<T>, update: InstalibSDKFramework.TableBuilder.Dependency? = nil, delete: InstalibSDKFramework.TableBuilder.Dependency? = nil) where T : InstalibSDKFramework.Value
  final public func foreignKey<T>(_ column: InstalibSDKFramework.Expression<T?>, references table: InstalibSDKFramework.QueryType, _ other: InstalibSDKFramework.Expression<T>, update: InstalibSDKFramework.TableBuilder.Dependency? = nil, delete: InstalibSDKFramework.TableBuilder.Dependency? = nil) where T : InstalibSDKFramework.Value
  final public func foreignKey<T, U>(_ composite: (InstalibSDKFramework.Expression<T>, InstalibSDKFramework.Expression<U>), references table: InstalibSDKFramework.QueryType, _ other: (InstalibSDKFramework.Expression<T>, InstalibSDKFramework.Expression<U>), update: InstalibSDKFramework.TableBuilder.Dependency? = nil, delete: InstalibSDKFramework.TableBuilder.Dependency? = nil) where T : InstalibSDKFramework.Value, U : InstalibSDKFramework.Value
  final public func foreignKey<T, U, V>(_ composite: (InstalibSDKFramework.Expression<T>, InstalibSDKFramework.Expression<U>, InstalibSDKFramework.Expression<V>), references table: InstalibSDKFramework.QueryType, _ other: (InstalibSDKFramework.Expression<T>, InstalibSDKFramework.Expression<U>, InstalibSDKFramework.Expression<V>), update: InstalibSDKFramework.TableBuilder.Dependency? = nil, delete: InstalibSDKFramework.TableBuilder.Dependency? = nil) where T : InstalibSDKFramework.Value, U : InstalibSDKFramework.Value, V : InstalibSDKFramework.Value
  @objc deinit
}
public enum PrimaryKey {
  case `default`
  case autoincrement
  public static func == (a: InstalibSDKFramework.PrimaryKey, b: InstalibSDKFramework.PrimaryKey) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Module {
  public init(_ name: Swift.String, _ arguments: [InstalibSDKFramework.Expressible])
}
extension InstalibSDKFramework.Module : InstalibSDKFramework.Expressible {
  public var expression: InstalibSDKFramework.Expression<Swift.Void> {
    get
  }
}
extension Swift.Array {
  @inlinable internal init(reserveCapacity: Swift.Int) {
    self = Array<Element>()
    self.reserveCapacity(reserveCapacity)
  }
  @inlinable internal var slice: Swift.ArraySlice<Element> {
    get {
    self[self.startIndex ..< self.endIndex]
  }
  }
}
extension Swift.Array where Element == Swift.UInt8 {
  public init(hex: Swift.String)
  public func toHexString() -> Swift.String
}
extension Swift.Array where Element == Swift.UInt8 {
  @available(*, deprecated)
  public func chunks(size chunksize: Swift.Int) -> Swift.Array<Swift.Array<Element>>
  public func md5() -> [Element]
  public func sha1() -> [Element]
  public func sha224() -> [Element]
  public func sha256() -> [Element]
  public func sha384() -> [Element]
  public func sha512() -> [Element]
  public func sha2(_ variant: InstalibSDKFramework.SHA2.Variant) -> [Element]
  public func sha3(_ variant: InstalibSDKFramework.SHA3.Variant) -> [Element]
  public func crc32(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32
  public func crc32c(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32
  public func crc16(seed: Swift.UInt16? = nil) -> Swift.UInt16
  public func encrypt(cipher: InstalibSDKFramework.Cipher) throws -> [Element]
  public func decrypt(cipher: InstalibSDKFramework.Cipher) throws -> [Element]
  public func authenticate<A>(with authenticator: A) throws -> [Element] where A : InstalibSDKFramework.Authenticator
}
public struct StalkerCandidateEntityModel {
  public var userId: Swift.Int64
  public var ownerUserId: Swift.Int64
  public var logDate: Swift.Int64
  public var isSeen: Swift.Bool
  public init(userId: Swift.Int64, ownerUserId: Swift.Int64)
}
public struct StalkerCandidateWithMetadataModel {
  public init()
  public var userMetadataModel: InstalibSDKFramework.InstaUserMetadataModel?
  public var engagedUserModel: InstalibSDKFramework.EngagedUserModel?
  public var stalkerCandidateEntityModel: InstalibSDKFramework.StalkerCandidateEntityModel?
}
public struct PCBC : InstalibSDKFramework.BlockMode {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    public static func == (a: InstalibSDKFramework.PCBC.Error, b: InstalibSDKFramework.PCBC.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let options: InstalibSDKFramework.BlockModeOption
  public let customBlockSize: Swift.Int?
  public init(iv: Swift.Array<Swift.UInt8>)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping InstalibSDKFramework.CipherOperationOnBlock, encryptionOperation: @escaping InstalibSDKFramework.CipherOperationOnBlock) throws -> InstalibSDKFramework.CipherModeWorker
}
final public class ChaCha20 {
  public enum Error : Swift.Error {
    case invalidKeyOrInitializationVector
    case notSupported
    public static func == (a: InstalibSDKFramework.ChaCha20.Error, b: InstalibSDKFramework.ChaCha20.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let blockSize: Swift.Int
  final public let keySize: Swift.Int
  public init(key: Swift.Array<Swift.UInt8>, iv nonce: Swift.Array<Swift.UInt8>) throws
  @objc deinit
}
extension InstalibSDKFramework.ChaCha20 : InstalibSDKFramework.Cipher {
  final public func encrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  final public func decrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
extension InstalibSDKFramework.ChaCha20 {
  public struct ChaChaEncryptor : InstalibSDKFramework.Cryptor, InstalibSDKFramework.Updatable {
    public mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8>
    public func seek(to: Swift.Int) throws
  }
}
extension InstalibSDKFramework.ChaCha20 {
  public struct ChaChaDecryptor : InstalibSDKFramework.Cryptor, InstalibSDKFramework.Updatable {
    public mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = true) throws -> Swift.Array<Swift.UInt8>
    public func seek(to: Swift.Int) throws
  }
}
extension InstalibSDKFramework.ChaCha20 : InstalibSDKFramework.Cryptors {
  final public func makeEncryptor() -> InstalibSDKFramework.Cryptor & InstalibSDKFramework.Updatable
  final public func makeDecryptor() -> InstalibSDKFramework.Cryptor & InstalibSDKFramework.Updatable
}
public struct NotificationEntityModel {
  public var uid: Swift.Int
  public var ownerUserId: Swift.Int64?
  public var type: InstalibSDKFramework.NotificationTypes
  public var createdAt: Swift.Int64?
  public init(ownerUserId: Swift.Int64?, type: InstalibSDKFramework.NotificationTypes)
}
public enum NotificationTypes : Swift.Int {
  public typealias RawValue = Swift.Int
  case none
  case newFollowers
  case lostFollowers
  case blockedFollowers
  case newMediaLikers
  case newMediaComments
  case stalkers
  case storyStalkers
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct HKDF {
  public enum Error : Swift.Error {
    case invalidInput
    case derivedKeyTooLong
    public static func == (a: InstalibSDKFramework.HKDF.Error, b: InstalibSDKFramework.HKDF.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(password: Swift.Array<Swift.UInt8>, salt: Swift.Array<Swift.UInt8>? = nil, info: Swift.Array<Swift.UInt8>? = nil, keyLength: Swift.Int? = nil, variant: InstalibSDKFramework.HMAC.Variant = .sha256) throws
  public func calculate() throws -> Swift.Array<Swift.UInt8>
}
extension Swift.String {
  @inlinable public var bytes: Swift.Array<Swift.UInt8> {
    get {
    data(using: String.Encoding.utf8, allowLossyConversion: true)?.bytes ?? Array(utf8)
  }
  }
  @inlinable public func md5() -> Swift.String {
    self.bytes.md5().toHexString()
  }
  @inlinable public func sha1() -> Swift.String {
    self.bytes.sha1().toHexString()
  }
  @inlinable public func sha224() -> Swift.String {
    self.bytes.sha224().toHexString()
  }
  @inlinable public func sha256() -> Swift.String {
    self.bytes.sha256().toHexString()
  }
  @inlinable public func sha384() -> Swift.String {
    self.bytes.sha384().toHexString()
  }
  @inlinable public func sha512() -> Swift.String {
    self.bytes.sha512().toHexString()
  }
  @inlinable public func sha3(_ variant: InstalibSDKFramework.SHA3.Variant) -> Swift.String {
    self.bytes.sha3(variant).toHexString()
  }
  @inlinable public func crc32(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.String {
    self.bytes.crc32(seed: seed, reflect: reflect).bytes().toHexString()
  }
  @inlinable public func crc32c(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.String {
    self.bytes.crc32c(seed: seed, reflect: reflect).bytes().toHexString()
  }
  @inlinable public func crc16(seed: Swift.UInt16? = nil) -> Swift.String {
    self.bytes.crc16(seed: seed).bytes().toHexString()
  }
  @inlinable public func encrypt(cipher: InstalibSDKFramework.Cipher) throws -> Swift.String {
    try self.bytes.encrypt(cipher: cipher).toHexString()
  }
  @inlinable public func encryptToBase64(cipher: InstalibSDKFramework.Cipher) throws -> Swift.String? {
    try self.bytes.encrypt(cipher: cipher).toBase64()
  }
  @inlinable public func authenticate<A>(with authenticator: A) throws -> Swift.String where A : InstalibSDKFramework.Authenticator {
    try self.bytes.authenticate(with: authenticator).toHexString()
  }
}
public struct UserStoryViewCountModel {
  public init()
  public var userId: Swift.Int64
  public var views: Swift.Int
  public var userName: Swift.String?
  public var fullName: Swift.String?
  public var profilePictureUrl: Swift.String?
  public var isPrivate: Swift.Bool?
  public var isVerified: Swift.Bool?
  public var userMetadataModel: InstalibSDKFramework.InstaUserMetadataModel?
  public var engagedUserModel: InstalibSDKFramework.EngagedUserModel?
}
public struct MediaDeletedUserModel {
  public init()
  public var mediaId: Swift.String?
  public var mediaModel: InstalibSDKFramework.MediaModel?
  public var createdAt: Swift.Int64?
  public var commentText: Swift.String?
  public var userMetadataModel: InstalibSDKFramework.InstaUserMetadataModel?
  public var engagedUserModel: InstalibSDKFramework.EngagedUserModel?
}
public class PublicKey : InstalibSDKFramework.SwiftyKey {
  final public let reference: Security.SecKey
  final public let originalData: Foundation.Data?
  public func pemString() throws -> Swift.String
  required public init(reference: Security.SecKey) throws
  required public init(data: Foundation.Data) throws
  public static func publicKeys(pemEncoded pemString: Swift.String) -> [InstalibSDKFramework.PublicKey]
  @objc deinit
}
extension Foundation.Date : InstalibSDKFramework.Value {
  public static var declaredDatatype: Swift.String {
    get
  }
  public static func fromDatatypeValue(_ stringValue: Swift.String) -> Foundation.Date
  public var datatypeValue: Swift.String {
    get
  }
  public typealias Datatype = Swift.String
  public typealias ValueType = Foundation.Date
}
public var dateFormatter: Foundation.DateFormatter
@_hasMissingDesignatedInitializers public class DateFunctions {
  public static func date(_ timestring: Swift.String, _ modifiers: Swift.String...) -> InstalibSDKFramework.Expression<Foundation.Date?>
  public static func time(_ timestring: Swift.String, _ modifiers: Swift.String...) -> InstalibSDKFramework.Expression<Foundation.Date?>
  public static func datetime(_ timestring: Swift.String, _ modifiers: Swift.String...) -> InstalibSDKFramework.Expression<Foundation.Date?>
  public static func julianday(_ timestring: Swift.String, _ modifiers: Swift.String...) -> InstalibSDKFramework.Expression<Foundation.Date?>
  public static func strftime(_ format: Swift.String, _ timestring: Swift.String, _ modifiers: Swift.String...) -> InstalibSDKFramework.Expression<Foundation.Date?>
  @objc deinit
}
extension Foundation.Date {
  public var date: InstalibSDKFramework.Expression<Foundation.Date?> {
    get
  }
  public var time: InstalibSDKFramework.Expression<Foundation.Date?> {
    get
  }
  public var datetime: InstalibSDKFramework.Expression<Foundation.Date?> {
    get
  }
  public var julianday: InstalibSDKFramework.Expression<Foundation.Date?> {
    get
  }
}
extension InstalibSDKFramework.Expression where Datatype == Foundation.Date {
  public var date: InstalibSDKFramework.Expression<Foundation.Date> {
    get
  }
  public var time: InstalibSDKFramework.Expression<Foundation.Date> {
    get
  }
  public var datetime: InstalibSDKFramework.Expression<Foundation.Date> {
    get
  }
  public var julianday: InstalibSDKFramework.Expression<Foundation.Date> {
    get
  }
}
public class Signature {
  public enum DigestType {
    case sha1
    case sha224
    case sha256
    case sha384
    case sha512
    public static func == (a: InstalibSDKFramework.Signature.DigestType, b: InstalibSDKFramework.Signature.DigestType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let data: Foundation.Data
  public init(data: Foundation.Data)
  convenience public init(base64Encoded base64String: Swift.String) throws
  public var base64String: Swift.String {
    get
  }
  @objc deinit
}
public enum DynamicRequest : Swift.Equatable {
  case array([InstalibSDKFramework.DynamicRequest])
  case number(Foundation.NSNumber)
  case dictionary([Swift.String : InstalibSDKFramework.DynamicRequest])
  case string(Swift.String)
  case none
  public init(_ object: Any)
  public var any: Any {
    get
  }
  public static func == (a: InstalibSDKFramework.DynamicRequest, b: InstalibSDKFramework.DynamicRequest) -> Swift.Bool
}
extension InstalibSDKFramework.DynamicRequest : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Any...)
  public typealias ArrayLiteralElement = Any
}
extension InstalibSDKFramework.DynamicRequest : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.BooleanLiteralType)
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
extension InstalibSDKFramework.DynamicRequest : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Any)...)
  public typealias Key = Swift.String
  public typealias Value = Any
}
extension InstalibSDKFramework.DynamicRequest : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.FloatLiteralType)
  public typealias FloatLiteralType = Swift.FloatLiteralType
}
extension InstalibSDKFramework.DynamicRequest : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension InstalibSDKFramework.DynamicRequest : Swift.ExpressibleByNilLiteral {
  public init(nilLiteral: ())
}
extension InstalibSDKFramework.DynamicRequest : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
public protocol SwiftyRSAMessage {
  var data: Foundation.Data { get }
  var base64String: Swift.String { get }
  init(data: Foundation.Data)
  init(base64Encoded base64String: Swift.String) throws
}
extension InstalibSDKFramework.SwiftyRSAMessage {
  public var base64String: Swift.String {
    get
  }
  public init(base64Encoded base64String: Swift.String) throws
}
extension InstalibSDKFramework.HMAC {
  convenience public init(key: Swift.String, variant: InstalibSDKFramework.HMAC.Variant = .md5) throws
}
public struct StoryLocation : InstalibSDKFramework.IdentifiableParsedResponse {
  public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
  public let rawResponse: InstalibSDKFramework.DynamicResponse
  public var identity: InstalibSDKFramework.Identifier<InstalibSDKFramework.StoryLocation> {
    get
  }
  public var address: Swift.String? {
    get
  }
  public var city: Swift.String? {
    get
  }
  public var coordinates: CoreGraphics.CGPoint {
    get
  }
  public var name: Swift.String {
    get
  }
  public var shortName: Swift.String {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol ParsedResponse : Swift.Decodable, Swift.Encodable {
  var rawResponse: InstalibSDKFramework.DynamicResponse { get }
  init?(rawResponse: InstalibSDKFramework.DynamicResponse)
}
public struct Identifier<Element> : Swift.Hashable {
  public var primaryKey: Swift.Int?
  public var identifier: Swift.String?
  public init(primaryKey: Swift.Int? = nil, identifier: Swift.String? = nil)
  public func primaryKey(_ primaryKey: Swift.Int) -> InstalibSDKFramework.Identifier<Element>
  public func identifier(_ identifier: Swift.String) -> InstalibSDKFramework.Identifier<Element>
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InstalibSDKFramework.Identifier<Element>, b: InstalibSDKFramework.Identifier<Element>) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol IdentifiableParsedResponse : InstalibSDKFramework.ParsedResponse {
  var identity: Self.Identity { get }
}
extension InstalibSDKFramework.IdentifiableParsedResponse {
  public typealias Identity = InstalibSDKFramework.Identifier<Self>
  public var identity: InstalibSDKFramework.Identifier<Self> {
    get
  }
}
public protocol UserIdentifiableParsedResponse : InstalibSDKFramework.ParsedResponse {
  var userIdentity: InstalibSDKFramework.Identifier<InstalibSDKFramework.User> { get }
}
extension InstalibSDKFramework.UserIdentifiableParsedResponse {
  public var userIdentity: InstalibSDKFramework.Identifier<InstalibSDKFramework.User> {
    get
  }
}
public protocol ThreadIdentifiableParsedResponse : InstalibSDKFramework.ParsedResponse {
  var threadIdentifier: InstalibSDKFramework.Identifier<InstalibSDKFramework.Thread> { get }
}
extension InstalibSDKFramework.ThreadIdentifiableParsedResponse {
  public var threadIdentifier: InstalibSDKFramework.Identifier<InstalibSDKFramework.Thread> {
    get
  }
  public var viewerIdentifier: InstalibSDKFramework.Identifier<InstalibSDKFramework.User> {
    get
  }
}
public protocol ItemIdentifiableParsedResponse : InstalibSDKFramework.ParsedResponse {
  var itemIdentifier: InstalibSDKFramework.Identifier<InstalibSDKFramework.Message> { get }
}
extension InstalibSDKFramework.ItemIdentifiableParsedResponse {
  public var itemIdentifier: InstalibSDKFramework.Identifier<InstalibSDKFramework.Message> {
    get
  }
}
public protocol CoverIdentifiableParsedResponse : InstalibSDKFramework.ParsedResponse {
  var mediaIdentifier: InstalibSDKFramework.Identifier<InstalibSDKFramework.Media> { get }
}
extension InstalibSDKFramework.CoverIdentifiableParsedResponse {
  public var mediaIdentifier: InstalibSDKFramework.Identifier<InstalibSDKFramework.Media> {
    get
  }
}
extension InstalibSDKFramework.Module {
  public static func FTS4(_ column: InstalibSDKFramework.Expressible, _ more: InstalibSDKFramework.Expressible...) -> InstalibSDKFramework.Module
  public static func FTS4(_ columns: [InstalibSDKFramework.Expressible] = [], tokenize tokenizer: InstalibSDKFramework.Tokenizer? = nil) -> InstalibSDKFramework.Module
  public static func FTS4(_ config: InstalibSDKFramework.FTS4Config) -> InstalibSDKFramework.Module
}
extension InstalibSDKFramework.VirtualTable {
  public func match(_ pattern: Swift.String) -> InstalibSDKFramework.Expression<Swift.Bool>
  public func match(_ pattern: InstalibSDKFramework.Expression<Swift.String>) -> InstalibSDKFramework.Expression<Swift.Bool>
  public func match(_ pattern: InstalibSDKFramework.Expression<Swift.String?>) -> InstalibSDKFramework.Expression<Swift.Bool?>
  public func match(_ pattern: Swift.String) -> InstalibSDKFramework.QueryType
  public func match(_ pattern: InstalibSDKFramework.Expression<Swift.String>) -> InstalibSDKFramework.QueryType
  public func match(_ pattern: InstalibSDKFramework.Expression<Swift.String?>) -> InstalibSDKFramework.QueryType
}
public struct Tokenizer {
  public static let Simple: InstalibSDKFramework.Tokenizer
  public static let Porter: InstalibSDKFramework.Tokenizer
  public static func Unicode61(removeDiacritics: Swift.Bool? = nil, tokenchars: Swift.Set<Swift.Character> = [], separators: Swift.Set<Swift.Character> = []) -> InstalibSDKFramework.Tokenizer
  public static func Custom(_ name: Swift.String) -> InstalibSDKFramework.Tokenizer
  public let name: Swift.String
  public let arguments: [Swift.String]
}
extension InstalibSDKFramework.Tokenizer : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension InstalibSDKFramework.Connection {
  final public func registerTokenizer(_ submoduleName: Swift.String, next: @escaping (Swift.String) -> (Swift.String, Swift.Range<Swift.String.Index>)?) throws
}
@_hasMissingDesignatedInitializers open class FTSConfig {
  public enum ColumnOption {
    case unindexed
    public static func == (a: InstalibSDKFramework.FTSConfig.ColumnOption, b: InstalibSDKFramework.FTSConfig.ColumnOption) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @discardableResult
  open func column(_ column: InstalibSDKFramework.Expressible, _ options: [InstalibSDKFramework.FTSConfig.ColumnOption] = []) -> Self
  @discardableResult
  open func columns(_ columns: [InstalibSDKFramework.Expressible]) -> Self
  open func tokenizer(_ tokenizer: InstalibSDKFramework.Tokenizer?) -> Self
  open func prefix(_ prefix: [Swift.Int]) -> Self
  open func externalContent(_ schema: InstalibSDKFramework.SchemaType) -> Self
  open func contentless() -> Self
  @objc deinit
}
@_inheritsConvenienceInitializers open class FTS4Config : InstalibSDKFramework.FTSConfig {
  public enum MatchInfo : Swift.CustomStringConvertible {
    case fts3
    public var description: Swift.String {
      get
    }
    public static func == (a: InstalibSDKFramework.FTS4Config.MatchInfo, b: InstalibSDKFramework.FTS4Config.MatchInfo) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Order : Swift.CustomStringConvertible {
    case asc
    case desc
    public var description: Swift.String {
      get
    }
    public static func == (a: InstalibSDKFramework.FTS4Config.Order, b: InstalibSDKFramework.FTS4Config.Order) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init()
  open func compress(_ functionName: Swift.String) -> Self
  open func uncompress(_ functionName: Swift.String) -> Self
  open func languageId(_ columnName: Swift.String) -> Self
  open func matchInfo(_ matchInfo: InstalibSDKFramework.FTS4Config.MatchInfo) -> Self
  open func order(_ order: InstalibSDKFramework.FTS4Config.Order) -> Self
  @objc deinit
}
public struct SuggestedUserModel {
  public init()
  public var userId: Swift.Int64?
  public var ownerUserId: Swift.Int64
  public var userName: Swift.String?
  public var fullName: Swift.String?
  public var profilePictureUrl: Swift.String?
  public var isNewSuggestion: Swift.Bool
  public var logDate: Swift.Int64
}
extension InstalibSDKFramework.PKCS5 {
  public struct PBKDF1 {
    public enum Error : Swift.Error {
      case invalidInput
      case derivedKeyTooLong
      public static func == (a: InstalibSDKFramework.PKCS5.PBKDF1.Error, b: InstalibSDKFramework.PKCS5.PBKDF1.Error) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum Variant {
      case md5, sha1
      @usableFromInline
      internal var size: Swift.Int {
        get
      }
      @usableFromInline
      internal func calculateHash(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
      public static func == (a: InstalibSDKFramework.PKCS5.PBKDF1.Variant, b: InstalibSDKFramework.PKCS5.PBKDF1.Variant) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @usableFromInline
    internal let iterations: Swift.Int
    @usableFromInline
    internal let variant: InstalibSDKFramework.PKCS5.PBKDF1.Variant
    @usableFromInline
    internal let keyLength: Swift.Int
    @usableFromInline
    internal let t1: Swift.Array<Swift.UInt8>
    public init(password: Swift.Array<Swift.UInt8>, salt: Swift.Array<Swift.UInt8>, variant: InstalibSDKFramework.PKCS5.PBKDF1.Variant = .sha1, iterations: Swift.Int = 4096, keyLength: Swift.Int? = nil) throws
    @inlinable public func calculate() -> Swift.Array<Swift.UInt8> {
      var t = self.t1
      for _ in 2...self.iterations {
        t = self.variant.calculateHash(t)
      }
      return Array(t[0..<self.keyLength])
    }
  }
}
public protocol EndpointRepresentable {
  var representation: InstalibSDKFramework.LosselessEndpointRepresentable { get }
}
extension InstalibSDKFramework.EndpointRepresentable {
  public func url() throws -> Foundation.URL
  public func user(_ userPk: Swift.Int) -> InstalibSDKFramework.EndpointRepresentable!
  public func user(_ username: Swift.String) -> InstalibSDKFramework.EndpointRepresentable!
  public func media(_ mediaId: Swift.String) -> InstalibSDKFramework.EndpointRepresentable!
  public func upload(_ uploadId: Swift.String) -> InstalibSDKFramework.EndpointRepresentable!
  public func comment(_ commentId: Swift.String) -> InstalibSDKFramework.EndpointRepresentable
  public func thread(_ threadId: Swift.String) -> InstalibSDKFramework.EndpointRepresentable!
  public func tag(_ tagId: Swift.String) -> InstalibSDKFramework.EndpointRepresentable!
  public func apiPath(_ apiPath: Swift.String) -> InstalibSDKFramework.EndpointRepresentable!
  public func bloksAction(_ bloksAction: Swift.String) -> InstalibSDKFramework.EndpointRepresentable!
  public func next(_ maxId: Swift.String?) -> InstalibSDKFramework.EndpointRepresentable!
  public func rank(_ token: Swift.String) -> InstalibSDKFramework.EndpointRepresentable!
  public func type(_ mediaType: InstalibSDKFramework.MediaType) -> InstalibSDKFramework.EndpointRepresentable!
  public func q(_ query: Swift.String) -> InstalibSDKFramework.EndpointRepresentable!
  public func query(_ query: Swift.String?) -> InstalibSDKFramework.EndpointRepresentable!
  public func deviceId(_ deviceId: Swift.String) -> InstalibSDKFramework.EndpointRepresentable!
  public func challenge(_ context: Swift.String) -> InstalibSDKFramework.EndpointRepresentable!
  public func cursor(_ cursor: Swift.String) -> InstalibSDKFramework.EndpointRepresentable!
  public func appending(_ path: Swift.String) -> InstalibSDKFramework.EndpointRepresentable!
}
public protocol LosselessEndpointRepresentable : InstalibSDKFramework.EndpointRepresentable, Swift.CustomStringConvertible {
  var components: Foundation.URLComponents? { get }
  var placeholders: [Swift.String]? { get }
  func filling(_ placeholder: Swift.String, with string: Swift.String) -> InstalibSDKFramework.LosselessEndpointRepresentable!
  func query<L>(_ items: [Swift.String : L]) -> InstalibSDKFramework.LosselessEndpointRepresentable! where L : Swift.LosslessStringConvertible
  func appending(_ path: Swift.String) -> InstalibSDKFramework.LosselessEndpointRepresentable!
}
extension InstalibSDKFramework.LosselessEndpointRepresentable {
  public var representation: InstalibSDKFramework.LosselessEndpointRepresentable {
    get
  }
}
public protocol RawEndpointRepresentable : InstalibSDKFramework.EndpointRepresentable, Swift.RawRepresentable where Self.RawValue : InstalibSDKFramework.LosselessEndpointRepresentable {
}
extension InstalibSDKFramework.RawEndpointRepresentable {
  public var representation: InstalibSDKFramework.LosselessEndpointRepresentable {
    get
  }
}
public typealias Image = UIKit.UIImage
public enum Upload {
  public struct Picture {
    public var image: InstalibSDKFramework.Image
    public var caption: Swift.String
    public var disableComments: Swift.Bool
    public var size: CoreGraphics.CGSize
    public init(image: InstalibSDKFramework.Image, caption: Swift.String, disableComments: Swift.Bool, size: CoreGraphics.CGSize)
  }
  public struct Album {
    public var images: [InstalibSDKFramework.Image]
    public var caption: Swift.String
    public var disableComments: Swift.Bool
    public init(images: [InstalibSDKFramework.Image], caption: Swift.String, disableComments: Swift.Bool)
  }
  public struct Video {
    public var thumbnail: InstalibSDKFramework.Image
    public var data: Foundation.Data
    public var caption: Swift.String
    public var isAudioMuted: Swift.Bool
    public var size: CoreGraphics.CGSize
    public var disableComments: Swift.Bool
    public init(thumbnail: InstalibSDKFramework.Image, data: Foundation.Data, caption: Swift.String, isAudioMuted: Swift.Bool, size: CoreGraphics.CGSize, disableComments: Swift.Bool)
  }
  case picture(InstalibSDKFramework.Upload.Picture)
  case video(InstalibSDKFramework.Upload.Video)
}
extension InstalibSDKFramework.User {
  public struct Tag : Swift.Codable {
    public let userId: Swift.Int
    public let position: CoreGraphics.CGPoint
    public init(userId: Swift.Int, position: CoreGraphics.CGPoint)
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct Tags : Swift.Codable {
    public let adding: [InstalibSDKFramework.User.Tag]
    public let removing: [Swift.Int]
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
public struct CTR {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    public static func == (a: InstalibSDKFramework.CTR.Error, b: InstalibSDKFramework.CTR.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let options: InstalibSDKFramework.BlockModeOption
  public let customBlockSize: Swift.Int?
  public init(iv: Swift.Array<Swift.UInt8>, counter: Swift.Int = 0)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping InstalibSDKFramework.CipherOperationOnBlock, encryptionOperation: @escaping InstalibSDKFramework.CipherOperationOnBlock) throws -> InstalibSDKFramework.CipherModeWorker
}
public struct Authentication {
  public enum Request {
    case user(InstalibSDKFramework.Credentials)
    @available(iOS 11, macOS 10.13, macCatalyst 13, *)
    case webView(InstalibSDKFramework.LoginWebView)
    case cache(InstalibSDKFramework.Authentication.Response)
  }
  public struct Response : Swift.Codable {
    public init(device: InstalibSDKFramework.Device, storage: InstalibSDKFramework.Authentication.Storage, data: [Foundation.Data])
    public var device: InstalibSDKFramework.Device
    public var identifier: Swift.String? {
      get
    }
    public var user: InstalibSDKFramework.User? {
      get
    }
    public func persist(withAccess access: InstalibSDKFramework.KeychainSwiftAccessOptions? = nil) -> Swift.String?
    public static func persisted(with key: Swift.String) -> InstalibSDKFramework.Authentication.Response?
    @discardableResult
    public static func invalidate(persistedWithKey key: Swift.String) -> Swift.Bool
    @discardableResult
    public func invalidate() -> Swift.Bool
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Storage : Swift.Codable {
    public var dsUserId: Swift.String
    public var csrfToken: Swift.String
    public var sessionId: Swift.String
    public var rankToken: Swift.String
    public var user: InstalibSDKFramework.User?
    public init(dsUserId: Swift.String, csrfToken: Swift.String, sessionId: Swift.String, rankToken: Swift.String, user: InstalibSDKFramework.User?)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
public class ClearMessage : InstalibSDKFramework.SwiftyRSAMessage {
  final public let data: Foundation.Data
  required public init(data: Foundation.Data)
  convenience public init(string: Swift.String, using encoding: Swift.String.Encoding) throws
  public func string(encoding: Swift.String.Encoding) throws -> Swift.String
  public func encrypted(with key: InstalibSDKFramework.PublicKey, padding: InstalibSDKFramework.SwiftyRSAPadding) throws -> InstalibSDKFramework.EncryptedMessage
  public func signed(with key: InstalibSDKFramework.PrivateKey, digestType: InstalibSDKFramework.Signature.DigestType) throws -> InstalibSDKFramework.Signature
  public func verify(with key: InstalibSDKFramework.PublicKey, signature: InstalibSDKFramework.Signature, digestType: InstalibSDKFramework.Signature.DigestType) throws -> Swift.Bool
  @objc deinit
}
public struct UserDashboardDetailView {
  public init()
  public var followingNotFollowCount: Swift.Int
  public var followingFollowCount: Swift.Int
  public var followerNotFollow: Swift.Int
  public var newFollowerCount: Swift.Int
  public var lostFollowerCount: Swift.Int
  public var blockFollowerCount: Swift.Int
  public var blockedByMeFollowerCount: Swift.Int
  public var closedAccountsCount: Swift.Int
  public var totalLikeCount: Swift.Int
  public var totalCommentCount: Swift.Int
  public var totalMediaCount: Swift.Int
  public var totalVideoCount: Swift.Int
  public var totalPhotoCount: Swift.Int
  public var totalStoryCount: Swift.Int
  public var followingCount: Swift.Int
  public var followerCount: Swift.Int
  public var totalTagDeleteCount: Swift.Int
  public var totalCommentDeleteCount: Swift.Int
  public var totalLikeDeleteCount: Swift.Int
}
extension InstalibSDKFramework.Module {
  public static func FTS5(_ config: InstalibSDKFramework.FTS5Config) -> InstalibSDKFramework.Module
}
@_inheritsConvenienceInitializers open class FTS5Config : InstalibSDKFramework.FTSConfig {
  public enum Detail : Swift.CustomStringConvertible {
    case full
    case column
    case none
    public var description: Swift.String {
      get
    }
    public static func == (a: InstalibSDKFramework.FTS5Config.Detail, b: InstalibSDKFramework.FTS5Config.Detail) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init()
  open func contentRowId(_ column: InstalibSDKFramework.Expressible) -> Self
  open func columnSize(_ size: Swift.Int) -> Self
  open func detail(_ detail: InstalibSDKFramework.FTS5Config.Detail) -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers open class MediaDao {
  @objc deinit
}
@usableFromInline
final internal class StreamDecryptor : InstalibSDKFramework.Cryptor, InstalibSDKFramework.Updatable {
  @usableFromInline
  final internal let blockSize: Swift.Int
  @usableFromInline
  final internal var worker: InstalibSDKFramework.CipherModeWorker
  @usableFromInline
  final internal let padding: InstalibSDKFramework.Padding
  @usableFromInline
  final internal var accumulated: [Swift.UInt8]
  @usableFromInline
  final internal var lastBlockRemainder: Swift.Int
  @usableFromInline
  internal init(blockSize: Swift.Int, padding: InstalibSDKFramework.Padding, _ worker: InstalibSDKFramework.CipherModeWorker) throws
  @inlinable final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool) throws -> Swift.Array<Swift.UInt8> {
    self.accumulated += bytes

    let toProcess = self.accumulated.prefix(max(self.accumulated.count - self.worker.additionalBufferSize, 0))

    if var finalizingWorker = worker as? FinalizingDecryptModeWorker, isLast == true {
      // will truncate suffix if needed
      try finalizingWorker.willDecryptLast(bytes: self.accumulated.slice)
    }

    var processedBytesCount = 0
    var plaintext = Array<UInt8>(reserveCapacity: bytes.count + self.worker.additionalBufferSize)
    for chunk in toProcess.batched(by: self.blockSize) {
      plaintext += self.worker.decrypt(block: chunk)
      processedBytesCount += chunk.count
    }

    if var finalizingWorker = worker as? FinalizingDecryptModeWorker, isLast == true {
      plaintext = Array(try finalizingWorker.didDecryptLast(bytes: plaintext.slice))
    }

    // omit unecessary calculation if not needed
    if self.padding != .noPadding {
      self.lastBlockRemainder = plaintext.count.quotientAndRemainder(dividingBy: self.blockSize).remainder
    }

    if isLast {
      // CTR doesn't need padding. Really. Add padding to the last block if really want. but... don't.
      plaintext = self.padding.remove(from: plaintext, blockSize: self.blockSize - self.lastBlockRemainder)
    }

    self.accumulated.removeFirst(processedBytesCount) // super-slow

    if var finalizingWorker = worker as? FinalizingDecryptModeWorker, isLast == true {
      plaintext = Array(try finalizingWorker.finalize(decrypt: plaintext.slice))
    }

    return plaintext
  }
  @inlinable final public func seek(to position: Swift.Int) throws {
    guard var worker = self.worker as? SeekableModeWorker else {
      fatalError("Not supported")
    }

    try worker.seek(to: position)
    self.worker = worker
  }
  @objc @usableFromInline
  deinit
}
final public class Poly1305 : InstalibSDKFramework.Authenticator {
  public enum Error : Swift.Error {
    case authenticateError
    public static func == (a: InstalibSDKFramework.Poly1305.Error, b: InstalibSDKFramework.Poly1305.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let blockSize: Swift.Int
  public init(key: Swift.Array<Swift.UInt8>)
  final public func authenticate(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  @objc deinit
}
public enum PKCS5 {
}
final public class Connection {
  public enum Location {
    case inMemory
    case temporary
    case uri(Swift.String)
  }
  public enum Operation {
    case insert
    case update
    case delete
    public static func == (a: InstalibSDKFramework.Connection.Operation, b: InstalibSDKFramework.Connection.Operation) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public var handle: Swift.OpaquePointer {
    get
  }
  public init(_ location: InstalibSDKFramework.Connection.Location = .inMemory, readonly: Swift.Bool = false) throws
  convenience public init(_ filename: Swift.String, readonly: Swift.Bool = false) throws
  @objc deinit
  final public var readonly: Swift.Bool {
    get
  }
  final public var lastInsertRowid: Swift.Int64 {
    get
  }
  final public var changes: Swift.Int {
    get
  }
  final public var totalChanges: Swift.Int {
    get
  }
  final public func execute(_ SQL: Swift.String) throws
  final public func prepare(_ statement: Swift.String, _ bindings: InstalibSDKFramework.SQLiteBinding?...) throws -> InstalibSDKFramework.Statement
  final public func prepare(_ statement: Swift.String, _ bindings: [InstalibSDKFramework.SQLiteBinding?]) throws -> InstalibSDKFramework.Statement
  final public func prepare(_ statement: Swift.String, _ bindings: [Swift.String : InstalibSDKFramework.SQLiteBinding?]) throws -> InstalibSDKFramework.Statement
  @discardableResult
  final public func run(_ statement: Swift.String, _ bindings: InstalibSDKFramework.SQLiteBinding?...) throws -> InstalibSDKFramework.Statement
  @discardableResult
  final public func run(_ statement: Swift.String, _ bindings: [InstalibSDKFramework.SQLiteBinding?]) throws -> InstalibSDKFramework.Statement
  @discardableResult
  final public func run(_ statement: Swift.String, _ bindings: [Swift.String : InstalibSDKFramework.SQLiteBinding?]) throws -> InstalibSDKFramework.Statement
  final public func scalar(_ statement: Swift.String, _ bindings: InstalibSDKFramework.SQLiteBinding?...) throws -> InstalibSDKFramework.SQLiteBinding?
  final public func scalar(_ statement: Swift.String, _ bindings: [InstalibSDKFramework.SQLiteBinding?]) throws -> InstalibSDKFramework.SQLiteBinding?
  final public func scalar(_ statement: Swift.String, _ bindings: [Swift.String : InstalibSDKFramework.SQLiteBinding?]) throws -> InstalibSDKFramework.SQLiteBinding?
  public enum TransactionMode : Swift.String {
    case deferred
    case immediate
    case exclusive
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  final public func transaction(_ mode: InstalibSDKFramework.Connection.TransactionMode = .deferred, block: () throws -> Swift.Void) throws
  final public func savepoint(_ name: Swift.String = UUID().uuidString, block: () throws -> Swift.Void) throws
  final public func interrupt()
  final public var busyTimeout: Swift.Double {
    get
    set
  }
  final public func busyHandler(_ callback: ((_ tries: Swift.Int) -> Swift.Bool)?)
  final public func trace(_ callback: ((Swift.String) -> Swift.Void)?)
  final public func updateHook(_ callback: ((_ operation: InstalibSDKFramework.Connection.Operation, _ db: Swift.String, _ table: Swift.String, _ rowid: Swift.Int64) -> Swift.Void)?)
  final public func commitHook(_ callback: (() throws -> Swift.Void)?)
  final public func rollbackHook(_ callback: (() -> Swift.Void)?)
  final public func createFunction(_ function: Swift.String, argumentCount: Swift.UInt? = nil, deterministic: Swift.Bool = false, _ block: @escaping (_ args: [InstalibSDKFramework.SQLiteBinding?]) -> InstalibSDKFramework.SQLiteBinding?)
  final public func createCollation(_ collation: Swift.String, _ block: @escaping (_ lhs: Swift.String, _ rhs: Swift.String) -> Foundation.ComparisonResult) throws
}
extension InstalibSDKFramework.Connection : Swift.CustomStringConvertible {
  final public var description: Swift.String {
    get
  }
}
extension InstalibSDKFramework.Connection.Location : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public enum SqliteResult : Swift.Error {
  case error(message: Swift.String, code: Swift.Int32, statement: InstalibSDKFramework.Statement?)
}
extension InstalibSDKFramework.SqliteResult : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension InstalibSDKFramework.Rabbit {
  convenience public init(key: Swift.String) throws
  convenience public init(key: Swift.String, iv: Swift.String) throws
}
final public class Rabbit {
  public enum Error : Swift.Error {
    case invalidKeyOrInitializationVector
    public static func == (a: InstalibSDKFramework.Rabbit.Error, b: InstalibSDKFramework.Rabbit.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let ivSize: Swift.Int
  public static let keySize: Swift.Int
  public static let blockSize: Swift.Int
  final public var keySize: Swift.Int {
    get
  }
  convenience public init(key: Swift.Array<Swift.UInt8>) throws
  public init(key: Swift.Array<Swift.UInt8>, iv: Swift.Array<Swift.UInt8>?) throws
  @objc deinit
}
extension InstalibSDKFramework.Rabbit : InstalibSDKFramework.Cipher {
  final public func encrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  final public func decrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
public struct ConfigureStoryUploadModel : Swift.Codable {
  public var uuid: Swift.String
  public var uid: Swift.String
  public var csrfToken: Swift.String
  public var sourceType: Swift.String
  public var caption: Swift.String
  public var uploadId: Swift.String
  public var disableComments: Swift.Bool
  public var configureMode: Swift.Int
  public var cameraPosition: Swift.String
  public init(uuid: Swift.String, uid: Swift.String, csrfToken: Swift.String, sourceType: Swift.String, caption: Swift.String, uploadId: Swift.String, disableComments: Swift.Bool, configureMode: Swift.Int, cameraPosition: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SeenStory : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct EngagedUserModel {
  public init()
  public var userId: Swift.Int64
  public var ownerUserId: Swift.Int64
  public var isYouFollowing: Swift.Bool
  public var isFollower: Swift.Bool
  public var likedPostsCount: Swift.Int
  public var commentedPostsCount: Swift.Int
  public var storiesWatchedCount: Swift.Int
  public var youLikedPostsCount: Swift.Int
  public var youCommentedPostsCount: Swift.Int
  public var taggedPostsCount: Swift.Int
  public var taggedYouPostsCount: Swift.Int
  public var isBlockMe: Swift.Bool
  public var isYouUnfollow: Swift.Bool
  public var isUnfollower: Swift.Bool
  public var isNewFollower: Swift.Bool
  public var isBestFriend: Swift.Bool
  public var isBlockedByMe: Swift.Bool
  public var lastFollowStatChageDate: Swift.Int64
  public var followerIndex: Swift.Int64?
}
public struct EngagedUserWithMetadataModel {
  public var userMetadataModel: InstalibSDKFramework.InstaUserMetadataModel?
  public var engagedUserModel: InstalibSDKFramework.EngagedUserModel?
  public init()
  public init(userMetadataModel: InstalibSDKFramework.InstaUserMetadataModel, engagedUserModel: InstalibSDKFramework.EngagedUserModel)
}
extension InstalibSDKFramework.Upload {
  public struct Response {
    public struct Picture : InstalibSDKFramework.ParsedResponse {
      public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
      public let rawResponse: InstalibSDKFramework.DynamicResponse
      public var media: InstalibSDKFramework.Media? {
        get
      }
      public var uploadId: Swift.String? {
        get
      }
      public var status: Swift.String? {
        get
      }
      public init(from decoder: Swift.Decoder) throws
      public func encode(to encoder: Swift.Encoder) throws
    }
    public struct Album : InstalibSDKFramework.ParsedResponse {
      public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
      public let rawResponse: InstalibSDKFramework.DynamicResponse
      public var media: InstalibSDKFramework.Media? {
        get
      }
      public var sidecarId: Swift.String? {
        get
      }
      public var status: Swift.String? {
        get
      }
      public init(from decoder: Swift.Decoder) throws
      public func encode(to encoder: Swift.Encoder) throws
    }
    public struct Video : InstalibSDKFramework.ParsedResponse {
      public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
      public let rawResponse: InstalibSDKFramework.DynamicResponse
      public var media: InstalibSDKFramework.Media? {
        get
      }
      public var uploadId: Swift.String? {
        get
      }
      public var status: Swift.String? {
        get
      }
      public init(from decoder: Swift.Decoder) throws
      public func encode(to encoder: Swift.Encoder) throws
    }
    public struct Offset {
      public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
      public let rawResponse: InstalibSDKFramework.DynamicResponse
      public var offset: Swift.Int? {
        get
      }
      public var status: Swift.String? {
        get
      }
      public init(from decoder: Swift.Decoder) throws
      public func encode(to encoder: Swift.Encoder) throws
    }
  }
}
extension InstalibSDKFramework.Upload.Response.Video {
  public struct URL : InstalibSDKFramework.ParsedResponse {
    public init?(rawResponse: InstalibSDKFramework.DynamicResponse)
    public let rawResponse: InstalibSDKFramework.DynamicResponse
    public var url: Swift.String? {
      get
    }
    public var job: Swift.String? {
      get
    }
    public var expires: Swift.Double? {
      get
    }
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
}
public struct OFB : InstalibSDKFramework.BlockMode {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    public static func == (a: InstalibSDKFramework.OFB.Error, b: InstalibSDKFramework.OFB.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let options: InstalibSDKFramework.BlockModeOption
  public let customBlockSize: Swift.Int?
  public init(iv: Swift.Array<Swift.UInt8>)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping InstalibSDKFramework.CipherOperationOnBlock, encryptionOperation: @escaping InstalibSDKFramework.CipherOperationOnBlock) throws -> InstalibSDKFramework.CipherModeWorker
}
public typealias Star = (InstalibSDKFramework.Expression<InstalibSDKFramework.SQLiteBinding>?, InstalibSDKFramework.Expression<InstalibSDKFramework.SQLiteBinding>?) -> InstalibSDKFramework.Expression<Swift.Void>
public func * (_: InstalibSDKFramework.Expression<InstalibSDKFramework.SQLiteBinding>?, _: InstalibSDKFramework.Expression<InstalibSDKFramework.SQLiteBinding>?) -> InstalibSDKFramework.Expression<Swift.Void>
public protocol _OptionalType {
  associatedtype WrappedType
}
extension Swift.Optional : InstalibSDKFramework._OptionalType {
  public typealias WrappedType = Wrapped
}
extension Swift.Array where Element == Swift.UInt8 {
  public func toBase64() -> Swift.String?
  public init(base64: Swift.String)
}
public protocol Cryptors : AnyObject {
  func makeEncryptor() throws -> InstalibSDKFramework.Cryptor & InstalibSDKFramework.Updatable
  func makeDecryptor() throws -> InstalibSDKFramework.Cryptor & InstalibSDKFramework.Updatable
  static func randomIV(_ blockSize: Swift.Int) -> Swift.Array<Swift.UInt8>
}
extension InstalibSDKFramework.Cryptors {
  public static func randomIV(_ count: Swift.Int) -> Swift.Array<Swift.UInt8>
}
extension InstalibSDKFramework.Padding : Swift.Equatable {}
extension InstalibSDKFramework.Padding : Swift.Hashable {}
extension InstalibSDKFramework.HMAC.Error : Swift.Equatable {}
extension InstalibSDKFramework.HMAC.Error : Swift.Hashable {}
extension InstalibSDKFramework.HMAC.Variant : Swift.Equatable {}
extension InstalibSDKFramework.HMAC.Variant : Swift.Hashable {}
extension InstalibSDKFramework.MediaType : Swift.Equatable {}
extension InstalibSDKFramework.MediaType : Swift.Hashable {}
extension InstalibSDKFramework.MediaType : Swift.RawRepresentable {}
extension InstalibSDKFramework.MediaComments : InstalibSDKFramework.ParsedResponse {}
extension InstalibSDKFramework.HTC : Swift.Equatable {}
extension InstalibSDKFramework.HTC : Swift.Hashable {}
extension InstalibSDKFramework.LG : Swift.Equatable {}
extension InstalibSDKFramework.LG : Swift.Hashable {}
extension InstalibSDKFramework.Samsung : Swift.Equatable {}
extension InstalibSDKFramework.Samsung : Swift.Hashable {}
extension InstalibSDKFramework.Sony : Swift.Equatable {}
extension InstalibSDKFramework.Sony : Swift.Hashable {}
extension InstalibSDKFramework.Bit : Swift.Equatable {}
extension InstalibSDKFramework.Bit : Swift.Hashable {}
extension InstalibSDKFramework.Bit : Swift.RawRepresentable {}
extension InstalibSDKFramework.PKCS5.PBKDF2.Error : Swift.Equatable {}
extension InstalibSDKFramework.PKCS5.PBKDF2.Error : Swift.Hashable {}
extension InstalibSDKFramework.OCB.Mode : Swift.Equatable {}
extension InstalibSDKFramework.OCB.Mode : Swift.Hashable {}
extension InstalibSDKFramework.OCB.Error : Swift.Equatable {}
extension InstalibSDKFramework.OCB.Error : Swift.Hashable {}
extension InstalibSDKFramework._objc_Signature.DigestType : Swift.Equatable {}
extension InstalibSDKFramework._objc_Signature.DigestType : Swift.Hashable {}
extension InstalibSDKFramework._objc_Signature.DigestType : Swift.RawRepresentable {}
extension InstalibSDKFramework.SwKeyStore.SecError : Swift.Equatable {}
extension InstalibSDKFramework.SwKeyStore.SecError : Swift.Hashable {}
extension InstalibSDKFramework.SwKeyStore.SecError : Swift.RawRepresentable {}
extension InstalibSDKFramework.SwKeyConvert.SwError : Swift.Equatable {}
extension InstalibSDKFramework.SwKeyConvert.SwError : Swift.Hashable {}
extension InstalibSDKFramework.PEM.EncryptedPrivateKey.EncMode : Swift.Equatable {}
extension InstalibSDKFramework.PEM.EncryptedPrivateKey.EncMode : Swift.Hashable {}
extension InstalibSDKFramework.CC.CCError : Swift.Equatable {}
extension InstalibSDKFramework.CC.CCError : Swift.Hashable {}
extension InstalibSDKFramework.CC.CCError : Swift.RawRepresentable {}
extension InstalibSDKFramework.CC.DigestAlgorithm : Swift.Equatable {}
extension InstalibSDKFramework.CC.DigestAlgorithm : Swift.Hashable {}
extension InstalibSDKFramework.CC.DigestAlgorithm : Swift.RawRepresentable {}
extension InstalibSDKFramework.CC.HMACAlg : Swift.Equatable {}
extension InstalibSDKFramework.CC.HMACAlg : Swift.Hashable {}
extension InstalibSDKFramework.CC.HMACAlg : Swift.RawRepresentable {}
extension InstalibSDKFramework.CC.OpMode : Swift.Equatable {}
extension InstalibSDKFramework.CC.OpMode : Swift.Hashable {}
extension InstalibSDKFramework.CC.OpMode : Swift.RawRepresentable {}
extension InstalibSDKFramework.CC.BlockMode : Swift.Equatable {}
extension InstalibSDKFramework.CC.BlockMode : Swift.Hashable {}
extension InstalibSDKFramework.CC.BlockMode : Swift.RawRepresentable {}
extension InstalibSDKFramework.CC.AuthBlockMode : Swift.Equatable {}
extension InstalibSDKFramework.CC.AuthBlockMode : Swift.Hashable {}
extension InstalibSDKFramework.CC.AuthBlockMode : Swift.RawRepresentable {}
extension InstalibSDKFramework.CC.Algorithm : Swift.Equatable {}
extension InstalibSDKFramework.CC.Algorithm : Swift.Hashable {}
extension InstalibSDKFramework.CC.Algorithm : Swift.RawRepresentable {}
extension InstalibSDKFramework.CC.Padding : Swift.Equatable {}
extension InstalibSDKFramework.CC.Padding : Swift.Hashable {}
extension InstalibSDKFramework.CC.Padding : Swift.RawRepresentable {}
extension InstalibSDKFramework.CC.RSA.AsymmetricPadding : Swift.Equatable {}
extension InstalibSDKFramework.CC.RSA.AsymmetricPadding : Swift.Hashable {}
extension InstalibSDKFramework.CC.RSA.AsymmetricPadding : Swift.RawRepresentable {}
extension InstalibSDKFramework.CC.RSA.AsymmetricSAPadding : Swift.Equatable {}
extension InstalibSDKFramework.CC.RSA.AsymmetricSAPadding : Swift.Hashable {}
extension InstalibSDKFramework.CC.RSA.AsymmetricSAPadding : Swift.RawRepresentable {}
extension InstalibSDKFramework.CC.DH.DHParam : Swift.Equatable {}
extension InstalibSDKFramework.CC.DH.DHParam : Swift.Hashable {}
extension InstalibSDKFramework.CC.CRC.Mode : Swift.Equatable {}
extension InstalibSDKFramework.CC.CRC.Mode : Swift.Hashable {}
extension InstalibSDKFramework.CC.CRC.Mode : Swift.RawRepresentable {}
extension InstalibSDKFramework.CC.KeyDerivation.PRFAlg : Swift.Equatable {}
extension InstalibSDKFramework.CC.KeyDerivation.PRFAlg : Swift.Hashable {}
extension InstalibSDKFramework.CC.KeyDerivation.PRFAlg : Swift.RawRepresentable {}
extension InstalibSDKFramework.StoryViewers : InstalibSDKFramework.ParsedResponse {}
extension InstalibSDKFramework.AnyPaginatedResponse : InstalibSDKFramework.ParsedResponse {}
extension InstalibSDKFramework.CCM : InstalibSDKFramework.BlockMode {}
extension InstalibSDKFramework.CCM.Error : Swift.Equatable {}
extension InstalibSDKFramework.CCM.Error : Swift.Hashable {}
extension InstalibSDKFramework.CFB.Error : Swift.Equatable {}
extension InstalibSDKFramework.CFB.Error : Swift.Hashable {}
extension InstalibSDKFramework.CFB.SegmentSize : Swift.Equatable {}
extension InstalibSDKFramework.CFB.SegmentSize : Swift.Hashable {}
extension InstalibSDKFramework.CFB.SegmentSize : Swift.RawRepresentable {}
extension InstalibSDKFramework.FollowerStateTypes : Swift.Equatable {}
extension InstalibSDKFramework.FollowerStateTypes : Swift.Hashable {}
extension InstalibSDKFramework.FollowerStateTypes : Swift.RawRepresentable {}
extension InstalibSDKFramework.CBC.Error : Swift.Equatable {}
extension InstalibSDKFramework.CBC.Error : Swift.Hashable {}
extension InstalibSDKFramework.SHA3.Variant : Swift.Equatable {}
extension InstalibSDKFramework.SHA3.Variant : Swift.Hashable {}
extension InstalibSDKFramework.JoinType : Swift.Equatable {}
extension InstalibSDKFramework.JoinType : Swift.Hashable {}
extension InstalibSDKFramework.JoinType : Swift.RawRepresentable {}
extension InstalibSDKFramework.OnConflict : Swift.Equatable {}
extension InstalibSDKFramework.OnConflict : Swift.Hashable {}
extension InstalibSDKFramework.OnConflict : Swift.RawRepresentable {}
extension InstalibSDKFramework.CipherError : Swift.Equatable {}
extension InstalibSDKFramework.CipherError : Swift.Hashable {}
extension InstalibSDKFramework.Status.State : Swift.Equatable {}
extension InstalibSDKFramework.Status.State : Swift.Hashable {}
extension InstalibSDKFramework.Credentials.Verification : Swift.Equatable {}
extension InstalibSDKFramework.Credentials.Verification : Swift.Hashable {}
extension InstalibSDKFramework.Credentials.Verification : Swift.RawRepresentable {}
extension InstalibSDKFramework.Credentials.VerificationCodeType : Swift.Equatable {}
extension InstalibSDKFramework.Credentials.VerificationCodeType : Swift.Hashable {}
extension InstalibSDKFramework.Credentials.VerificationCodeType : Swift.RawRepresentable {}
extension InstalibSDKFramework.SHA2.Variant : Swift.Equatable {}
extension InstalibSDKFramework.SHA2.Variant : Swift.Hashable {}
extension InstalibSDKFramework.KeychainSwiftAccessOptions : Swift.Equatable {}
extension InstalibSDKFramework.KeychainSwiftAccessOptions : Swift.Hashable {}
extension InstalibSDKFramework.GCM.Mode : Swift.Equatable {}
extension InstalibSDKFramework.GCM.Mode : Swift.Hashable {}
extension InstalibSDKFramework.GCM.Error : Swift.Equatable {}
extension InstalibSDKFramework.GCM.Error : Swift.Hashable {}
extension InstalibSDKFramework.CMAC.Error : Swift.Equatable {}
extension InstalibSDKFramework.CMAC.Error : Swift.Hashable {}
extension InstalibSDKFramework.Gender : Swift.Equatable {}
extension InstalibSDKFramework.Gender : Swift.Hashable {}
extension InstalibSDKFramework.Gender : Swift.RawRepresentable {}
extension InstalibSDKFramework.AES.Error : Swift.Equatable {}
extension InstalibSDKFramework.AES.Error : Swift.Hashable {}
extension InstalibSDKFramework.AES.Variant : Swift.Equatable {}
extension InstalibSDKFramework.AES.Variant : Swift.Hashable {}
extension InstalibSDKFramework.AES.Variant : Swift.RawRepresentable {}
extension InstalibSDKFramework.Blowfish.Error : Swift.Equatable {}
extension InstalibSDKFramework.Blowfish.Error : Swift.Hashable {}
extension InstalibSDKFramework.TableBuilder.Dependency : Swift.Equatable {}
extension InstalibSDKFramework.TableBuilder.Dependency : Swift.Hashable {}
extension InstalibSDKFramework.TableBuilder.Dependency : Swift.RawRepresentable {}
extension InstalibSDKFramework.PrimaryKey : Swift.Equatable {}
extension InstalibSDKFramework.PrimaryKey : Swift.Hashable {}
extension InstalibSDKFramework.PCBC.Error : Swift.Equatable {}
extension InstalibSDKFramework.PCBC.Error : Swift.Hashable {}
extension InstalibSDKFramework.ChaCha20.Error : Swift.Equatable {}
extension InstalibSDKFramework.ChaCha20.Error : Swift.Hashable {}
extension InstalibSDKFramework.NotificationTypes : Swift.Equatable {}
extension InstalibSDKFramework.NotificationTypes : Swift.Hashable {}
extension InstalibSDKFramework.NotificationTypes : Swift.RawRepresentable {}
extension InstalibSDKFramework.HKDF.Error : Swift.Equatable {}
extension InstalibSDKFramework.HKDF.Error : Swift.Hashable {}
extension InstalibSDKFramework.Signature.DigestType : Swift.Equatable {}
extension InstalibSDKFramework.Signature.DigestType : Swift.Hashable {}
extension InstalibSDKFramework.FTSConfig.ColumnOption : Swift.Equatable {}
extension InstalibSDKFramework.FTSConfig.ColumnOption : Swift.Hashable {}
extension InstalibSDKFramework.FTS4Config.MatchInfo : Swift.Equatable {}
extension InstalibSDKFramework.FTS4Config.MatchInfo : Swift.Hashable {}
extension InstalibSDKFramework.FTS4Config.Order : Swift.Equatable {}
extension InstalibSDKFramework.FTS4Config.Order : Swift.Hashable {}
extension InstalibSDKFramework.PKCS5.PBKDF1.Error : Swift.Equatable {}
extension InstalibSDKFramework.PKCS5.PBKDF1.Error : Swift.Hashable {}
extension InstalibSDKFramework.PKCS5.PBKDF1.Variant : Swift.Equatable {}
extension InstalibSDKFramework.PKCS5.PBKDF1.Variant : Swift.Hashable {}
extension InstalibSDKFramework.CTR : InstalibSDKFramework.BlockMode {}
extension InstalibSDKFramework.CTR.Error : Swift.Equatable {}
extension InstalibSDKFramework.CTR.Error : Swift.Hashable {}
extension InstalibSDKFramework.FTS5Config.Detail : Swift.Equatable {}
extension InstalibSDKFramework.FTS5Config.Detail : Swift.Hashable {}
extension InstalibSDKFramework.Poly1305.Error : Swift.Equatable {}
extension InstalibSDKFramework.Poly1305.Error : Swift.Hashable {}
extension InstalibSDKFramework.Connection.Operation : Swift.Equatable {}
extension InstalibSDKFramework.Connection.Operation : Swift.Hashable {}
extension InstalibSDKFramework.Connection.TransactionMode : Swift.Equatable {}
extension InstalibSDKFramework.Connection.TransactionMode : Swift.Hashable {}
extension InstalibSDKFramework.Connection.TransactionMode : Swift.RawRepresentable {}
extension InstalibSDKFramework.Rabbit.Error : Swift.Equatable {}
extension InstalibSDKFramework.Rabbit.Error : Swift.Hashable {}
extension InstalibSDKFramework.Upload.Response.Offset : InstalibSDKFramework.ParsedResponse {}
extension InstalibSDKFramework.OFB.Error : Swift.Equatable {}
extension InstalibSDKFramework.OFB.Error : Swift.Hashable {}
